<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>Abscissa.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/plot/</path>
    <filename>a00317</filename>
    <includes id="a00293" name="traits.h" local="no" imported="no">mc_rtc/gui/details/traits.h</includes>
    <includes id="a03398" name="plot/types.h" local="no" imported="no">mc_rtc/gui/plot/types.h</includes>
    <class kind="struct">mc_rtc::gui::plot::impl::Abscissa</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <namespace>mc_rtc::gui::plot</namespace>
    <namespace>mc_rtc::gui::plot::impl</namespace>
    <member kind="function">
      <type>impl::Abscissa&lt; GetT &gt;</type>
      <name>X</name>
      <anchorfile>a00787.html</anchorfile>
      <anchor>a13155e82e2012b946c5c973369b1db56</anchor>
      <arglist>(AxisConfiguration config, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>impl::Abscissa&lt; GetT &gt;</type>
      <name>X</name>
      <anchorfile>a00787.html</anchorfile>
      <anchor>ac22eeca55379fb5c66be97b783a8bd32</anchor>
      <arglist>(const std::string &amp;legend, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>impl::Abscissa&lt; GetT &gt;</type>
      <name>X</name>
      <anchorfile>a00787.html</anchorfile>
      <anchor>ac2f689ceed9f080a4ccc49a6a70aeb4c</anchor>
      <arglist>(const char *legend, GetT get_fn)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AbscissaOrdinate.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/plot/</path>
    <filename>a00320</filename>
    <includes id="a00293" name="traits.h" local="no" imported="no">mc_rtc/gui/details/traits.h</includes>
    <includes id="a03398" name="plot/types.h" local="no" imported="no">mc_rtc/gui/plot/types.h</includes>
    <class kind="struct">mc_rtc::gui::plot::impl::AbscissaOrdinate</class>
    <class kind="struct">mc_rtc::gui::plot::impl::AbscissaOrdinateWithColor</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <namespace>mc_rtc::gui::plot</namespace>
    <namespace>mc_rtc::gui::plot::impl</namespace>
    <member kind="function">
      <type>impl::AbscissaOrdinate&lt; GetXT, GetYT &gt;</type>
      <name>XY</name>
      <anchorfile>a00787.html</anchorfile>
      <anchor>aff7557ff1a45292b67d02328c81bdde6</anchor>
      <arglist>(const std::string &amp;name, GetXT get_x_fn, GetYT get_y_fn, Color color, Style style=Style::Solid, Side side=Side::Left)</arglist>
    </member>
    <member kind="function">
      <type>impl::AbscissaOrdinateWithColor&lt; GetXT, GetYT, GetColor &gt;</type>
      <name>XY</name>
      <anchorfile>a00787.html</anchorfile>
      <anchor>a93ee6aaded7dfd640df87a78e649062d</anchor>
      <arglist>(const std::string &amp;name, GetXT get_x_fn, GetYT get_y_fn, GetColor get_color_fn, Style style=Style::Solid, Side side=Side::Left)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AddRemoveContact.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/fsm/states/</path>
    <filename>a00035</filename>
    <includes id="a03392" name="mc_control/fsm/State.h" local="no" imported="no">mc_control/fsm/State.h</includes>
    <class kind="struct">mc_control::fsm::AddRemoveContactState</class>
    <namespace>mc_control</namespace>
    <namespace>mc_control::fsm</namespace>
    <member kind="variable">
      <type>struct MC_CONTROL_FSM_STATE_DLLAPI</type>
      <name>AddRemoveContactStateImpl</name>
      <anchorfile>a00762.html</anchorfile>
      <anchor>a2deb94750a61f8f86801bd02f4149d5e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AddRemoveContactTask.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>a00461</filename>
    <includes id="a00236" name="Robots.h" local="no" imported="no">mc_rbdyn/Robots.h</includes>
    <includes id="a00404" name="BoundedSpeedConstr.h" local="no" imported="no">mc_solver/BoundedSpeedConstr.h</includes>
    <includes id="a00503" name="MetaTask.h" local="no" imported="no">mc_tasks/MetaTask.h</includes>
    <includes id="a03362" name="mc_tasks/api.h" local="no" imported="no">mc_tasks/api.h</includes>
    <class kind="struct">mc_tasks::AddRemoveContactTask</class>
    <class kind="struct">mc_tasks::AddContactTask</class>
    <class kind="struct">mc_tasks::RemoveContactTask</class>
    <namespace>mc_rbdyn</namespace>
    <namespace>mc_tasks</namespace>
  </compound>
  <compound kind="file">
    <name>AdmittanceTask.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>a00464</filename>
    <includes id="a00533" name="SurfaceTransformTask.h" local="no" imported="no">mc_tasks/SurfaceTransformTask.h</includes>
    <class kind="struct">mc_tasks::force::AdmittanceTask</class>
    <namespace>mc_tasks</namespace>
    <namespace>mc_tasks::force</namespace>
  </compound>
  <compound kind="file">
    <name>mc_control/api.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/</path>
    <filename>a03335</filename>
    <member kind="define">
      <type>#define</type>
      <name>MC_CONTROL_VERSION</name>
      <anchorfile>a03335.html</anchorfile>
      <anchor>a22df2857d14ed04f3b639527d08f7740</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_CONTROL_DLLIMPORT</name>
      <anchorfile>a03335.html</anchorfile>
      <anchor>a93d9bb1f3f36bbffb00cf015b0bb0e37</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_CONTROL_DLLEXPORT</name>
      <anchorfile>a03335.html</anchorfile>
      <anchor>a3ab2eb8965ce5e6d787aecf3e46d3be0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_CONTROL_DLLLOCAL</name>
      <anchorfile>a03335.html</anchorfile>
      <anchor>a5fd14ed2320e3cbe50d19d4ada5b64a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_CONTROL_DLLAPI</name>
      <anchorfile>a03335.html</anchorfile>
      <anchor>a167861c5d95139886801b242d6d0115f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_CONTROL_LOCAL</name>
      <anchorfile>a03335.html</anchorfile>
      <anchor>aaef3a5c95b86a2ae0592bfafaec89185</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mc_control/fsm/api.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/fsm/</path>
    <filename>a03338</filename>
    <member kind="define">
      <type>#define</type>
      <name>MC_CONTROL_FSM_VERSION</name>
      <anchorfile>a03338.html</anchorfile>
      <anchor>a6a20ff82176ab6a5233f93165acadfd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_CONTROL_FSM_DLLIMPORT</name>
      <anchorfile>a03338.html</anchorfile>
      <anchor>ab0dcbeac9312e33f462e6484a868a52b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_CONTROL_FSM_DLLEXPORT</name>
      <anchorfile>a03338.html</anchorfile>
      <anchor>a4907a97f0041ceb9c310d2b8cd0c027d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_CONTROL_FSM_DLLLOCAL</name>
      <anchorfile>a03338.html</anchorfile>
      <anchor>a1ce3297615a42b33da114e62f6176f2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_CONTROL_FSM_DLLAPI</name>
      <anchorfile>a03338.html</anchorfile>
      <anchor>abb5c53c99c37c6ca870d1838f76228ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_CONTROL_FSM_LOCAL</name>
      <anchorfile>a03338.html</anchorfile>
      <anchor>a44f5f50f69e648fb0b8d592720aeaf50</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mc_control/fsm/states/api.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/fsm/states/</path>
    <filename>a03341</filename>
    <member kind="define">
      <type>#define</type>
      <name>MC_CONTROL_FSM_STATE_VERSION</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a2fe6be3f7fd6b98de2dbdcb335b157b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_CONTROL_FSM_STATE_DLLIMPORT</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>adb918e5798089061b14f124312865580</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_CONTROL_FSM_STATE_DLLEXPORT</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a16bceb2813abeb80aa1e49f1109e6c88</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_CONTROL_FSM_STATE_DLLLOCAL</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a113188e6b7bc199d59abd8a7f463d9f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_CONTROL_FSM_STATE_DLLAPI</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a4cfcac728c1786a9888c977f8b656ba2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_CONTROL_FSM_STATE_LOCAL</name>
      <anchorfile>a03341.html</anchorfile>
      <anchor>a9f940b92f5b7fef9b7af442273630546</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mc_observers/api.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_observers/</path>
    <filename>a03344</filename>
    <member kind="define">
      <type>#define</type>
      <name>MC_OBSERVERS_DLLIMPORT</name>
      <anchorfile>a03344.html</anchorfile>
      <anchor>a0193ed43a7a8a2bca1082d339d28651e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_OBSERVERS_DLLEXPORT</name>
      <anchorfile>a03344.html</anchorfile>
      <anchor>a584f0147ac169a854c258384854bd841</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_OBSERVERS_DLLLOCAL</name>
      <anchorfile>a03344.html</anchorfile>
      <anchor>a55268a03db41d5270bf2614681e1eb51</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_OBSERVERS_DLLAPI</name>
      <anchorfile>a03344.html</anchorfile>
      <anchor>adde8be25d8f40acd541ed21395a5c73a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_OBSERVERS_LOCAL</name>
      <anchorfile>a03344.html</anchorfile>
      <anchor>a094cf177ee9875b67aca0d123880fe86</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_OBSERVER_DLLIMPORT</name>
      <anchorfile>a03344.html</anchorfile>
      <anchor>a5ec028a59707a198d06a6b92110d7ee1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_OBSERVER_DLLEXPORT</name>
      <anchorfile>a03344.html</anchorfile>
      <anchor>a71f5d19aecb89bc7ff66ea90cbec91d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_OBSERVER_DLLLOCAL</name>
      <anchorfile>a03344.html</anchorfile>
      <anchor>a933db9b3406c8c221ba3ee7f689e7511</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_OBSERVER_DLLAPI</name>
      <anchorfile>a03344.html</anchorfile>
      <anchor>a5f92e3e5bb50345181ceaa0fdc4ed310</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_OBSERVER_LOCAL</name>
      <anchorfile>a03344.html</anchorfile>
      <anchor>ad87f4c4e93529fdbfdd4a95ef34bbd7a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mc_planning/api.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_planning/</path>
    <filename>a03347</filename>
    <member kind="define">
      <type>#define</type>
      <name>MC_PLANNING_VERSION</name>
      <anchorfile>a03347.html</anchorfile>
      <anchor>aca946837554c98dec168efee18c95e5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_PLANNING_DLLIMPORT</name>
      <anchorfile>a03347.html</anchorfile>
      <anchor>a7ef3aedb0867986ac977b43fdd7cf21f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_PLANNING_DLLEXPORT</name>
      <anchorfile>a03347.html</anchorfile>
      <anchor>a6a868413b6c5bddd02aeef2f6a0ef5c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_PLANNING_DLLLOCAL</name>
      <anchorfile>a03347.html</anchorfile>
      <anchor>aff1ad001b6bf5fdb9fb19cd51c97a75e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_PLANNING_DLLAPI</name>
      <anchorfile>a03347.html</anchorfile>
      <anchor>a3adede9987330f98fe6a52abdfb955f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_PLANNING_LOCAL</name>
      <anchorfile>a03347.html</anchorfile>
      <anchor>a73898c9a3a9215937de16e50d4e504a3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mc_rbdyn/api.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>a03350</filename>
    <member kind="define">
      <type>#define</type>
      <name>MC_RBDYN_VERSION</name>
      <anchorfile>a03350.html</anchorfile>
      <anchor>a552577349e8efdac2745cbdd3898f85e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RBDYN_DLLIMPORT</name>
      <anchorfile>a03350.html</anchorfile>
      <anchor>a529cb71c3827899033a1e94d10552a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RBDYN_DLLEXPORT</name>
      <anchorfile>a03350.html</anchorfile>
      <anchor>ae269070c4054c9fa40053b5e28ea074f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RBDYN_DLLLOCAL</name>
      <anchorfile>a03350.html</anchorfile>
      <anchor>a2956eb566ae27b5965f64bc3c422c703</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RBDYN_DLLAPI</name>
      <anchorfile>a03350.html</anchorfile>
      <anchor>a5f64edebd03a669545de1ba699d6cb49</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RBDYN_LOCAL</name>
      <anchorfile>a03350.html</anchorfile>
      <anchor>a830b69e4ab5049ef14b25b9a3dd872cb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mc_robots/api.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_robots/</path>
    <filename>a03353</filename>
    <member kind="define">
      <type>#define</type>
      <name>MC_ROBOTS_VERSION</name>
      <anchorfile>a03353.html</anchorfile>
      <anchor>a12b895bf0b39c259b3eb51ee7782f970</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_ROBOTS_DLLIMPORT</name>
      <anchorfile>a03353.html</anchorfile>
      <anchor>afab08aefa87854e0f4e002300f42f2e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_ROBOTS_DLLEXPORT</name>
      <anchorfile>a03353.html</anchorfile>
      <anchor>a551f4997282c602cc3b9699950bff0d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_ROBOTS_DLLLOCAL</name>
      <anchorfile>a03353.html</anchorfile>
      <anchor>abd12baa7258deaf7a15d3874f1920e57</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_ROBOTS_DLLAPI</name>
      <anchorfile>a03353.html</anchorfile>
      <anchor>aab9f1fcb73f7bb68ce97897257085bc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_ROBOTS_LOCAL</name>
      <anchorfile>a03353.html</anchorfile>
      <anchor>a31fee9d1d5fe536ba8cfac80e376564e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mc_rtc/gui/api.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/</path>
    <filename>a03356</filename>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_GUI_VERSION</name>
      <anchorfile>a03356.html</anchorfile>
      <anchor>a3c227096c22154059e88b20b7cd202bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_GUI_DLLIMPORT</name>
      <anchorfile>a03356.html</anchorfile>
      <anchor>a9365441c6f8e61e9f8c39bb75c617b43</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_GUI_DLLEXPORT</name>
      <anchorfile>a03356.html</anchorfile>
      <anchor>a14ad7305617c58803f8ce0c7541bb508</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_GUI_DLLLOCAL</name>
      <anchorfile>a03356.html</anchorfile>
      <anchor>a0480d192b9c9ae9d9d88bf17771118b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_GUI_DLLAPI</name>
      <anchorfile>a03356.html</anchorfile>
      <anchor>a0154310cb006fb3f499c367ca3e861a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_GUI_LOCAL</name>
      <anchorfile>a03356.html</anchorfile>
      <anchor>aa7fe5afca945e356848d1a6b156528fa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mc_solver/api.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_solver/</path>
    <filename>a03359</filename>
    <member kind="define">
      <type>#define</type>
      <name>MC_SOLVER_VERSION</name>
      <anchorfile>a03359.html</anchorfile>
      <anchor>ae4634b29539fd982b8b83c15830c1c37</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_SOLVER_DLLIMPORT</name>
      <anchorfile>a03359.html</anchorfile>
      <anchor>a85361305f43d765074b5a82afaa82487</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_SOLVER_DLLEXPORT</name>
      <anchorfile>a03359.html</anchorfile>
      <anchor>a24ff42006c016a5adc79aec2a1dfc0fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_SOLVER_DLLLOCAL</name>
      <anchorfile>a03359.html</anchorfile>
      <anchor>ae3c35da4cb012ab2f6caea5696a56dae</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_SOLVER_DLLAPI</name>
      <anchorfile>a03359.html</anchorfile>
      <anchor>a1f670c9ef41bde54578a3afc8fd75445</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_SOLVER_LOCAL</name>
      <anchorfile>a03359.html</anchorfile>
      <anchor>ad2b85045fbd2243b5745829691239595</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mc_tasks/api.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>a03362</filename>
    <member kind="define">
      <type>#define</type>
      <name>MC_TASKS_VERSION</name>
      <anchorfile>a03362.html</anchorfile>
      <anchor>a47ff1b35f32c422f53ffee9a1a5d2de4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_TASKS_DLLIMPORT</name>
      <anchorfile>a03362.html</anchorfile>
      <anchor>a1ca51f7fba6e50050fa71ee00906116e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_TASKS_DLLEXPORT</name>
      <anchorfile>a03362.html</anchorfile>
      <anchor>a6f58d55d50caa4b695e9ae0db68a84e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_TASKS_DLLLOCAL</name>
      <anchorfile>a03362.html</anchorfile>
      <anchor>a88d2b44a0ab87ccac98cac02f5bc0220</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_TASKS_DLLAPI</name>
      <anchorfile>a03362.html</anchorfile>
      <anchor>a54b6b62a72f51c6877ce5f6855eae009</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_TASKS_LOCAL</name>
      <anchorfile>a03362.html</anchorfile>
      <anchor>a6fad7ce5639c7536227a82e08f06c0e5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mc_trajectory/api.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_trajectory/</path>
    <filename>a03365</filename>
    <member kind="define">
      <type>#define</type>
      <name>MC_TRAJECTORY_VERSION</name>
      <anchorfile>a03365.html</anchorfile>
      <anchor>acd63e2a4854ce5d3f1eec2e5f2cf7498</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_TRAJECTORY_DLLIMPORT</name>
      <anchorfile>a03365.html</anchorfile>
      <anchor>a6dc4322483ff7548be6769a3e2d2ae54</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_TRAJECTORY_DLLEXPORT</name>
      <anchorfile>a03365.html</anchorfile>
      <anchor>a531302b8554807c8aca0fcf931c490f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_TRAJECTORY_DLLLOCAL</name>
      <anchorfile>a03365.html</anchorfile>
      <anchor>aa1a1e2ac0d81d28e134d91b52199d1e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_TRAJECTORY_DLLAPI</name>
      <anchorfile>a03365.html</anchorfile>
      <anchor>adff5a6c1e965ae6fdc756a2c5187f9c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_TRAJECTORY_LOCAL</name>
      <anchorfile>a03365.html</anchorfile>
      <anchor>a4d2a4bf4b090297efb1f6dfa124b52e2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ArrayInput.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/</path>
    <filename>a00272</filename>
    <includes id="a00296" name="elements.h" local="no" imported="no">mc_rtc/gui/elements.h</includes>
    <class kind="struct">mc_rtc::gui::ArrayInputImpl</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <member kind="function">
      <type>ArrayInputImpl&lt; GetT, SetT &gt;</type>
      <name>ArrayInput</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>ad70775c90f4b00f10abc4c5a5721e557</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, SetT set_fn)</arglist>
    </member>
    <member kind="function">
      <type>ArrayInputImpl&lt; GetT, SetT &gt;</type>
      <name>ArrayInput</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>a7f24f6599b905f3caf6ad3ec29def6bf</anchor>
      <arglist>(const std::string &amp;name, const std::vector&lt; std::string &gt; &amp;labels, GetT get_fn, SetT set_fn)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ArrayLabel.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/</path>
    <filename>a00275</filename>
    <includes id="a00308" name="Label.h" local="no" imported="no">mc_rtc/gui/Label.h</includes>
    <class kind="struct">mc_rtc::gui::ArrayLabelImpl</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <member kind="function">
      <type>ArrayLabelImpl&lt; GetT &gt;</type>
      <name>ArrayLabel</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>a308b0967f9f6dc43f0f27bcc7d1c2b69</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>ArrayLabelImpl&lt; GetT &gt;</type>
      <name>ArrayLabel</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>ab51ab91bf57f9e53c1b5c69ab3d8bc61</anchor>
      <arglist>(const std::string &amp;name, const std::vector&lt; std::string &gt; &amp;labels, GetT get_fn)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Arrow.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/</path>
    <filename>a00278</filename>
    <includes id="a00293" name="traits.h" local="no" imported="no">mc_rtc/gui/details/traits.h</includes>
    <includes id="a00296" name="elements.h" local="no" imported="no">mc_rtc/gui/elements.h</includes>
    <includes id="a00332" name="types.h" local="no" imported="no">mc_rtc/gui/types.h</includes>
    <class kind="struct">mc_rtc::gui::ArrowROImpl</class>
    <class kind="struct">mc_rtc::gui::ArrowImpl</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <member kind="function">
      <type>ArrowROImpl&lt; GetStart, GetEnd &gt;</type>
      <name>Arrow</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>aae7d8d2d90a01712f0f57ba5f5ec0faf</anchor>
      <arglist>(const std::string &amp;name, GetStart get_start_fn, GetEnd get_end_fn)</arglist>
    </member>
    <member kind="function">
      <type>ArrowROImpl&lt; GetStart, GetEnd &gt;</type>
      <name>Arrow</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>ab5cef94f254edfaaa52e300ef9d9287b</anchor>
      <arglist>(const std::string &amp;name, const ArrowConfig &amp;config, GetStart get_start_fn, GetEnd get_end_fn)</arglist>
    </member>
    <member kind="function">
      <type>ArrowImpl&lt; GetStart, SetStart, GetEnd, SetEnd &gt;</type>
      <name>Arrow</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>a910fc94e100370b4eaa72737398268aa</anchor>
      <arglist>(const std::string &amp;name, GetStart get_start_fn, SetStart set_start_fn, GetEnd get_end_fn, SetEnd set_end_fn)</arglist>
    </member>
    <member kind="function">
      <type>ArrowImpl&lt; GetStart, SetStart, GetEnd, SetEnd &gt;</type>
      <name>Arrow</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>a35479664be1d4b8d4c55baf5e76e16ae</anchor>
      <arglist>(const std::string &amp;name, const ArrowConfig &amp;config, GetStart get_start_fn, SetStart set_start_fn, GetEnd get_end_fn, SetEnd set_end_fn)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Base.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>a00170</filename>
    <includes id="a03350" name="mc_rbdyn/api.h" local="no" imported="no">mc_rbdyn/api.h</includes>
    <class kind="struct">mc_rbdyn::Base</class>
    <namespace>mc_rbdyn</namespace>
  </compound>
  <compound kind="file">
    <name>BodySensor.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>a00173</filename>
    <includes id="a00194" name="Device.h" local="no" imported="no">mc_rbdyn/Device.h</includes>
    <class kind="struct">mc_rbdyn::BodySensor</class>
    <namespace>mc_rbdyn</namespace>
    <member kind="typedef">
      <type>std::vector&lt; BodySensor, Eigen::aligned_allocator&lt; BodySensor &gt; &gt;</type>
      <name>BodySensorVector</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>a728d731db2806e7673f67b958970e558</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BodySensorObserver.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_observers/</path>
    <filename>a00116</filename>
    <includes id="a00128" name="Observer.h" local="no" imported="no">mc_observers/Observer.h</includes>
    <includes id="a03344" name="mc_observers/api.h" local="no" imported="no">mc_observers/api.h</includes>
    <includes id="a03386" name="mc_rbdyn/Robot.h" local="no" imported="no">mc_rbdyn/Robot.h</includes>
    <class kind="struct">mc_observers::BodySensorObserver</class>
    <namespace>mc_observers</namespace>
  </compound>
  <compound kind="file">
    <name>BoundedSpeedConstr.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_solver/</path>
    <filename>a00404</filename>
    <includes id="a00446" name="QPSolver.h" local="no" imported="no">mc_solver/QPSolver.h</includes>
    <includes id="a03359" name="mc_solver/api.h" local="no" imported="no">mc_solver/api.h</includes>
    <class kind="class">mc_solver::BoundedSpeedConstr</class>
    <namespace>mc_solver</namespace>
  </compound>
  <compound kind="file">
    <name>BSpline.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_trajectory/</path>
    <filename>a00542</filename>
    <includes id="a00347" name="StateBuilder.h" local="no" imported="no">mc_rtc/gui/StateBuilder.h</includes>
    <includes id="a00551" name="Spline.h" local="no" imported="no">mc_trajectory/Spline.h</includes>
    <includes id="a03365" name="mc_trajectory/api.h" local="no" imported="no">mc_trajectory/api.h</includes>
    <class kind="struct">mc_trajectory::BSpline</class>
    <namespace>mc_trajectory</namespace>
  </compound>
  <compound kind="file">
    <name>BSplineTrajectoryTask.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>a00467</filename>
    <includes id="a00530" name="SplineTrajectoryTask.h" local="no" imported="no">mc_tasks/SplineTrajectoryTask.h</includes>
    <includes id="a00542" name="BSpline.h" local="no" imported="no">mc_trajectory/BSpline.h</includes>
    <class kind="struct">mc_tasks::BSplineTrajectoryTask</class>
    <namespace>mc_tasks</namespace>
  </compound>
  <compound kind="file">
    <name>Button.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/</path>
    <filename>a00281</filename>
    <includes id="a00296" name="elements.h" local="no" imported="no">mc_rtc/gui/elements.h</includes>
    <class kind="struct">mc_rtc::gui::ButtonImpl</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <member kind="function">
      <type>ButtonImpl&lt; Callback &gt;</type>
      <name>Button</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>a7d2e7edd5eaf913a973c519cdd6affa2</anchor>
      <arglist>(const std::string &amp;name, Callback cb)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Checkbox.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/</path>
    <filename>a00284</filename>
    <includes id="a00293" name="traits.h" local="no" imported="no">mc_rtc/gui/details/traits.h</includes>
    <includes id="a00296" name="elements.h" local="no" imported="no">mc_rtc/gui/elements.h</includes>
    <class kind="struct">mc_rtc::gui::CheckboxImpl</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <member kind="function">
      <type>CheckboxImpl&lt; GetT, Callback &gt;</type>
      <name>Checkbox</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>afc7e12ae3accc04250d14da90634986b</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, Callback cb)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>clamp.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_filter/utils/</path>
    <filename>a00113</filename>
    <includes id="a00389" name="logging.h" local="no" imported="no">mc_rtc/logging.h</includes>
    <namespace>mc_filter</namespace>
    <namespace>mc_filter::utils</namespace>
    <member kind="function">
      <type>double</type>
      <name>clamp</name>
      <anchorfile>a00768.html</anchorfile>
      <anchor>adfd3c18de5d65e94ce24d479f30dab1b</anchor>
      <arglist>(double value, double lower, double upper)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clampInPlace</name>
      <anchorfile>a00768.html</anchorfile>
      <anchor>ab8d9ca10808c933f3408d9b3f0fd72ab</anchor>
      <arglist>(double &amp;value, double lower, double upper)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>clampAndWarn</name>
      <anchorfile>a00768.html</anchorfile>
      <anchor>ae558cb782558a6fe59c9975f5e9dc2b4</anchor>
      <arglist>(double value, double lower, double upper, const std::string &amp;label)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clampInPlaceAndWarn</name>
      <anchorfile>a00768.html</anchorfile>
      <anchor>ac413b7125d296374adc252995e63570d</anchor>
      <arglist>(double &amp;value, double lower, double upper, const std::string &amp;label)</arglist>
    </member>
    <member kind="function">
      <type>VectorT</type>
      <name>clamp</name>
      <anchorfile>a00768.html</anchorfile>
      <anchor>a644eea0a16a707328be39ddd79f967f5</anchor>
      <arglist>(const VectorT &amp;v, double lower, double upper)</arglist>
    </member>
    <member kind="function">
      <type>VectorT</type>
      <name>clamp</name>
      <anchorfile>a00768.html</anchorfile>
      <anchor>a27751a2cc46af2d62717f6f52c518382</anchor>
      <arglist>(const VectorT &amp;v, const VectorT &amp;lower, const VectorT &amp;upper)</arglist>
    </member>
    <member kind="function">
      <type>VectorT</type>
      <name>clampAndWarn</name>
      <anchorfile>a00768.html</anchorfile>
      <anchor>aab0443f3755eb02422bb0ed23308f220</anchor>
      <arglist>(const VectorT &amp;v, const VectorT &amp;lower, const VectorT &amp;upper, const std::string &amp;label)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clampInPlace</name>
      <anchorfile>a00768.html</anchorfile>
      <anchor>a7ee9282ad316cf4eef418c7060fcfcf9</anchor>
      <arglist>(VectorT &amp;v, const VectorT &amp;lower, const VectorT &amp;upper)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clampInPlace</name>
      <anchorfile>a00768.html</anchorfile>
      <anchor>a4de43cd1afd6571c2b390ac00c3ed252</anchor>
      <arglist>(VectorT &amp;v, double lower, double upper)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clampInPlaceAndWarn</name>
      <anchorfile>a00768.html</anchorfile>
      <anchor>aae7592fcc8c4adee0d0108bc9ffba659</anchor>
      <arglist>(VectorT &amp;vector, const VectorT &amp;lower, const VectorT &amp;upper, const std::string &amp;label)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ClampedCubicSpline.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_planning/</path>
    <filename>a00137</filename>
    <includes id="a00140" name="CubicSplineBase.h" local="no" imported="no">mc_planning/CubicSplineBase.h</includes>
    <class kind="class">mc_planning::motion_interpolator::ClampedCubicSpline</class>
    <namespace>mc_planning</namespace>
    <namespace>mc_planning::motion_interpolator</namespace>
  </compound>
  <compound kind="file">
    <name>client_api.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/</path>
    <filename>a00005</filename>
    <member kind="define">
      <type>#define</type>
      <name>MC_CONTROL_CLIENT_VERSION</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>ae857da0c370e43bde706be611dd7fd3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_CONTROL_CLIENT_DLLIMPORT</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>ab2b2007b5447424d69ba1ba5554910d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_CONTROL_CLIENT_DLLEXPORT</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a135d76578fe99739b25aeb9f883b6303</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_CONTROL_CLIENT_DLLLOCAL</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>ae5523bd90c6e0b83d5a4c0988b281599</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_CONTROL_CLIENT_DLLAPI</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>ad7a20267075ce3dd99312af104b78af8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_CONTROL_CLIENT_LOCAL</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>aceaa3c77684597c7804fd3d0b73b331c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Collision.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>a00176</filename>
    <includes id="a03350" name="mc_rbdyn/api.h" local="no" imported="no">mc_rbdyn/api.h</includes>
    <class kind="struct">mc_rbdyn::Collision</class>
    <namespace>mc_rbdyn</namespace>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>aca0a2bc620d221c02c834716d875c1e0</anchor>
      <arglist>(std::ostream &amp;os, const Collision &amp;c)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CollisionsConstraint.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_solver/</path>
    <filename>a00407</filename>
    <includes id="a00176" name="Collision.h" local="no" imported="no">mc_rbdyn/Collision.h</includes>
    <includes id="a03374" name="mc_rbdyn/Contact.h" local="no" imported="no">mc_rbdyn/Contact.h</includes>
    <includes id="a00236" name="Robots.h" local="no" imported="no">mc_rbdyn/Robots.h</includes>
    <includes id="a00416" name="ConstraintSet.h" local="no" imported="no">mc_solver/ConstraintSet.h</includes>
    <class kind="class">mc_solver::CollisionsConstraint</class>
    <class kind="class">mc_solver::RobotEnvCollisionsConstraint</class>
    <namespace>mc_solver</namespace>
  </compound>
  <compound kind="file">
    <name>ComboInput.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/</path>
    <filename>a00287</filename>
    <includes id="a00293" name="traits.h" local="no" imported="no">mc_rtc/gui/details/traits.h</includes>
    <includes id="a00296" name="elements.h" local="no" imported="no">mc_rtc/gui/elements.h</includes>
    <class kind="struct">mc_rtc::gui::ComboInputImpl</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <member kind="function">
      <type>ComboInputImpl&lt; GetT, SetT &gt;</type>
      <name>ComboInput</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>aea7948a0427bfd1acd2a28803e5559e1</anchor>
      <arglist>(const std::string &amp;name, const std::vector&lt; std::string &gt; &amp;values, GetT get_fn, SetT set_fn)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CoMIncPlaneConstr.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_solver/</path>
    <filename>a00410</filename>
    <includes id="a00218" name="polygon_utils.h" local="no" imported="no">mc_rbdyn/polygon_utils.h</includes>
    <includes id="a00446" name="QPSolver.h" local="no" imported="no">mc_solver/QPSolver.h</includes>
    <includes id="a03359" name="mc_solver/api.h" local="no" imported="no">mc_solver/api.h</includes>
    <class kind="class">mc_solver::CoMIncPlaneConstr</class>
    <namespace>mc_solver</namespace>
  </compound>
  <compound kind="file">
    <name>CompletionCriteria.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/</path>
    <filename>a00008</filename>
    <includes id="a03335" name="mc_control/api.h" local="no" imported="no">mc_control/api.h</includes>
    <includes id="a00503" name="MetaTask.h" local="no" imported="no">mc_tasks/MetaTask.h</includes>
    <class kind="struct">mc_control::CompletionCriteria</class>
    <namespace>mc_control</namespace>
  </compound>
  <compound kind="file">
    <name>ComplianceTask.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>a00470</filename>
    <includes id="a00482" name="EndEffectorTask.h" local="no" imported="no">mc_tasks/EndEffectorTask.h</includes>
    <includes id="a00503" name="MetaTask.h" local="no" imported="no">mc_tasks/MetaTask.h</includes>
    <class kind="struct">mc_tasks::force::ComplianceTask</class>
    <namespace>mc_tasks</namespace>
    <namespace>mc_tasks::force</namespace>
  </compound>
  <compound kind="file">
    <name>CompoundJointConstraint.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_solver/</path>
    <filename>a00413</filename>
    <includes id="a00179" name="CompoundJointConstraintDescription.h" local="no" imported="no">mc_rbdyn/CompoundJointConstraintDescription.h</includes>
    <includes id="a00236" name="Robots.h" local="no" imported="no">mc_rbdyn/Robots.h</includes>
    <includes id="a00416" name="ConstraintSet.h" local="no" imported="no">mc_solver/ConstraintSet.h</includes>
    <class kind="struct">mc_solver::details::CompoundJointConstraint</class>
    <class kind="struct">mc_solver::CompoundJointConstraint</class>
    <namespace>mc_solver</namespace>
    <namespace>mc_solver::details</namespace>
    <member kind="typedef">
      <type>mc_rbdyn::CompoundJointConstraintDescription</type>
      <name>CompoundJointConstraintDescription</name>
      <anchorfile>a00773.html</anchorfile>
      <anchor>afa4d95156100f691a3f35392f403217f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>mc_rbdyn::CompoundJointConstraintDescriptionVector</type>
      <name>CompoundJointConstraintDescriptionVector</name>
      <anchorfile>a00773.html</anchorfile>
      <anchor>a2503fc4f7d91a2f6c53349f2a12effd1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CompoundJointConstraintDescription.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>a00179</filename>
    <includes id="a03371" name="mc_rtc/Configuration.h" local="no" imported="no">mc_rtc/Configuration.h</includes>
    <class kind="struct">mc_rbdyn::CompoundJointConstraintDescription</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; mc_rbdyn::CompoundJointConstraintDescription &gt;</class>
    <namespace>mc_rbdyn</namespace>
    <namespace>mc_rtc</namespace>
    <member kind="typedef">
      <type>std::vector&lt; CompoundJointConstraintDescription, Eigen::aligned_allocator&lt; CompoundJointConstraintDescription &gt; &gt;</type>
      <name>CompoundJointConstraintDescriptionVector</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>a96a35f8f44c0b0eb301fabc4af2bd978</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CoMTask.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>a00473</filename>
    <includes id="a00536" name="TrajectoryTaskGeneric.h" local="no" imported="no">mc_tasks/TrajectoryTaskGeneric.h</includes>
    <class kind="struct">mc_tasks::CoMTask</class>
    <namespace>mc_tasks</namespace>
  </compound>
  <compound kind="file">
    <name>mc_control/Configuration.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/</path>
    <filename>a03368</filename>
    <includes id="a03371" name="mc_rtc/Configuration.h" local="no" imported="no">mc_rtc/Configuration.h</includes>
    <namespace>mc_control</namespace>
    <member kind="typedef">
      <type>mc_rtc::Configuration</type>
      <name>Configuration</name>
      <anchorfile>a00761.html</anchorfile>
      <anchor>a6e724381ca619d4c38da5fd7cdbfe9c0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mc_rtc/Configuration.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/</path>
    <filename>a03371</filename>
    <includes id="a00392" name="MessagePackBuilder.h" local="no" imported="no">mc_rtc/MessagePackBuilder.h</includes>
    <class kind="struct">mc_rtc::ConfigurationLoader</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; void &gt;</class>
    <class kind="struct">mc_rtc::internal::_has_configuration_load_object</class>
    <class kind="struct">mc_rtc::internal::has_configuration_load_object</class>
    <class kind="struct">mc_rtc::internal::_has_configuration_save_object</class>
    <class kind="struct">mc_rtc::internal::has_configuration_save_object</class>
    <class kind="struct">mc_rtc::Configuration</class>
    <class kind="struct">mc_rtc::Configuration::Exception</class>
    <class kind="struct">mc_rtc::ConfigurationArrayIterator</class>
    <class kind="struct">fmt::formatter&lt; mc_rtc::Configuration &gt;</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::internal</namespace>
    <namespace>fmt</namespace>
    <member kind="function">
      <type>MC_RTC_UTILS_DLLAPI std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a03371.html</anchorfile>
      <anchor>a24679a5c44564f7b7426cca4533300bf</anchor>
      <arglist>(std::ostream &amp;os, const mc_rtc::Configuration &amp;c)</arglist>
    </member>
    <member kind="variable">
      <type>struct MC_RTC_UTILS_DLLAPI</type>
      <name>ConfigurationArrayIterator</name>
      <anchorfile>a00763.html</anchorfile>
      <anchor>a781ea11d3b3f97742187d5910b74edfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct MC_RTC_UTILS_DLLAPI</type>
      <name>Configuration</name>
      <anchorfile>a00763.html</anchorfile>
      <anchor>a9b620c9005d103e65363b518ba6dca23</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>configuration_io.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>a00182</filename>
    <includes id="a03371" name="mc_rtc/Configuration.h" local="no" imported="no">mc_rtc/Configuration.h</includes>
    <includes id="a00170" name="Base.h" local="no" imported="no">mc_rbdyn/Base.h</includes>
    <includes id="a00173" name="BodySensor.h" local="no" imported="no">mc_rbdyn/BodySensor.h</includes>
    <includes id="a00176" name="Collision.h" local="no" imported="no">mc_rbdyn/Collision.h</includes>
    <includes id="a00197" name="Flexibility.h" local="no" imported="no">mc_rbdyn/Flexibility.h</includes>
    <includes id="a00200" name="ForceSensor.h" local="no" imported="no">mc_rbdyn/ForceSensor.h</includes>
    <includes id="a00221" name="PolygonInterpolator.h" local="no" imported="no">mc_rbdyn/PolygonInterpolator.h</includes>
    <includes id="a00230" name="RobotModule.h" local="no" imported="no">mc_rbdyn/RobotModule.h</includes>
    <includes id="a00245" name="Springs.h" local="no" imported="no">mc_rbdyn/Springs.h</includes>
    <includes id="a00218" name="polygon_utils.h" local="no" imported="no">mc_rbdyn/polygon_utils.h</includes>
    <includes id="a00191" name="CylindricalSurface.h" local="no" imported="no">mc_rbdyn/CylindricalSurface.h</includes>
    <includes id="a00203" name="GripperSurface.h" local="no" imported="no">mc_rbdyn/GripperSurface.h</includes>
    <includes id="a00215" name="PlanarSurface.h" local="no" imported="no">mc_rbdyn/PlanarSurface.h</includes>
    <includes id="a03374" name="mc_rbdyn/Contact.h" local="no" imported="no">mc_rbdyn/Contact.h</includes>
    <includes id="a00389" name="logging.h" local="no" imported="no">mc_rtc/logging.h</includes>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; mc_rbdyn::RobotModule &gt;</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; mc_rbdyn::RobotModulePtr &gt;</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; mc_rbdyn::Contact &gt;</class>
    <namespace>mc_rtc</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DECLARE_IO</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>a839325e1d657147f6c746b3043b0b1b0</anchor>
      <arglist>(...)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConfigurationHelpers.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/</path>
    <filename>a00260</filename>
    <includes id="a03371" name="mc_rtc/Configuration.h" local="no" imported="no">mc_rtc/Configuration.h</includes>
    <includes id="a00389" name="logging.h" local="no" imported="no">mc_rtc/logging.h</includes>
    <namespace>mc_rtc</namespace>
    <member kind="function">
      <type>std::vector&lt; T &gt;</type>
      <name>fromVectorOrElement</name>
      <anchorfile>a00763.html</anchorfile>
      <anchor>ac1107b5d5bcf197a41add86ce445c866</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config, const std::string &amp;key, const std::vector&lt; T &gt; &amp;defaultVec)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; T &gt;</type>
      <name>fromVectorOrElement</name>
      <anchorfile>a00763.html</anchorfile>
      <anchor>a9c308b4400fb83031251be1f6ab0adb2</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config, const std::string &amp;key)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>constants.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/</path>
    <filename>a00263</filename>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::constants</namespace>
    <member kind="define">
      <type>#define</type>
      <name>EIGEN_PI</name>
      <anchorfile>a00263.html</anchorfile>
      <anchor>aebdd4427aa2148313c07b0eedad449ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>toDeg</name>
      <anchorfile>a00783.html</anchorfile>
      <anchor>a357fd1ef503f568cf436fbda923472cf</anchor>
      <arglist>(const double degrees)</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>toRad</name>
      <anchorfile>a00783.html</anchorfile>
      <anchor>a2ca6e1fbd563bfd79d6484a3295d08bd</anchor>
      <arglist>(const double rad)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr double</type>
      <name>GRAVITY</name>
      <anchorfile>a00783.html</anchorfile>
      <anchor>a04b344c34834432afcfcc1ac86bff22c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Eigen::Vector3d</type>
      <name>gravity</name>
      <anchorfile>a00783.html</anchorfile>
      <anchor>acf271123cee2ac958b9ae0f9220ea422</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Eigen::Vector3d</type>
      <name>vertical</name>
      <anchorfile>a00783.html</anchorfile>
      <anchor>aaaeaab7136aa7d17fa172fde905c2cc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr double</type>
      <name>PI</name>
      <anchorfile>a00783.html</anchorfile>
      <anchor>a8cb2b2837ea283890b185cfef0631602</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Constraint.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_solver/utils/</path>
    <filename>a00449</filename>
    <includes id="a00455" name="Update.h" local="no" imported="no">mc_solver/utils/Update.h</includes>
    <class kind="class">mc_solver::utils::Constraint</class>
    <namespace>mc_solver</namespace>
    <namespace>mc_solver::utils</namespace>
  </compound>
  <compound kind="file">
    <name>ConstraintSet.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_solver/</path>
    <filename>a00416</filename>
    <includes id="a03359" name="mc_solver/api.h" local="no" imported="no">mc_solver/api.h</includes>
    <class kind="class">mc_solver::ConstraintSet</class>
    <namespace>mc_solver</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ConstraintSet &gt;</type>
      <name>ConstraintSetPtr</name>
      <anchorfile>a00773.html</anchorfile>
      <anchor>a9bce96d8d352ebedfffce2e42e0300ab</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConstraintSetLoader.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_solver/</path>
    <filename>a00419</filename>
    <includes id="a00416" name="ConstraintSet.h" local="no" imported="no">mc_solver/ConstraintSet.h</includes>
    <includes id="a00431" name="GenericLoader.h" local="no" imported="no">mc_solver/GenericLoader.h</includes>
    <class kind="struct">mc_solver::ConstraintSetLoader</class>
    <namespace>mc_solver</namespace>
  </compound>
  <compound kind="file">
    <name>mc_rbdyn/Contact.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>a03374</filename>
    <includes id="a03350" name="mc_rbdyn/api.h" local="no" imported="no">mc_rbdyn/api.h</includes>
    <includes id="a03371" name="mc_rtc/Configuration.h" local="no" imported="no">mc_rtc/Configuration.h</includes>
    <class kind="struct">mc_solver::QPContactPtr</class>
    <class kind="struct">mc_solver::QPContactPtrWPoints</class>
    <class kind="struct">mc_rbdyn::Contact</class>
    <namespace>mc_solver</namespace>
    <namespace>mc_rbdyn</namespace>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI std::vector&lt; sva::PTransformd &gt;</type>
      <name>computePoints</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>a736c36f68b3eff9f08124c8b1a58cba3</anchor>
      <arglist>(const mc_rbdyn::Surface &amp;robotSurface, const mc_rbdyn::Surface &amp;envSurface, const sva::PTransformd &amp;X_es_rs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mc_solver/msg/Contact.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_solver/msg/</path>
    <filename>a03377</filename>
    <class kind="struct">mc_solver::ContactMsg</class>
    <namespace>mc_solver</namespace>
  </compound>
  <compound kind="file">
    <name>mc_tasks/lipm_stabilizer/Contact.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/lipm_stabilizer/</path>
    <filename>a03380</filename>
    <includes id="a03386" name="mc_rbdyn/Robot.h" local="no" imported="no">mc_rbdyn/Robot.h</includes>
    <includes id="a03371" name="mc_rtc/Configuration.h" local="no" imported="no">mc_rtc/Configuration.h</includes>
    <includes id="a00389" name="logging.h" local="no" imported="no">mc_rtc/logging.h</includes>
    <includes id="a03362" name="mc_tasks/api.h" local="no" imported="no">mc_tasks/api.h</includes>
    <class kind="struct">mc_tasks::lipm_stabilizer::internal::Contact</class>
    <class kind="struct">mc_tasks::lipm_stabilizer::ContactDescription</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; mc_tasks::lipm_stabilizer::ContactState &gt;</class>
    <namespace>mc_tasks</namespace>
    <namespace>mc_tasks::lipm_stabilizer</namespace>
    <namespace>mc_tasks::lipm_stabilizer::internal</namespace>
    <namespace>mc_rtc</namespace>
    <member kind="typedef">
      <type>std::pair&lt; Eigen::MatrixXd, Eigen::VectorXd &gt;</type>
      <name>HrepXd</name>
      <anchorfile>a00765.html</anchorfile>
      <anchor>af644950088ef46324f20a7214021a824</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; ContactDescription, Eigen::aligned_allocator&lt; ContactDescription &gt; &gt;</type>
      <name>ContactDescriptionVector</name>
      <anchorfile>a00765.html</anchorfile>
      <anchor>a4ca092c9a2df0b34b399ff21a8bc938f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>Left</name>
      <anchorfile>a03380.html</anchorfile>
      <anchor>aa149c1d1da2ae1c94f1ae91f4919625a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>contact_transform.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>a00188</filename>
    <includes id="a03350" name="mc_rbdyn/api.h" local="no" imported="no">mc_rbdyn/api.h</includes>
    <namespace>mc_rbdyn</namespace>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI sva::PTransformd</type>
      <name>planar</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>aca49bff3651cf81d0b834813b80fcdf6</anchor>
      <arglist>(const double &amp;T, const double &amp;B, const double &amp;N_rot)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI sva::PTransformd</type>
      <name>cylindrical</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>a44fdec158ad0a6005388d1f2296b154f</anchor>
      <arglist>(const double &amp;T, const double &amp;T_rot)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI void</type>
      <name>planarParam</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>ad2a0e2d6fd6cdece777a838b76a7c1da</anchor>
      <arglist>(const sva::PTransformd &amp;X_es_rs, double &amp;T, double &amp;B, double &amp;N_rot)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI void</type>
      <name>cylindricalParam</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>a611ca01f8c4f76581c96c8df0202f195</anchor>
      <arglist>(const sva::PTransformd &amp;X_es_rs, double &amp;T, double &amp;T_rot)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI std::vector&lt; double &gt;</type>
      <name>jointParam</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>ac6670e00a7e663e03a4709533a706e89</anchor>
      <arglist>(const Surface &amp;r1Surface, const Surface &amp;r2Surface, const sva::PTransformd &amp;X_es_rs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ContactConstraint.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_solver/</path>
    <filename>a00422</filename>
    <includes id="a00416" name="ConstraintSet.h" local="no" imported="no">mc_solver/ConstraintSet.h</includes>
    <class kind="class">mc_solver::ContactConstraint</class>
    <namespace>mc_solver</namespace>
  </compound>
  <compound kind="file">
    <name>ContactWrenchMatrixToLambdaMatrix.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_solver/utils/</path>
    <filename>a00452</filename>
    <includes id="a00446" name="QPSolver.h" local="no" imported="no">mc_solver/QPSolver.h</includes>
    <includes id="a03359" name="mc_solver/api.h" local="no" imported="no">mc_solver/api.h</includes>
    <class kind="struct">mc_solver::utils::ContactWrenchMatrixToLambdaMatrix</class>
    <namespace>mc_solver</namespace>
    <namespace>mc_solver::utils</namespace>
  </compound>
  <compound kind="file">
    <name>Controller.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/fsm/</path>
    <filename>a00020</filename>
    <includes id="a00092" name="MCController.h" local="no" imported="no">mc_control/MCController.h</includes>
    <includes id="a00023" name="Executor.h" local="no" imported="no">mc_control/fsm/Executor.h</includes>
    <includes id="a00482" name="EndEffectorTask.h" local="no" imported="no">mc_tasks/EndEffectorTask.h</includes>
    <includes id="a00521" name="PostureTask.h" local="no" imported="no">mc_tasks/PostureTask.h</includes>
    <class kind="class">mc_control::fsm::Contact</class>
    <class kind="struct">std::hash&lt; mc_control::fsm::Contact &gt;</class>
    <class kind="class">mc_control::fsm::Controller</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; mc_control::fsm::Contact &gt;</class>
    <namespace>mc_control</namespace>
    <namespace>mc_control::fsm</namespace>
    <namespace>mc_rtc</namespace>
    <member kind="typedef">
      <type>std::unordered_set&lt; Contact, std::hash&lt; Contact &gt;, std::equal_to&lt; Contact &gt;, Eigen::aligned_allocator&lt; Contact &gt; &gt;</type>
      <name>ContactSet</name>
      <anchorfile>a00762.html</anchorfile>
      <anchor>ad410c6443a64d561960fe4bd490154d9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ControllerClient.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/</path>
    <filename>a00014</filename>
    <includes id="a00005" name="client_api.h" local="no" imported="no">mc_control/client_api.h</includes>
    <includes id="a03371" name="mc_rtc/Configuration.h" local="no" imported="no">mc_rtc/Configuration.h</includes>
    <includes id="a03398" name="plot/types.h" local="no" imported="no">mc_rtc/gui/plot/types.h</includes>
    <includes id="a00332" name="types.h" local="no" imported="no">mc_rtc/gui/types.h</includes>
    <class kind="struct">mc_control::ElementId</class>
    <class kind="struct">mc_control::ControllerClient</class>
    <namespace>mc_control</namespace>
  </compound>
  <compound kind="file">
    <name>ControllerServer.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/</path>
    <filename>a00017</filename>
    <includes id="a00092" name="MCController.h" local="no" imported="no">mc_control/MCController.h</includes>
    <includes id="a00347" name="StateBuilder.h" local="no" imported="no">mc_rtc/gui/StateBuilder.h</includes>
    <class kind="struct">mc_control::ControllerServer</class>
    <namespace>mc_control</namespace>
  </compound>
  <compound kind="file">
    <name>CoPTask.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>a00476</filename>
    <includes id="a00479" name="DampingTask.h" local="no" imported="no">mc_tasks/DampingTask.h</includes>
    <class kind="struct">mc_tasks::force::CoPTask</class>
    <namespace>mc_tasks</namespace>
    <namespace>mc_tasks::force</namespace>
  </compound>
  <compound kind="file">
    <name>CubicSplineBase.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_planning/</path>
    <filename>a00140</filename>
    <includes id="a00146" name="InterpolatorBase.h" local="yes" imported="no">InterpolatorBase.h</includes>
    <class kind="class">mc_planning::motion_interpolator::CubicSplineBase</class>
    <namespace>mc_planning</namespace>
    <namespace>mc_planning::motion_interpolator</namespace>
  </compound>
  <compound kind="file">
    <name>CylindricalSurface.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>a00191</filename>
    <includes id="a00248" name="Surface.h" local="no" imported="no">mc_rbdyn/Surface.h</includes>
    <class kind="struct">mc_rbdyn::CylindricalSurface</class>
    <namespace>mc_rbdyn</namespace>
  </compound>
  <compound kind="file">
    <name>DampingTask.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>a00479</filename>
    <includes id="a00464" name="AdmittanceTask.h" local="no" imported="no">mc_tasks/AdmittanceTask.h</includes>
    <class kind="struct">mc_tasks::force::DampingTask</class>
    <namespace>mc_tasks</namespace>
    <namespace>mc_tasks::force</namespace>
  </compound>
  <compound kind="file">
    <name>DataComboInput.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/</path>
    <filename>a00290</filename>
    <includes id="a00296" name="elements.h" local="no" imported="no">mc_rtc/gui/elements.h</includes>
    <class kind="struct">mc_rtc::gui::DataComboInputImpl</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <member kind="function">
      <type>DataComboInputImpl&lt; GetT, SetT &gt;</type>
      <name>DataComboInput</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>a5baa34dd8ac370b60f3ffbf0b2fd9dda</anchor>
      <arglist>(const std::string &amp;name, const std::vector&lt; std::string &gt; &amp;values, GetT get_fn, SetT set_fn)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DataStore.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/</path>
    <filename>a00266</filename>
    <includes id="a00389" name="logging.h" local="no" imported="no">mc_rtc/logging.h</includes>
    <includes id="a00398" name="type_name.h" local="no" imported="no">mc_rtc/type_name.h</includes>
    <includes id="a00401" name="utils_api.h" local="no" imported="no">mc_rtc/utils_api.h</includes>
    <class kind="struct">mc_rtc::internal::lambda_traits</class>
    <class kind="struct">mc_rtc::internal::lambda_traits&lt; RetT(C::*)(Args...) const &gt;</class>
    <class kind="struct">mc_rtc::internal::lambda_traits&lt; RetT(C::*)(Args...)&gt;</class>
    <class kind="struct">mc_rtc::internal::args_t</class>
    <class kind="struct">mc_rtc::internal::Allocator</class>
    <class kind="struct">mc_rtc::internal::Allocator&lt; T, typename T::eigen_aligned_operator_new_marker_type &gt;</class>
    <class kind="struct">mc_rtc::DataStore</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::internal</namespace>
    <member kind="function">
      <type>bool</type>
      <name>is_valid_hash</name>
      <anchorfile>a00781.html</anchorfile>
      <anchor>a759676405e1815363e6d9094dd1919b1</anchor>
      <arglist>(std::size_t h)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_valid_hash</name>
      <anchorfile>a00781.html</anchorfile>
      <anchor>a0f0cc0f5914bc62d93b19fda0ed53e75</anchor>
      <arglist>(std::size_t h)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Device.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>a00194</filename>
    <includes id="a03350" name="mc_rbdyn/api.h" local="no" imported="no">mc_rbdyn/api.h</includes>
    <class kind="struct">mc_rbdyn::Device</class>
    <namespace>mc_rbdyn</namespace>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Device &gt;</type>
      <name>DevicePtr</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>a356f67585abd89ae94368d4644d6e865</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Device</type>
      <name>Sensor</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>a243aca157f29f1aebb2c1210ac166a83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DevicePtr</type>
      <name>SensorPtr</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>aa1e86054c466a23bfdcb3470f71c8aad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DynamicsConstraint.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_solver/</path>
    <filename>a00425</filename>
    <includes id="a00440" name="KinematicsConstraint.h" local="no" imported="no">mc_solver/KinematicsConstraint.h</includes>
    <class kind="class">mc_solver::DynamicsConstraint</class>
    <namespace>mc_solver</namespace>
  </compound>
  <compound kind="file">
    <name>eigen_traits.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/</path>
    <filename>a00269</filename>
    <class kind="struct">mc_rtc::internal::is_eigen_matrix</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::internal</namespace>
    <namespace>mc_rtc::internal::is_eigen_matrix_detail</namespace>
    <member kind="function">
      <type>std::true_type</type>
      <name>test</name>
      <anchorfile>a00784.html</anchorfile>
      <anchor>af906a58079257e11f4652a22f067a822</anchor>
      <arglist>(const Eigen::MatrixBase&lt; T &gt; *)</arglist>
    </member>
    <member kind="function">
      <type>std::false_type</type>
      <name>test</name>
      <anchorfile>a00784.html</anchorfile>
      <anchor>a6ba1ae61e3ffbdc9d1f72aa5363cb608</anchor>
      <arglist>(...)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>elements.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/</path>
    <filename>a00296</filename>
    <includes id="a00392" name="MessagePackBuilder.h" local="no" imported="no">mc_rtc/MessagePackBuilder.h</includes>
    <includes id="a03356" name="mc_rtc/gui/api.h" local="no" imported="no">mc_rtc/gui/api.h</includes>
    <class kind="struct">mc_rtc::gui::Element</class>
    <class kind="struct">mc_rtc::gui::DataElement</class>
    <class kind="struct">mc_rtc::gui::CallbackElement</class>
    <class kind="struct">mc_rtc::gui::CommonInputImpl</class>
    <class kind="struct">mc_rtc::gui::VoidCallbackElement</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <member kind="enumeration">
      <type></type>
      <name>Elements</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>a32d283e5c35e7fd7dcddbc0199bfdc06</anchor>
      <arglist></arglist>
      <enumvalue file="a00785.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06ab021df6aac4654c454f46c77646e745f">Label</enumvalue>
      <enumvalue file="a00785.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a93bead7e77b18cbfc7d0c892eb65a69f">ArrayLabel</enumvalue>
      <enumvalue file="a00785.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a87b7760f14fbff78d8819291f36ab9a0">Button</enumvalue>
      <enumvalue file="a00785.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a4f8222964f9a317cef99dddc23a121bd">Checkbox</enumvalue>
      <enumvalue file="a00785.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a6e2d1c6d37623990d2d3e0919ee03ff1">StringInput</enumvalue>
      <enumvalue file="a00785.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06ad9da16a5098cfbf3002491c43df151af">IntegerInput</enumvalue>
      <enumvalue file="a00785.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a7be1677ccab64a74bebea1ab86131da8">NumberInput</enumvalue>
      <enumvalue file="a00785.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a2e9c5f285f5ff6be9348942eac1cc6ad">NumberSlider</enumvalue>
      <enumvalue file="a00785.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a2ed2cbbe9de17e308d54422d43f3deaf">ArrayInput</enumvalue>
      <enumvalue file="a00785.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06ad7e38bc04789bd7093fa285ba7a91f4d">ComboInput</enumvalue>
      <enumvalue file="a00785.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06aa8aea7afab217ab8095ef9c7404aa6c9">DataComboInput</enumvalue>
      <enumvalue file="a00785.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a1685c4cb9754df6a8c65c8564d8d0d74">Point3D</enumvalue>
      <enumvalue file="a00785.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a2c1f43c429c5e00feaef7ba3327375dc">Trajectory</enumvalue>
      <enumvalue file="a00785.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06af1a42bd417390fc63b030a519624607a">Rotation</enumvalue>
      <enumvalue file="a00785.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a2ff4148554480a37f85efd299df04850">Transform</enumvalue>
      <enumvalue file="a00785.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a7146a60667b422e69fd050fe1df6859a">Schema</enumvalue>
      <enumvalue file="a00785.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06ad359c6df99b25183d81f7d728b71de0e">Form</enumvalue>
      <enumvalue file="a00785.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a4c0a11247d92f73fb84baa51e37a3263">Polygon</enumvalue>
      <enumvalue file="a00785.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a9eb6b78a99cdb6ffd3d40d18621d9f80">Force</enumvalue>
      <enumvalue file="a00785.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a0f4e1aaabd074689b7d3ead824d1ee8e">Arrow</enumvalue>
      <enumvalue file="a00785.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a93b34e4f6ff555f9cc248bae9cd00386">XYTheta</enumvalue>
    </member>
  </compound>
  <compound kind="file">
    <name>EncoderObserver.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_observers/</path>
    <filename>a00119</filename>
    <includes id="a00128" name="Observer.h" local="no" imported="no">mc_observers/Observer.h</includes>
    <includes id="a03344" name="mc_observers/api.h" local="no" imported="no">mc_observers/api.h</includes>
    <includes id="a03386" name="mc_rbdyn/Robot.h" local="no" imported="no">mc_rbdyn/Robot.h</includes>
    <class kind="struct">mc_observers::EncoderObserver</class>
    <namespace>mc_observers</namespace>
  </compound>
  <compound kind="file">
    <name>EndEffectorTask.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>a00482</filename>
    <includes id="a00512" name="OrientationTask.h" local="no" imported="no">mc_tasks/OrientationTask.h</includes>
    <includes id="a00518" name="PositionTask.h" local="no" imported="no">mc_tasks/PositionTask.h</includes>
    <class kind="struct">mc_tasks::EndEffectorTask</class>
    <namespace>mc_tasks</namespace>
  </compound>
  <compound kind="file">
    <name>EqualityConstraint.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_solver/</path>
    <filename>a00428</filename>
    <includes id="a00449" name="Constraint.h" local="no" imported="no">mc_solver/utils/Constraint.h</includes>
    <class kind="class">mc_solver::utils::EqualityConstraint</class>
    <class kind="class">mc_solver::EqualityConstraintRobot</class>
    <class kind="class">mc_solver::EqualityConstraintLambda</class>
    <class kind="class">mc_solver::EqualityConstraintForce</class>
    <namespace>mc_solver</namespace>
    <namespace>mc_solver::utils</namespace>
  </compound>
  <compound kind="file">
    <name>ExactCubic.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_trajectory/</path>
    <filename>a00545</filename>
    <includes id="a00347" name="StateBuilder.h" local="no" imported="no">mc_rtc/gui/StateBuilder.h</includes>
    <includes id="a00551" name="Spline.h" local="no" imported="no">mc_trajectory/Spline.h</includes>
    <includes id="a03365" name="mc_trajectory/api.h" local="no" imported="no">mc_trajectory/api.h</includes>
    <class kind="struct">mc_trajectory::ExactCubic</class>
    <namespace>mc_trajectory</namespace>
  </compound>
  <compound kind="file">
    <name>ExactCubicTrajectoryTask.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>a00485</filename>
    <includes id="a00530" name="SplineTrajectoryTask.h" local="no" imported="no">mc_tasks/SplineTrajectoryTask.h</includes>
    <includes id="a00545" name="ExactCubic.h" local="no" imported="no">mc_trajectory/ExactCubic.h</includes>
    <class kind="struct">mc_tasks::ExactCubicTrajectoryTask</class>
    <namespace>mc_tasks</namespace>
  </compound>
  <compound kind="file">
    <name>Executor.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/fsm/</path>
    <filename>a00023</filename>
    <includes id="a03335" name="mc_control/api.h" local="no" imported="no">mc_control/api.h</includes>
    <includes id="a03392" name="mc_control/fsm/State.h" local="no" imported="no">mc_control/fsm/State.h</includes>
    <includes id="a00032" name="StateFactory.h" local="no" imported="no">mc_control/fsm/StateFactory.h</includes>
    <includes id="a00068" name="TransitionMap.h" local="no" imported="no">mc_control/fsm/TransitionMap.h</includes>
    <class kind="class">mc_control::fsm::Executor</class>
    <namespace>mc_control</namespace>
    <namespace>mc_control::fsm</namespace>
  </compound>
  <compound kind="file">
    <name>ExponentialMovingAverage.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_filter/</path>
    <filename>a00098</filename>
    <includes id="a00113" name="clamp.h" local="no" imported="no">mc_filter/utils/clamp.h</includes>
    <includes id="a00389" name="logging.h" local="no" imported="no">mc_rtc/logging.h</includes>
    <class kind="struct">mc_filter::ExponentialMovingAverage</class>
    <namespace>mc_filter</namespace>
  </compound>
  <compound kind="file">
    <name>FlatLog.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/log/</path>
    <filename>a00377</filename>
    <includes id="a03401" name="log/utils.h" local="no" imported="no">mc_rtc/log/utils.h</includes>
    <includes id="a00401" name="utils_api.h" local="no" imported="no">mc_rtc/utils_api.h</includes>
    <class kind="struct">mc_rtc::log::FlatLog</class>
    <class kind="struct">mc_rtc::log::FlatLog::record</class>
    <class kind="struct">mc_rtc::log::FlatLog::entry</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::log</namespace>
  </compound>
  <compound kind="file">
    <name>Flexibility.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>a00197</filename>
    <includes id="a03350" name="mc_rbdyn/api.h" local="no" imported="no">mc_rbdyn/api.h</includes>
    <class kind="struct">mc_rbdyn::Flexibility</class>
    <namespace>mc_rbdyn</namespace>
  </compound>
  <compound kind="file">
    <name>Force.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/</path>
    <filename>a00299</filename>
    <includes id="a00293" name="traits.h" local="no" imported="no">mc_rtc/gui/details/traits.h</includes>
    <includes id="a00296" name="elements.h" local="no" imported="no">mc_rtc/gui/elements.h</includes>
    <includes id="a00332" name="types.h" local="no" imported="no">mc_rtc/gui/types.h</includes>
    <class kind="struct">mc_rtc::gui::ForceROImpl</class>
    <class kind="struct">mc_rtc::gui::ForceImpl</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <member kind="function">
      <type>ForceROImpl&lt; GetForce, GetSurface &gt;</type>
      <name>Force</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>a1dfaa55db99fac62693744326d7f1cb9</anchor>
      <arglist>(const std::string &amp;name, GetForce get_force_fn, GetSurface get_surface_fn)</arglist>
    </member>
    <member kind="function">
      <type>ForceROImpl&lt; GetForce, GetSurface &gt;</type>
      <name>Force</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>ae5e645b29b00acb907a3080e35a66697</anchor>
      <arglist>(const std::string &amp;name, const ForceConfig &amp;config, GetForce get_force_fn, GetSurface get_surface_fn)</arglist>
    </member>
    <member kind="function">
      <type>ForceImpl&lt; GetForce, GetSurface, SetForce &gt;</type>
      <name>Force</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>aed7593a02cc0bcc3b045e2c85a3a2284</anchor>
      <arglist>(const std::string &amp;name, GetForce get_force_fn, SetForce set_force_fn, GetSurface get_surface_fn)</arglist>
    </member>
    <member kind="function">
      <type>ForceImpl&lt; GetForce, GetSurface, SetForce &gt;</type>
      <name>Force</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>af532dce0703aff08a435a2c53182de1b</anchor>
      <arglist>(const std::string &amp;name, const ForceConfig &amp;config, GetForce get_force_fn, SetForce set_force_fn, GetSurface get_surface_fn)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ForceSensor.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>a00200</filename>
    <includes id="a00194" name="Device.h" local="no" imported="no">mc_rbdyn/Device.h</includes>
    <class kind="struct">mc_rbdyn::ForceSensor</class>
    <namespace>mc_rbdyn</namespace>
    <namespace>mc_rbdyn::detail</namespace>
  </compound>
  <compound kind="file">
    <name>Form.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/</path>
    <filename>a00302</filename>
    <includes id="a00296" name="elements.h" local="no" imported="no">mc_rtc/gui/elements.h</includes>
    <class kind="struct">mc_rtc::gui::FormImpl</class>
    <class kind="struct">mc_rtc::gui::FormElement</class>
    <class kind="struct">mc_rtc::gui::FormDataInput</class>
    <class kind="struct">mc_rtc::gui::FormArrayInput</class>
    <class kind="struct">mc_rtc::gui::FormComboInput</class>
    <class kind="struct">mc_rtc::gui::FormDataComboInput</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <member kind="typedef">
      <type>FormDataInput&lt; bool, Elements::Checkbox &gt;</type>
      <name>FormCheckbox</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>a2683c87b0180a62bc5231a60c18aca7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FormDataInput&lt; int, Elements::IntegerInput &gt;</type>
      <name>FormIntegerInput</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>ae145da8274a4c06981900ea890979eb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FormDataInput&lt; double, Elements::NumberInput &gt;</type>
      <name>FormNumberInput</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>afc4205d5b7c28257703d3c3c515c9741</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FormDataInput&lt; std::string, Elements::StringInput &gt;</type>
      <name>FormStringInput</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>ad9c26bdeef8d098c11f4edb0f105fef9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>FormImpl&lt; Callback &gt;</type>
      <name>Form</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>a94d2215e324dad2adb958327c16bf167</anchor>
      <arglist>(const std::string &amp;name, Callback cb, Args &amp;&amp;... args)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GazeTask.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>a00488</filename>
    <includes id="a00536" name="TrajectoryTaskGeneric.h" local="no" imported="no">mc_tasks/TrajectoryTaskGeneric.h</includes>
    <class kind="struct">mc_tasks::GazeTask</class>
    <namespace>mc_tasks</namespace>
  </compound>
  <compound kind="file">
    <name>generator.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_planning/</path>
    <filename>a00143</filename>
    <includes id="a00137" name="ClampedCubicSpline.h" local="no" imported="no">mc_planning/ClampedCubicSpline.h</includes>
    <includes id="a00158" name="LIPMControlByPoleAssignWithExternalForce.h" local="no" imported="no">mc_planning/LIPMControlByPoleAssignWithExternalForce.h</includes>
    <includes id="a00152" name="LinearTimeVariantInvertedPendulum.h" local="no" imported="no">mc_planning/LinearTimeVariantInvertedPendulum.h</includes>
    <includes id="a03395" name="mc_planning/State.h" local="no" imported="no">mc_planning/State.h</includes>
    <class kind="struct">mc_planning::generator</class>
    <namespace>mc_planning</namespace>
  </compound>
  <compound kind="file">
    <name>generic_gripper.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/</path>
    <filename>a00071</filename>
    <includes id="a03335" name="mc_control/api.h" local="no" imported="no">mc_control/api.h</includes>
    <includes id="a00230" name="RobotModule.h" local="no" imported="no">mc_rbdyn/RobotModule.h</includes>
    <class kind="struct">mc_control::Gripper</class>
    <namespace>mc_rbdyn</namespace>
    <namespace>mc_control</namespace>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Gripper &gt;</type>
      <name>GripperPtr</name>
      <anchorfile>a00761.html</anchorfile>
      <anchor>a67d3b51822d3e7d0c56d9af675f9eaa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reference_wrapper&lt; Gripper &gt;</type>
      <name>GripperRef</name>
      <anchorfile>a00761.html</anchorfile>
      <anchor>a39b3dee4f4017bab0f389d9bfd7877dc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GenericLoader.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_solver/</path>
    <filename>a00431</filename>
    <includes id="a03371" name="mc_rtc/Configuration.h" local="no" imported="no">mc_rtc/Configuration.h</includes>
    <includes id="a00389" name="logging.h" local="no" imported="no">mc_rtc/logging.h</includes>
    <includes id="a00446" name="QPSolver.h" local="no" imported="no">mc_solver/QPSolver.h</includes>
    <class kind="struct">mc_solver::GenericLoader</class>
    <class kind="struct">mc_solver::GenericLoader::Handle</class>
    <namespace>mc_solver</namespace>
  </compound>
  <compound kind="file">
    <name>GenInequalityConstraint.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_solver/</path>
    <filename>a00434</filename>
    <includes id="a00449" name="Constraint.h" local="no" imported="no">mc_solver/utils/Constraint.h</includes>
    <class kind="class">mc_solver::utils::GenInequalityConstraint</class>
    <class kind="class">mc_solver::GenInequalityConstraintRobot</class>
    <class kind="class">mc_solver::GenInequalityConstraintLambda</class>
    <class kind="class">mc_solver::GenInequalityConstraintForce</class>
    <namespace>mc_solver</namespace>
    <namespace>mc_solver::utils</namespace>
  </compound>
  <compound kind="file">
    <name>GlobalPlugin.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/</path>
    <filename>a00074</filename>
    <includes id="a00086" name="mc_global_controller.h" local="no" imported="no">mc_control/mc_global_controller.h</includes>
    <class kind="struct">mc_control::GlobalPlugin</class>
    <namespace>mc_control</namespace>
    <member kind="define">
      <type>#define</type>
      <name>GLOBAL_PLUGIN_API</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>adda9065a64d1bb53f70cc10616e220fe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GlobalPlugin_fwd.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/</path>
    <filename>a00077</filename>
    <includes id="a00368" name="loader.h" local="no" imported="no">mc_rtc/loader.h</includes>
    <namespace>mc_control</namespace>
    <member kind="typedef">
      <type>std::unique_ptr&lt; GlobalPlugin, mc_rtc::ObjectLoader&lt; GlobalPlugin &gt;::ObjectDeleter &gt;</type>
      <name>GlobalPluginPtr</name>
      <anchorfile>a00761.html</anchorfile>
      <anchor>a077624dc5665df1a3e145d0283e10c78</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GlobalPluginMacros.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/</path>
    <filename>a00080</filename>
    <includes id="a00074" name="GlobalPlugin.h" local="no" imported="no">mc_control/GlobalPlugin.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_GLOBAL_PLUGIN_CHECK_VERSION</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a031a20be905df8b02fe3a919564fa57f</anchor>
      <arglist>(NAME)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EXPORT_MC_RTC_PLUGIN</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a60707c92a995568bdfdb187f6d76074e</anchor>
      <arglist>(NAME, TYPE)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Grippers.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/fsm/states/</path>
    <filename>a00038</filename>
    <includes id="a03392" name="mc_control/fsm/State.h" local="no" imported="no">mc_control/fsm/State.h</includes>
    <includes id="a00071" name="generic_gripper.h" local="no" imported="no">mc_control/generic_gripper.h</includes>
    <class kind="struct">mc_control::fsm::Grippers</class>
    <namespace>mc_control</namespace>
    <namespace>mc_control::fsm</namespace>
  </compound>
  <compound kind="file">
    <name>GripperSurface.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>a00203</filename>
    <includes id="a00248" name="Surface.h" local="no" imported="no">mc_rbdyn/Surface.h</includes>
    <class kind="struct">mc_rbdyn::GripperSurface</class>
    <namespace>mc_rbdyn</namespace>
  </compound>
  <compound kind="file">
    <name>gui.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/</path>
    <filename>a00362</filename>
    <includes id="a00347" name="StateBuilder.h" local="no" imported="no">mc_rtc/gui/StateBuilder.h</includes>
    <includes id="a00272" name="ArrayInput.h" local="no" imported="no">mc_rtc/gui/ArrayInput.h</includes>
    <includes id="a00275" name="ArrayLabel.h" local="no" imported="no">mc_rtc/gui/ArrayLabel.h</includes>
    <includes id="a00278" name="Arrow.h" local="no" imported="no">mc_rtc/gui/Arrow.h</includes>
    <includes id="a00281" name="Button.h" local="no" imported="no">mc_rtc/gui/Button.h</includes>
    <includes id="a00284" name="Checkbox.h" local="no" imported="no">mc_rtc/gui/Checkbox.h</includes>
    <includes id="a00287" name="ComboInput.h" local="no" imported="no">mc_rtc/gui/ComboInput.h</includes>
    <includes id="a00290" name="DataComboInput.h" local="no" imported="no">mc_rtc/gui/DataComboInput.h</includes>
    <includes id="a00299" name="Force.h" local="no" imported="no">mc_rtc/gui/Force.h</includes>
    <includes id="a00302" name="Form.h" local="no" imported="no">mc_rtc/gui/Form.h</includes>
    <includes id="a00305" name="IntegerInput.h" local="no" imported="no">mc_rtc/gui/IntegerInput.h</includes>
    <includes id="a00308" name="Label.h" local="no" imported="no">mc_rtc/gui/Label.h</includes>
    <includes id="a00311" name="NumberInput.h" local="no" imported="no">mc_rtc/gui/NumberInput.h</includes>
    <includes id="a00314" name="NumberSlider.h" local="no" imported="no">mc_rtc/gui/NumberSlider.h</includes>
    <includes id="a00338" name="Point3D.h" local="no" imported="no">mc_rtc/gui/Point3D.h</includes>
    <includes id="a00326" name="Polygon.h" local="no" imported="no">mc_rtc/gui/Polygon.h</includes>
    <includes id="a00341" name="Rotation.h" local="no" imported="no">mc_rtc/gui/Rotation.h</includes>
    <includes id="a00344" name="Schema.h" local="no" imported="no">mc_rtc/gui/Schema.h</includes>
    <includes id="a00350" name="StringInput.h" local="no" imported="no">mc_rtc/gui/StringInput.h</includes>
    <includes id="a00353" name="Trajectory.h" local="no" imported="no">mc_rtc/gui/Trajectory.h</includes>
    <includes id="a00356" name="Transform.h" local="no" imported="no">mc_rtc/gui/Transform.h</includes>
    <includes id="a00359" name="XYTheta.h" local="no" imported="no">mc_rtc/gui/XYTheta.h</includes>
    <includes id="a00335" name="plot.h" local="no" imported="no">mc_rtc/gui/plot.h</includes>
  </compound>
  <compound kind="file">
    <name>HalfSitting.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/fsm/states/</path>
    <filename>a00041</filename>
    <includes id="a03392" name="mc_control/fsm/State.h" local="no" imported="no">mc_control/fsm/State.h</includes>
    <class kind="struct">mc_control::fsm::HalfSittingState</class>
    <namespace>mc_control</namespace>
    <namespace>mc_control::fsm</namespace>
  </compound>
  <compound kind="file">
    <name>InequalityConstraint.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_solver/</path>
    <filename>a00437</filename>
    <includes id="a00449" name="Constraint.h" local="no" imported="no">mc_solver/utils/Constraint.h</includes>
    <class kind="class">mc_solver::utils::InequalityConstraint</class>
    <class kind="class">mc_solver::InequalityConstraintRobot</class>
    <class kind="class">mc_solver::InequalityConstraintLambda</class>
    <class kind="class">mc_solver::InequalityConstraintForce</class>
    <namespace>mc_solver</namespace>
    <namespace>mc_solver::utils</namespace>
  </compound>
  <compound kind="file">
    <name>IntegerInput.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/</path>
    <filename>a00305</filename>
    <includes id="a00296" name="elements.h" local="no" imported="no">mc_rtc/gui/elements.h</includes>
    <class kind="struct">mc_rtc::gui::IntegerInputImpl</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <member kind="function">
      <type>IntegerInputImpl&lt; GetT, SetT &gt;</type>
      <name>IntegerInput</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>ac4f13804b0853d4e3ee9d53afed5b06c</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, SetT set_fn)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>InterpolatedRotation.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_trajectory/</path>
    <filename>a00548</filename>
    <includes id="a00347" name="StateBuilder.h" local="no" imported="no">mc_rtc/gui/StateBuilder.h</includes>
    <includes id="a00551" name="Spline.h" local="no" imported="no">mc_trajectory/Spline.h</includes>
    <includes id="a03365" name="mc_trajectory/api.h" local="no" imported="no">mc_trajectory/api.h</includes>
    <class kind="struct">mc_trajectory::InterpolatedRotation</class>
    <namespace>mc_trajectory</namespace>
  </compound>
  <compound kind="file">
    <name>InterpolatorBase.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_planning/</path>
    <filename>a00146</filename>
    <class kind="class">mc_planning::motion_interpolator::InterpolatorDataType</class>
    <class kind="class">mc_planning::motion_interpolator::InterpolatorBase</class>
    <namespace>mc_planning</namespace>
    <namespace>mc_planning::motion_interpolator</namespace>
    <member kind="enumeration">
      <type></type>
      <name>interpolator_type</name>
      <anchorfile>a00771.html</anchorfile>
      <anchor>a7ea0c29c7e1dd0f17827e74bc06e12cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_SELECTED</name>
      <anchorfile>a00771.html</anchorfile>
      <anchor>a7ea0c29c7e1dd0f17827e74bc06e12cda4187d8ccd4ca751d4bdb993070c5dc60</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CLAMPED_CUBIC_SPLINE</name>
      <anchorfile>a00771.html</anchorfile>
      <anchor>a7ea0c29c7e1dd0f17827e74bc06e12cda36a380d3e85fe7f8b6cb9afabf8cb187</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>io_utils.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/</path>
    <filename>a00365</filename>
    <includes id="a00269" name="eigen_traits.h" local="no" imported="no">mc_rtc/eigen_traits.h</includes>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::io</namespace>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>a00789.html</anchorfile>
      <anchor>af24adad562092ccd4f760a38c86fcf95</anchor>
      <arglist>(const Container &amp;c, const std::string &amp;delimiter=&quot;, &quot;)</arglist>
      <docanchor file="a00789">to_string</docanchor>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>a00789.html</anchorfile>
      <anchor>a38fc0c2f37aa3befdc6ab09b25c11f1f</anchor>
      <arglist>(const Container &amp;c, const std::string &amp;delimiter=&quot;, &quot;, const unsigned precision=std::numeric_limits&lt; typename Container::value_type &gt;::digits10)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>a00789.html</anchorfile>
      <anchor>a288c60b8869f856d23c8a94ac085438e</anchor>
      <arglist>(const Container &amp;c, Callback &amp;&amp;get_value, const std::string &amp;delimiter=&quot;, &quot;)</arglist>
      <docanchor file="a00789">to_string_transform</docanchor>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>a00789.html</anchorfile>
      <anchor>aa93b38ed5db2f9676bed820a09ec11ee</anchor>
      <arglist>(const Container &amp;c, Callback &amp;&amp;get_value, const std::string &amp;delimiter=&quot;, &quot;, const Eigen::IOFormat &amp;fmt=Eigen::IOFormat(Eigen::StreamPrecision, Eigen::DontAlignCols, &quot;\))</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>a00789.html</anchorfile>
      <anchor>a9a95c3673b2d730ddd4b75dd4cadcb2e</anchor>
      <arglist>(const Container &amp;c, const std::string &amp;delimiter=&quot;, &quot;, const Eigen::IOFormat &amp;fmt=Eigen::IOFormat(Eigen::StreamPrecision, Eigen::DontAlignCols, &quot;\, &quot; &quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;))</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>a00789.html</anchorfile>
      <anchor>aa93b38ed5db2f9676bed820a09ec11ee</anchor>
      <arglist>(const Container &amp;c, Callback &amp;&amp;get_value, const std::string &amp;delimiter=&quot;, &quot;, const Eigen::IOFormat &amp;fmt=Eigen::IOFormat(Eigen::StreamPrecision, Eigen::DontAlignCols, &quot;\))</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>a00789.html</anchorfile>
      <anchor>a9a95c3673b2d730ddd4b75dd4cadcb2e</anchor>
      <arglist>(const Container &amp;c, const std::string &amp;delimiter=&quot;, &quot;, const Eigen::IOFormat &amp;fmt=Eigen::IOFormat(Eigen::StreamPrecision, Eigen::DontAlignCols, &quot;\, &quot; &quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;))</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>iterate_binary_log.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/log/</path>
    <filename>a00380</filename>
    <includes id="a00392" name="MessagePackBuilder.h" local="no" imported="no">mc_rtc/MessagePackBuilder.h</includes>
    <includes id="a00377" name="FlatLog.h" local="no" imported="no">mc_rtc/log/FlatLog.h</includes>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::log</namespace>
    <member kind="typedef">
      <type>std::function&lt; bool(const std::vector&lt; std::string &gt; &amp;, std::vector&lt; FlatLog::record &gt; &amp;, double)&gt;</type>
      <name>binary_log_callback</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>a2e5bbb4664bc287ec78732a63a7cd646</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(mc_rtc::MessagePackBuilder &amp;, const std::vector&lt; std::string &gt; &amp;)&gt;</type>
      <name>copy_callback</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>a9c09aed839e3ee87a5be3e286a3e8903</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; bool(const std::vector&lt; std::string &gt; &amp;, std::vector&lt; FlatLog::record &gt; &amp;, double, const copy_callback &amp;, const char *, uint64_t)&gt;</type>
      <name>binary_log_copy_callback</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>a1c86e8f30b914960080029679897a749</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool MC_RTC_UTILS_DLLAPI</type>
      <name>iterate_binary_log</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>ae939074ac3cce1fde0bb5e0ea7e90c86</anchor>
      <arglist>(const std::string &amp;fpath, const binary_log_copy_callback &amp;callback, bool extract, const std::string &amp;time=&quot;t&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool MC_RTC_UTILS_DLLAPI</type>
      <name>iterate_binary_log</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>a51b18863af2ea7f3e981b32be6b2174f</anchor>
      <arglist>(const std::string &amp;fpath, const binary_log_callback &amp;callback, bool extract, const std::string &amp;time=&quot;t&quot;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>KinematicInertialObserver.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_observers/</path>
    <filename>a00122</filename>
    <includes id="a00104" name="LowPass.h" local="no" imported="no">mc_filter/LowPass.h</includes>
    <includes id="a00125" name="KinematicInertialPoseObserver.h" local="no" imported="no">mc_observers/KinematicInertialPoseObserver.h</includes>
    <includes id="a03344" name="mc_observers/api.h" local="no" imported="no">mc_observers/api.h</includes>
    <class kind="struct">mc_observers::KinematicInertialObserver</class>
    <namespace>mc_observers</namespace>
  </compound>
  <compound kind="file">
    <name>KinematicInertialPoseObserver.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_observers/</path>
    <filename>a00125</filename>
    <includes id="a00128" name="Observer.h" local="no" imported="no">mc_observers/Observer.h</includes>
    <includes id="a03344" name="mc_observers/api.h" local="no" imported="no">mc_observers/api.h</includes>
    <includes id="a03386" name="mc_rbdyn/Robot.h" local="no" imported="no">mc_rbdyn/Robot.h</includes>
    <class kind="struct">mc_observers::KinematicInertialPoseObserver</class>
    <namespace>mc_observers</namespace>
  </compound>
  <compound kind="file">
    <name>KinematicsConstraint.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_solver/</path>
    <filename>a00440</filename>
    <includes id="a00236" name="Robots.h" local="no" imported="no">mc_rbdyn/Robots.h</includes>
    <includes id="a00416" name="ConstraintSet.h" local="no" imported="no">mc_solver/ConstraintSet.h</includes>
    <class kind="class">mc_solver::KinematicsConstraint</class>
    <namespace>mc_solver</namespace>
  </compound>
  <compound kind="file">
    <name>Label.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/</path>
    <filename>a00308</filename>
    <includes id="a00296" name="elements.h" local="no" imported="no">mc_rtc/gui/elements.h</includes>
    <class kind="struct">mc_rtc::gui::LabelImpl</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <member kind="function">
      <type>LabelImpl&lt; GetT &gt;</type>
      <name>Label</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>a4b4617f09036971e7ccbf6917ee37c19</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LeakyIntegrator.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_filter/</path>
    <filename>a00101</filename>
    <includes id="a00113" name="clamp.h" local="no" imported="no">mc_filter/utils/clamp.h</includes>
    <class kind="struct">mc_filter::LeakyIntegrator</class>
    <namespace>mc_filter</namespace>
  </compound>
  <compound kind="file">
    <name>LinearControl3.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_planning/</path>
    <filename>a00149</filename>
    <includes id="a03347" name="mc_planning/api.h" local="no" imported="no">mc_planning/api.h</includes>
    <class kind="struct">mc_planning::linear_control_system::LinearControl3</class>
    <namespace>mc_planning</namespace>
    <namespace>mc_planning::linear_control_system</namespace>
  </compound>
  <compound kind="file">
    <name>LinearTimeVariantInvertedPendulum.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_planning/</path>
    <filename>a00152</filename>
    <includes id="a00161" name="LookupTable.h" local="no" imported="no">mc_planning/LookupTable.h</includes>
    <includes id="a03347" name="mc_planning/api.h" local="no" imported="no">mc_planning/api.h</includes>
    <includes id="a00389" name="logging.h" local="no" imported="no">mc_rtc/logging.h</includes>
    <class kind="struct">mc_planning::linear_control_system::LinearTimeVariantInvertedPendulum</class>
    <class kind="struct">mc_planning::linear_control_system::LinearTimeVariantInvertedPendulum::State</class>
    <namespace>mc_planning</namespace>
    <namespace>mc_planning::linear_control_system</namespace>
  </compound>
  <compound kind="file">
    <name>LIPMControlByPoleAssign.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_planning/</path>
    <filename>a00155</filename>
    <includes id="a00149" name="LinearControl3.h" local="no" imported="no">mc_planning/LinearControl3.h</includes>
    <class kind="class">mc_planning::linear_control_system::LIPMControlByPoleAssign</class>
    <namespace>mc_planning</namespace>
    <namespace>mc_planning::linear_control_system</namespace>
  </compound>
  <compound kind="file">
    <name>LIPMControlByPoleAssignWithExternalForce.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_planning/</path>
    <filename>a00158</filename>
    <includes id="a00155" name="LIPMControlByPoleAssign.h" local="yes" imported="no">LIPMControlByPoleAssign.h</includes>
    <class kind="class">mc_planning::linear_control_system::LIPMControlByPoleAssignWithExternalForce</class>
    <namespace>mc_planning</namespace>
    <namespace>mc_planning::linear_control_system</namespace>
  </compound>
  <compound kind="file">
    <name>loader.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/</path>
    <filename>a00368</filename>
    <includes id="a00371" name="loader_api.h" local="no" imported="no">mc_rtc/loader_api.h</includes>
    <includes id="a00389" name="logging.h" local="no" imported="no">mc_rtc/logging.h</includes>
    <class kind="class">mc_rtc::ObjectLoader</class>
    <class kind="class">mc_rtc::LoaderException</class>
    <class kind="class">mc_rtc::LTDLHandle</class>
    <class kind="class">mc_rtc::Loader</class>
    <class kind="class">mc_rtc::ObjectLoader</class>
    <class kind="struct">mc_rtc::ObjectLoader::ObjectDeleter</class>
    <namespace>mc_rtc</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; LTDLHandle &gt;</type>
      <name>LTDLHandlePtr</name>
      <anchorfile>a00763.html</anchorfile>
      <anchor>a04f4430d990b320f494b3a21112c7e3a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>loader_api.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/</path>
    <filename>a00371</filename>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_LOADER_VERSION</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>a20b4289ae8266a5d45b7799ebc1c2cb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_LOADER_DLLIMPORT</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>ab10c7ea7ab2d8c66f1766d42f4271e07</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_LOADER_DLLEXPORT</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>a6d2514a2d7cbf1461637d19c84d4e190</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_LOADER_DLLLOCAL</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>a124acbd88de464891bac5a0d4753f3b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_LOADER_DLLAPI</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>a4b7b7ab74d91ada84566764639f2f8c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_LOADER_LOCAL</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>acf2b4c50e45b046a77958363021c3f17</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>loader_sandbox.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/</path>
    <filename>a00374</filename>
    <includes id="a00389" name="logging.h" local="no" imported="no">mc_rtc/logging.h</includes>
    <class kind="struct">mc_rtc::LoaderSandboxData</class>
    <namespace>mc_rtc</namespace>
    <member kind="function">
      <type>T *</type>
      <name>no_sandbox_function_call</name>
      <anchorfile>a00763.html</anchorfile>
      <anchor>a299e6b1f00e482f61b89988dc5b395fb</anchor>
      <arglist>(FunT create_fn, const Args &amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>sandbox_function_call</name>
      <anchorfile>a00763.html</anchorfile>
      <anchor>a810352dfb9fa4299b85fa19ac258a308</anchor>
      <arglist>(FunT create_fn, const Args &amp;... args)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Logger.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/log/</path>
    <filename>a00383</filename>
    <includes id="a03401" name="log/utils.h" local="no" imported="no">mc_rtc/log/utils.h</includes>
    <includes id="a00389" name="logging.h" local="no" imported="no">mc_rtc/logging.h</includes>
    <includes id="a00401" name="utils_api.h" local="no" imported="no">mc_rtc/utils_api.h</includes>
    <class kind="struct">mc_rtc::Logger</class>
    <namespace>mc_rtc</namespace>
  </compound>
  <compound kind="file">
    <name>logging.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/</path>
    <filename>a00389</filename>
    <includes id="a00401" name="utils_api.h" local="no" imported="no">mc_rtc/utils_api.h</includes>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::log</namespace>
    <namespace>mc_rtc::log::details</namespace>
    <member kind="define">
      <type>#define</type>
      <name>LOG_ERROR</name>
      <anchorfile>a00389.html</anchorfile>
      <anchor>ac6c926a2075cbaa39c4e9d12a2cac7e2</anchor>
      <arglist>(args)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LOG_WARNING</name>
      <anchorfile>a00389.html</anchorfile>
      <anchor>ad8493c09711c1562481e104d334694db</anchor>
      <arglist>(args)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LOG_INFO</name>
      <anchorfile>a00389.html</anchorfile>
      <anchor>a63a6359b81688166256710bf0ea161df</anchor>
      <arglist>(args)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LOG_SUCCESS</name>
      <anchorfile>a00389.html</anchorfile>
      <anchor>ada5a572b2a8b25bcd9f471bc5c3c0787</anchor>
      <arglist>(args)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LOG_ERROR_AND_THROW</name>
      <anchorfile>a00389.html</anchorfile>
      <anchor>ae0e43eaf4d638a83e59084a107b3b62f</anchor>
      <arglist>(exception_type, args)</arglist>
    </member>
    <member kind="function">
      <type>MC_RTC_UTILS_DLLAPI spdlog::logger &amp;</type>
      <name>success</name>
      <anchorfile>a00791.html</anchorfile>
      <anchor>a4be6522543b254e76db5d80f58a4e290</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MC_RTC_UTILS_DLLAPI spdlog::logger &amp;</type>
      <name>info</name>
      <anchorfile>a00791.html</anchorfile>
      <anchor>a2e57684e4d69b10eb5c9f41cf59c11ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MC_RTC_UTILS_DLLAPI spdlog::logger &amp;</type>
      <name>cerr</name>
      <anchorfile>a00791.html</anchorfile>
      <anchor>aa8cc2cc8dc25d49fa533f32a67f73c33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>error_and_throw</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>a2bad497e8a4c7a7f29f7ab908c83274e</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>error</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>aa189b2ec856ad8f96d632d635efc05ce</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>warning</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>a9e944001fd155fd1621157e450cf3d06</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>info</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>a0d3a4bb8b582e5c1795b8ae9cd5f3ec9</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>success</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>a4493319384c54d938a70d54193ed2dbc</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>OUT_NONE</name>
      <anchorfile>a00763.html</anchorfile>
      <anchor>ab85e3cb123f11bf1f9290abe17a7d49e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>OUT_BLUE</name>
      <anchorfile>a00763.html</anchorfile>
      <anchor>a15b005678017d9608ff8f599e34e41de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>OUT_GREEN</name>
      <anchorfile>a00763.html</anchorfile>
      <anchor>a7ab584d4904b2b1695ae2cb04ca984ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>OUT_PURPLE</name>
      <anchorfile>a00763.html</anchorfile>
      <anchor>aeb1d99e566cb5c454074579fcfa712f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>OUT_RED</name>
      <anchorfile>a00763.html</anchorfile>
      <anchor>a9003469324d75c8934d51654d98ef862</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LookAtSurfaceTask.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>a00497</filename>
    <includes id="a00500" name="LookAtTask.h" local="no" imported="no">mc_tasks/LookAtTask.h</includes>
    <class kind="struct">mc_tasks::LookAtSurfaceTask</class>
    <namespace>mc_tasks</namespace>
  </compound>
  <compound kind="file">
    <name>LookAtTask.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>a00500</filename>
    <includes id="a00539" name="VectorOrientationTask.h" local="no" imported="no">mc_tasks/VectorOrientationTask.h</includes>
    <class kind="struct">mc_tasks::LookAtTask</class>
    <namespace>mc_tasks</namespace>
  </compound>
  <compound kind="file">
    <name>LookupTable.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_planning/</path>
    <filename>a00161</filename>
    <includes id="a03347" name="mc_planning/api.h" local="no" imported="no">mc_planning/api.h</includes>
    <includes id="a00389" name="logging.h" local="no" imported="no">mc_rtc/logging.h</includes>
    <class kind="struct">mc_planning::LookupTable</class>
    <namespace>mc_planning</namespace>
  </compound>
  <compound kind="file">
    <name>LowPass.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_filter/</path>
    <filename>a00104</filename>
    <includes id="a00389" name="logging.h" local="no" imported="no">mc_rtc/logging.h</includes>
    <class kind="struct">mc_filter::LowPass</class>
    <namespace>mc_filter</namespace>
  </compound>
  <compound kind="file">
    <name>LowPassFiniteDifferences.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_filter/</path>
    <filename>a00107</filename>
    <includes id="a00104" name="LowPass.h" local="no" imported="no">mc_filter/LowPass.h</includes>
    <class kind="struct">mc_filter::LowPassFiniteDifferences</class>
    <namespace>mc_filter</namespace>
  </compound>
  <compound kind="file">
    <name>MathFunction.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_planning/</path>
    <filename>a00164</filename>
    <namespace>mc_planning</namespace>
    <member kind="define">
      <type>#define</type>
      <name>__ATTRIBUTE_ALWAYS_INLINE__</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>a5fc59f416eb5c91f0175b49f7af5e753</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>Max</name>
      <anchorfile>a00770.html</anchorfile>
      <anchor>a77e75e0c5ab73614fdabf02cfe5383f2</anchor>
      <arglist>(const T &amp;a, const T &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>Min</name>
      <anchorfile>a00770.html</anchorfile>
      <anchor>aeba1312fcec6bc5dd3a699abe286dc7f</anchor>
      <arglist>(const T &amp;a, const T &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Sign</name>
      <anchorfile>a00770.html</anchorfile>
      <anchor>a54ed53a0c1179e5cbe3137d3f1bffdc1</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>Pow2</name>
      <anchorfile>a00770.html</anchorfile>
      <anchor>a3b1da3986483c48daa2f55dd19dcde12</anchor>
      <arglist>(const T &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>polynomial3</name>
      <anchorfile>a00770.html</anchorfile>
      <anchor>a7d44e247083bbf988790f1152b81e28d</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dpolynomial3</name>
      <anchorfile>a00770.html</anchorfile>
      <anchor>a0f774a7281f3bd1ae5b84e52eba5ff0f</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ddpolynomial3</name>
      <anchorfile>a00770.html</anchorfile>
      <anchor>ae074c7900007cbf543dc142b241af635</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>polynomial5</name>
      <anchorfile>a00770.html</anchorfile>
      <anchor>a0be840217b178b89f9c1066b686e1a33</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dpolynomial5</name>
      <anchorfile>a00770.html</anchorfile>
      <anchor>a4f69ccba3da0a430e76341f21b61faac</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ddpolynomial5</name>
      <anchorfile>a00770.html</anchorfile>
      <anchor>a48f20559330be5b61eee1c7f07f15439</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix3d __ATTRIBUTE_ALWAYS_INLINE__</type>
      <name>rotFromRoll</name>
      <anchorfile>a00770.html</anchorfile>
      <anchor>a6e32988e21d696ca35f2ef1107cc5335</anchor>
      <arglist>(const double &amp;roll)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix3d __ATTRIBUTE_ALWAYS_INLINE__</type>
      <name>rotFromPitch</name>
      <anchorfile>a00770.html</anchorfile>
      <anchor>a8923a621478e1390a0991289746448c4</anchor>
      <arglist>(const double &amp;pitch)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix3d __ATTRIBUTE_ALWAYS_INLINE__</type>
      <name>rotFromYaw</name>
      <anchorfile>a00770.html</anchorfile>
      <anchor>aca9d30cbef9ce8be81c7cf69bf0f4310</anchor>
      <arglist>(const double &amp;yaw)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix3d __ATTRIBUTE_ALWAYS_INLINE__</type>
      <name>rotFromYrp</name>
      <anchorfile>a00770.html</anchorfile>
      <anchor>a0eb1869f9a9e5b724ec1566abec4889b</anchor>
      <arglist>(const double &amp;y, const double &amp;r, const double &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix3d __ATTRIBUTE_ALWAYS_INLINE__</type>
      <name>rotFromAngleAxis</name>
      <anchorfile>a00770.html</anchorfile>
      <anchor>a29b3ca0902b5824679da6ac8ceaf6f95</anchor>
      <arglist>(const double &amp;angles, const Eigen::Vector3d &amp;axis)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix3d __ATTRIBUTE_ALWAYS_INLINE__</type>
      <name>rotFromAngleAxis</name>
      <anchorfile>a00770.html</anchorfile>
      <anchor>a3c188db48f271a25f929711aca37830c</anchor>
      <arglist>(const Eigen::Vector3d &amp;omega, const double eps=1.0e-6)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix3d __ATTRIBUTE_ALWAYS_INLINE__</type>
      <name>rotFromAngleAxis</name>
      <anchorfile>a00770.html</anchorfile>
      <anchor>a3cb20dd931fb31b10d21c717e42ed981</anchor>
      <arglist>(double e1, double e2, double e3, const double eps=1.0e-6)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>yrpFromRot</name>
      <anchorfile>a00770.html</anchorfile>
      <anchor>a27200086b55d4f6db3cca5f3e8cfad77</anchor>
      <arglist>(const Eigen::Matrix3d &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yawFromRot</name>
      <anchorfile>a00770.html</anchorfile>
      <anchor>a3e716e801c02ba99aac1a8f00957d432</anchor>
      <arglist>(const Eigen::Matrix3d &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>omegaFromRotApproximation</name>
      <anchorfile>a00770.html</anchorfile>
      <anchor>a63de295b37b4909c8990e59b7956aae7</anchor>
      <arglist>(const Eigen::Matrix3d &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix3d</type>
      <name>mergeTiltWithYaw</name>
      <anchorfile>a00770.html</anchorfile>
      <anchor>a1f6a2eef9cc13af4bf24c95e6c573afc</anchor>
      <arglist>(const Eigen::Vector3d &amp;Rtez, const Eigen::Matrix3d &amp;R2)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix3d</type>
      <name>mergeRoll1Pitch1WithYaw2</name>
      <anchorfile>a00770.html</anchorfile>
      <anchor>a6f7af0610c03e0c615fc78013ba9b15b</anchor>
      <arglist>(const Eigen::Matrix3d &amp;R1, const Eigen::Matrix3d &amp;R2)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Saturation</name>
      <anchorfile>a00770.html</anchorfile>
      <anchor>a0d04194ade47bf352564bae818c9a8b2</anchor>
      <arglist>(const double &amp;data, const double ulimit, const double llimit)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Threshold</name>
      <anchorfile>a00770.html</anchorfile>
      <anchor>a6f09230db504405705692a48e593fb02</anchor>
      <arglist>(const double &amp;data, const double ulimit, const double llimit)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>NormalizedTrapezoidCurve</name>
      <anchorfile>a00770.html</anchorfile>
      <anchor>aa990bf0ad77ef576f2794e983dfb706b</anchor>
      <arglist>(int n_now, int n_ini, int n_acc, int n_dec, int n_end)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>LowPassFilter</name>
      <anchorfile>a00770.html</anchorfile>
      <anchor>a9617673ee411056e60fade786cc447b8</anchor>
      <arglist>(const T &amp;data, T &amp;data_lpf, const double gain)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>HighPassFilter</name>
      <anchorfile>a00770.html</anchorfile>
      <anchor>aeed0bbf5c7d1d20c584e2373510da248</anchor>
      <arglist>(const T &amp;data, T &amp;data_hpf, const double gain)</arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>epsilonAngle</name>
      <anchorfile>a00770.html</anchorfile>
      <anchor>aa31dafa3127b8c839cb563956f5cdabc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mc_controller.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/</path>
    <filename>a00083</filename>
    <includes id="a00092" name="MCController.h" local="no" imported="no">mc_control/MCController.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>CONTROLLER_CHECK_VERSION</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a53b7790e199f0eb693195a9e0f3183fa</anchor>
      <arglist>(NAME)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CONTROLLER_CONSTRUCTOR</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>abe63c9c89a7762fc5ef9a7589218978c</anchor>
      <arglist>(NAME, TYPE)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SIMPLE_CONTROLLER_CONSTRUCTOR</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ae12249535408100bcdf1007ef0eb8fb8</anchor>
      <arglist>(NAME, TYPE)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mc_global_controller.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/</path>
    <filename>a00086</filename>
    <includes id="a00017" name="ControllerServer.h" local="no" imported="no">mc_control/ControllerServer.h</includes>
    <includes id="a00077" name="GlobalPlugin_fwd.h" local="no" imported="no">mc_control/GlobalPlugin_fwd.h</includes>
    <includes id="a00092" name="MCController.h" local="no" imported="no">mc_control/MCController.h</includes>
    <includes id="a03335" name="mc_control/api.h" local="no" imported="no">mc_control/api.h</includes>
    <includes id="a00230" name="RobotModule.h" local="no" imported="no">mc_rbdyn/RobotModule.h</includes>
    <includes id="a00368" name="loader.h" local="no" imported="no">mc_rtc/loader.h</includes>
    <includes id="a00383" name="Logger.h" local="no" imported="no">mc_rtc/log/Logger.h</includes>
    <class kind="struct">mc_control::MCGlobalController</class>
    <class kind="struct">mc_control::MCGlobalController::GlobalConfiguration</class>
    <namespace>mc_control</namespace>
  </compound>
  <compound kind="file">
    <name>mc_python_controller.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/</path>
    <filename>a00089</filename>
    <includes id="a00092" name="MCController.h" local="no" imported="no">mc_control/MCController.h</includes>
    <includes id="a03335" name="mc_control/api.h" local="no" imported="no">mc_control/api.h</includes>
    <class kind="struct">mc_control::PythonRWCallback</class>
    <class kind="struct">mc_control::MCPythonController</class>
    <namespace>mc_control</namespace>
  </compound>
  <compound kind="file">
    <name>MCController.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/</path>
    <filename>a00092</filename>
    <includes id="a03368" name="mc_control/Configuration.h" local="no" imported="no">mc_control/Configuration.h</includes>
    <includes id="a00131" name="ObserverLoader.h" local="no" imported="no">mc_observers/ObserverLoader.h</includes>
    <includes id="a00236" name="Robots.h" local="no" imported="no">mc_rbdyn/Robots.h</includes>
    <includes id="a00266" name="DataStore.h" local="no" imported="no">mc_rtc/DataStore.h</includes>
    <includes id="a00362" name="gui.h" local="no" imported="no">mc_rtc/gui.h</includes>
    <includes id="a00383" name="Logger.h" local="no" imported="no">mc_rtc/log/Logger.h</includes>
    <includes id="a00407" name="CollisionsConstraint.h" local="no" imported="no">mc_solver/CollisionsConstraint.h</includes>
    <includes id="a00413" name="CompoundJointConstraint.h" local="no" imported="no">mc_solver/CompoundJointConstraint.h</includes>
    <includes id="a00422" name="ContactConstraint.h" local="no" imported="no">mc_solver/ContactConstraint.h</includes>
    <includes id="a00425" name="DynamicsConstraint.h" local="no" imported="no">mc_solver/DynamicsConstraint.h</includes>
    <includes id="a00440" name="KinematicsConstraint.h" local="no" imported="no">mc_solver/KinematicsConstraint.h</includes>
    <includes id="a00446" name="QPSolver.h" local="no" imported="no">mc_solver/QPSolver.h</includes>
    <includes id="a00443" name="QPResult.h" local="no" imported="no">mc_solver/msg/QPResult.h</includes>
    <includes id="a00521" name="PostureTask.h" local="no" imported="no">mc_tasks/PostureTask.h</includes>
    <includes id="a03335" name="mc_control/api.h" local="no" imported="no">mc_control/api.h</includes>
    <class kind="class">mc_control::ControllerResetData</class>
    <class kind="class">mc_control::MCController</class>
    <namespace>mc_rbdyn</namespace>
    <namespace>mc_control</namespace>
    <member kind="define">
      <type>#define</type>
      <name>CONTROLLER_MODULE_API</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a26817757133aa8127df9f7c6a90bafb1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Message.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/fsm/states/</path>
    <filename>a00044</filename>
    <includes id="a03392" name="mc_control/fsm/State.h" local="no" imported="no">mc_control/fsm/State.h</includes>
    <class kind="struct">mc_control::fsm::MessageState</class>
    <namespace>mc_control</namespace>
    <namespace>mc_control::fsm</namespace>
  </compound>
  <compound kind="file">
    <name>MessagePackBuilder.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/</path>
    <filename>a00392</filename>
    <includes id="a00401" name="utils_api.h" local="no" imported="no">mc_rtc/utils_api.h</includes>
    <class kind="struct">mc_rtc::MessagePackBuilder</class>
    <namespace>mc_rtc</namespace>
  </compound>
  <compound kind="file">
    <name>Meta.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/fsm/states/</path>
    <filename>a00047</filename>
    <includes id="a00023" name="Executor.h" local="no" imported="no">mc_control/fsm/Executor.h</includes>
    <class kind="struct">mc_control::fsm::MetaState</class>
    <namespace>mc_control</namespace>
    <namespace>mc_control::fsm</namespace>
  </compound>
  <compound kind="file">
    <name>MetaTask.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>a00503</filename>
    <includes id="a03371" name="mc_rtc/Configuration.h" local="no" imported="no">mc_rtc/Configuration.h</includes>
    <includes id="a00347" name="StateBuilder.h" local="no" imported="no">mc_rtc/gui/StateBuilder.h</includes>
    <includes id="a00383" name="Logger.h" local="no" imported="no">mc_rtc/log/Logger.h</includes>
    <includes id="a00446" name="QPSolver.h" local="no" imported="no">mc_solver/QPSolver.h</includes>
    <includes id="a03359" name="mc_solver/api.h" local="no" imported="no">mc_solver/api.h</includes>
    <includes id="a03362" name="mc_tasks/api.h" local="no" imported="no">mc_tasks/api.h</includes>
    <class kind="struct">mc_tasks::MetaTask</class>
    <namespace>mc_control</namespace>
    <namespace>mc_tasks</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; MetaTask &gt;</type>
      <name>MetaTaskPtr</name>
      <anchorfile>a00764.html</anchorfile>
      <anchor>a3ce36af538f25151dc006eb3d50e8b3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>MC_SOLVER_DLLAPI double</type>
      <name>extraStiffness</name>
      <anchorfile>a00764.html</anchorfile>
      <anchor>aa673a5574c449b983c740d35cddf6669</anchor>
      <arglist>(double error, double extraStiffness)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MetaTaskLoader.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>a00506</filename>
    <includes id="a00431" name="GenericLoader.h" local="no" imported="no">mc_solver/GenericLoader.h</includes>
    <includes id="a00503" name="MetaTask.h" local="no" imported="no">mc_tasks/MetaTask.h</includes>
    <class kind="struct">mc_tasks::MetaTaskLoader</class>
    <namespace>mc_tasks</namespace>
  </compound>
  <compound kind="file">
    <name>MetaTasks.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/fsm/states/</path>
    <filename>a00050</filename>
    <includes id="a00008" name="CompletionCriteria.h" local="no" imported="no">mc_control/CompletionCriteria.h</includes>
    <includes id="a03392" name="mc_control/fsm/State.h" local="no" imported="no">mc_control/fsm/State.h</includes>
    <includes id="a00503" name="MetaTask.h" local="no" imported="no">mc_tasks/MetaTask.h</includes>
    <class kind="struct">mc_control::fsm::MetaTasksState</class>
    <class kind="struct">mc_control::fsm::MetaTasksState::TaskCriteria</class>
    <namespace>mc_control</namespace>
    <namespace>mc_control::fsm</namespace>
  </compound>
  <compound kind="file">
    <name>Mimic.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>a00212</filename>
    <includes id="a03350" name="mc_rbdyn/api.h" local="no" imported="no">mc_rbdyn/api.h</includes>
    <class kind="struct">mc_rbdyn::Mimic</class>
    <namespace>mc_rbdyn</namespace>
  </compound>
  <compound kind="file">
    <name>MomentumTask.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>a00509</filename>
    <includes id="a00536" name="TrajectoryTaskGeneric.h" local="no" imported="no">mc_tasks/TrajectoryTaskGeneric.h</includes>
    <class kind="struct">mc_tasks::MomentumTask</class>
    <namespace>mc_tasks</namespace>
  </compound>
  <compound kind="file">
    <name>NumberInput.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/</path>
    <filename>a00311</filename>
    <includes id="a00296" name="elements.h" local="no" imported="no">mc_rtc/gui/elements.h</includes>
    <class kind="struct">mc_rtc::gui::NumberInputImpl</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <member kind="function">
      <type>NumberInputImpl&lt; GetT, SetT &gt;</type>
      <name>NumberInput</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>a42ba0a1ea0c4890a7941cf76892e1268</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, SetT set_fn)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NumberSlider.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/</path>
    <filename>a00314</filename>
    <includes id="a00296" name="elements.h" local="no" imported="no">mc_rtc/gui/elements.h</includes>
    <class kind="struct">mc_rtc::gui::NumberSliderImpl</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <member kind="function">
      <type>NumberSliderImpl&lt; GetT, SetT &gt;</type>
      <name>NumberSlider</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>a5c6714af47a8cb199c7345ed1c2e8ffe</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, SetT set_fn, double min, double max)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Observer.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_observers/</path>
    <filename>a00128</filename>
    <includes id="a03344" name="mc_observers/api.h" local="no" imported="no">mc_observers/api.h</includes>
    <includes id="a00347" name="StateBuilder.h" local="no" imported="no">mc_rtc/gui/StateBuilder.h</includes>
    <includes id="a00383" name="Logger.h" local="no" imported="no">mc_rtc/log/Logger.h</includes>
    <class kind="struct">mc_observers::Observer</class>
    <namespace>mc_control</namespace>
    <namespace>mc_rbdyn</namespace>
    <namespace>mc_observers</namespace>
    <member kind="define">
      <type>#define</type>
      <name>OBSERVER_MODULE_API</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a721e422633105cbc8e8e38736212705c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; mc_observers::Observer &gt;</type>
      <name>ObserverPtr</name>
      <anchorfile>a00769.html</anchorfile>
      <anchor>a45c5f50ee1e5bcc4959faef24b334643</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ObserverLoader.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_observers/</path>
    <filename>a00131</filename>
    <includes id="a00128" name="Observer.h" local="no" imported="no">mc_observers/Observer.h</includes>
    <includes id="a03344" name="mc_observers/api.h" local="no" imported="no">mc_observers/api.h</includes>
    <includes id="a00368" name="loader.h" local="no" imported="no">mc_rtc/loader.h</includes>
    <class kind="class">mc_observers::ObserverLoader</class>
    <namespace>mc_observers</namespace>
  </compound>
  <compound kind="file">
    <name>ObserverMacros.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_observers/</path>
    <filename>a00134</filename>
    <includes id="a00128" name="Observer.h" local="no" imported="no">mc_observers/Observer.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>OBSERVER_MODULE_CHECK_VERSION</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>aee019e14ca218a864623e4ecbf736679</anchor>
      <arglist>(NAME)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EXPORT_OBSERVER_MODULE</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>af6dc028023a125205a51522a9667d755</anchor>
      <arglist>(NAME, TYPE)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ordinate.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/plot/</path>
    <filename>a00323</filename>
    <includes id="a00293" name="traits.h" local="no" imported="no">mc_rtc/gui/details/traits.h</includes>
    <includes id="a03398" name="plot/types.h" local="no" imported="no">mc_rtc/gui/plot/types.h</includes>
    <class kind="struct">mc_rtc::gui::plot::impl::Ordinate</class>
    <class kind="struct">mc_rtc::gui::plot::impl::OrdinateWithColor</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <namespace>mc_rtc::gui::plot</namespace>
    <namespace>mc_rtc::gui::plot::impl</namespace>
    <member kind="function">
      <type>impl::Ordinate&lt; GetT &gt;</type>
      <name>Y</name>
      <anchorfile>a00787.html</anchorfile>
      <anchor>aa288bbda415eb4c0d8c5d6fd8fd00f12</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, Color color, Style style=Style::Solid, Side side=Side::Left)</arglist>
    </member>
    <member kind="function">
      <type>impl::OrdinateWithColor&lt; GetT, GetColor &gt;</type>
      <name>Y</name>
      <anchorfile>a00787.html</anchorfile>
      <anchor>a5957f379abaa61742baef9909ae18990</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, GetColor get_color, Style style=Style::Solid, Side side=Side::Left)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OrientationTask.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>a00512</filename>
    <includes id="a00536" name="TrajectoryTaskGeneric.h" local="no" imported="no">mc_tasks/TrajectoryTaskGeneric.h</includes>
    <class kind="struct">mc_tasks::OrientationTask</class>
    <namespace>mc_tasks</namespace>
  </compound>
  <compound kind="file">
    <name>Parallel.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/fsm/states/</path>
    <filename>a00053</filename>
    <includes id="a03392" name="mc_control/fsm/State.h" local="no" imported="no">mc_control/fsm/State.h</includes>
    <class kind="struct">mc_control::fsm::ParallelState</class>
    <class kind="struct">mc_control::fsm::ParallelState::DelayedState</class>
    <namespace>mc_control</namespace>
    <namespace>mc_control::fsm</namespace>
  </compound>
  <compound kind="file">
    <name>Pause.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/fsm/states/</path>
    <filename>a00056</filename>
    <includes id="a03392" name="mc_control/fsm/State.h" local="no" imported="no">mc_control/fsm/State.h</includes>
    <class kind="struct">mc_control::fsm::PauseState</class>
    <namespace>mc_control</namespace>
    <namespace>mc_control::fsm</namespace>
  </compound>
  <compound kind="file">
    <name>Pendulum.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_planning/</path>
    <filename>a00167</filename>
    <includes id="a03347" name="mc_planning/api.h" local="no" imported="no">mc_planning/api.h</includes>
    <class kind="struct">mc_planning::Pendulum</class>
    <namespace>mc_planning</namespace>
  </compound>
  <compound kind="file">
    <name>PlanarSurface.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>a00215</filename>
    <includes id="a00248" name="Surface.h" local="no" imported="no">mc_rbdyn/Surface.h</includes>
    <class kind="struct">mc_rbdyn::PlanarSurface</class>
    <namespace>mc_rbdyn</namespace>
  </compound>
  <compound kind="file">
    <name>plot.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/</path>
    <filename>a00335</filename>
    <includes id="a00317" name="Abscissa.h" local="no" imported="no">mc_rtc/gui/plot/Abscissa.h</includes>
    <includes id="a00320" name="AbscissaOrdinate.h" local="no" imported="no">mc_rtc/gui/plot/AbscissaOrdinate.h</includes>
    <includes id="a00323" name="Ordinate.h" local="no" imported="no">mc_rtc/gui/plot/Ordinate.h</includes>
    <includes id="a03383" name="plot/Polygon.h" local="no" imported="no">mc_rtc/gui/plot/Polygon.h</includes>
    <includes id="a00329" name="Polygons.h" local="no" imported="no">mc_rtc/gui/plot/Polygons.h</includes>
  </compound>
  <compound kind="file">
    <name>Point3D.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/</path>
    <filename>a00338</filename>
    <includes id="a00293" name="traits.h" local="no" imported="no">mc_rtc/gui/details/traits.h</includes>
    <includes id="a00296" name="elements.h" local="no" imported="no">mc_rtc/gui/elements.h</includes>
    <includes id="a00332" name="types.h" local="no" imported="no">mc_rtc/gui/types.h</includes>
    <class kind="struct">mc_rtc::gui::Point3DROImpl</class>
    <class kind="struct">mc_rtc::gui::Point3DImpl</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <member kind="function">
      <type>Point3DROImpl&lt; GetT &gt;</type>
      <name>Point3D</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>ac40c7c59cc19e0fe7be9d8a5a8564f74</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>Point3DImpl&lt; GetT, SetT &gt;</type>
      <name>Point3D</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>a0c1802e2d8623ee22fffc408e69eaf56</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, SetT set_fn)</arglist>
    </member>
    <member kind="function">
      <type>Point3DROImpl&lt; GetT &gt;</type>
      <name>Point3D</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>ad2db10f53541f7b6a925d724023de7ee</anchor>
      <arglist>(const std::string &amp;name, const PointConfig &amp;config, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>Point3DImpl&lt; GetT, SetT &gt;</type>
      <name>Point3D</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>a6a9e684830b60a463c848a290d2b910b</anchor>
      <arglist>(const std::string &amp;name, const PointConfig &amp;config, GetT get_fn, SetT set_fn)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>plot/Polygon.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/plot/</path>
    <filename>a03383</filename>
    <includes id="a00293" name="traits.h" local="no" imported="no">mc_rtc/gui/details/traits.h</includes>
    <includes id="a03398" name="plot/types.h" local="no" imported="no">mc_rtc/gui/plot/types.h</includes>
    <class kind="struct">mc_rtc::gui::plot::impl::Polygon</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <namespace>mc_rtc::gui::plot</namespace>
    <namespace>mc_rtc::gui::plot::impl</namespace>
    <member kind="function">
      <type>impl::Polygon&lt; GetT &gt;</type>
      <name>Polygon</name>
      <anchorfile>a00787.html</anchorfile>
      <anchor>a455aeb83363d1c76669333ae6827f638</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, Side side=Side::Left)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Polygon.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/</path>
    <filename>a00326</filename>
    <includes id="a00293" name="traits.h" local="no" imported="no">mc_rtc/gui/details/traits.h</includes>
    <includes id="a00296" name="elements.h" local="no" imported="no">mc_rtc/gui/elements.h</includes>
    <includes id="a00332" name="types.h" local="no" imported="no">mc_rtc/gui/types.h</includes>
    <class kind="struct">mc_rtc::gui::PolygonImpl</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <member kind="function">
      <type>PolygonImpl&lt; GetT &gt;</type>
      <name>Polygon</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>ac7c7c596bdb09e8c01e26e8fb53ce360</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>PolygonImpl&lt; GetT &gt;</type>
      <name>Polygon</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>a2b137bae8372a9a84cdb28508e7de1dd</anchor>
      <arglist>(const std::string &amp;name, const Color &amp;color, GetT get_fn)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>polygon_utils.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>a00218</filename>
    <includes id="a03350" name="mc_rbdyn/api.h" local="no" imported="no">mc_rbdyn/api.h</includes>
    <class kind="struct">mc_rbdyn::QuadraticGenerator</class>
    <class kind="struct">mc_rbdyn::Plane</class>
    <namespace>geos</namespace>
    <namespace>geos::geom</namespace>
    <namespace>mc_rbdyn</namespace>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI std::vector&lt; Plane &gt;</type>
      <name>planes_from_polygon</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>a3313c1739e7847d2155cd1e8eb248c1e</anchor>
      <arglist>(const std::shared_ptr&lt; geos::geom::Geometry &gt; &amp;geometry)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI std::vector&lt; Eigen::Vector3d &gt;</type>
      <name>points_from_polygon</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>a8b64034329a5f248185cf1904c0732a0</anchor>
      <arglist>(std::shared_ptr&lt; geos::geom::Geometry &gt; geometry)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PolygonInterpolator.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>a00221</filename>
    <includes id="a03350" name="mc_rbdyn/api.h" local="no" imported="no">mc_rbdyn/api.h</includes>
    <class kind="struct">mc_rbdyn::PolygonInterpolator</class>
    <namespace>geos</namespace>
    <namespace>geos::geom</namespace>
    <namespace>mc_rbdyn</namespace>
  </compound>
  <compound kind="file">
    <name>Polygons.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/plot/</path>
    <filename>a00329</filename>
    <includes id="a00293" name="traits.h" local="no" imported="no">mc_rtc/gui/details/traits.h</includes>
    <includes id="a03398" name="plot/types.h" local="no" imported="no">mc_rtc/gui/plot/types.h</includes>
    <class kind="struct">mc_rtc::gui::plot::impl::Polygons</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <namespace>mc_rtc::gui::plot</namespace>
    <namespace>mc_rtc::gui::plot::impl</namespace>
    <member kind="function">
      <type>impl::Polygons&lt; GetT &gt;</type>
      <name>Polygons</name>
      <anchorfile>a00787.html</anchorfile>
      <anchor>a2bfb0562e6093e2274530cb22f523030</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, Side side=Side::Left)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PositionBasedVisServoTask.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>a00515</filename>
    <includes id="a00536" name="TrajectoryTaskGeneric.h" local="no" imported="no">mc_tasks/TrajectoryTaskGeneric.h</includes>
    <class kind="struct">mc_tasks::PositionBasedVisServoTask</class>
    <namespace>mc_tasks</namespace>
  </compound>
  <compound kind="file">
    <name>PositionTask.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>a00518</filename>
    <includes id="a00536" name="TrajectoryTaskGeneric.h" local="no" imported="no">mc_tasks/TrajectoryTaskGeneric.h</includes>
    <class kind="struct">mc_tasks::PositionTask</class>
    <namespace>mc_tasks</namespace>
  </compound>
  <compound kind="file">
    <name>PostureTask.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>a00521</filename>
    <includes id="a00503" name="MetaTask.h" local="no" imported="no">mc_tasks/MetaTask.h</includes>
    <class kind="struct">mc_tasks::PostureTask</class>
    <namespace>mc_tasks</namespace>
  </compound>
  <compound kind="file">
    <name>PythonState.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/fsm/</path>
    <filename>a00026</filename>
    <includes id="a03392" name="mc_control/fsm/State.h" local="no" imported="no">mc_control/fsm/State.h</includes>
    <class kind="struct">mc_control::fsm::PythonState</class>
    <namespace>mc_control</namespace>
    <namespace>mc_control::fsm</namespace>
  </compound>
  <compound kind="file">
    <name>QPResult.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_solver/msg/</path>
    <filename>a00443</filename>
    <includes id="a03377" name="mc_solver/msg/Contact.h" local="no" imported="no">mc_solver/msg/Contact.h</includes>
    <includes id="a03389" name="mc_solver/msg/Robot.h" local="no" imported="no">mc_solver/msg/Robot.h</includes>
    <includes id="a03407" name="mc_solver/msg/ZMP.h" local="no" imported="no">mc_solver/msg/ZMP.h</includes>
    <class kind="struct">mc_solver::QPResultMsg</class>
    <namespace>mc_solver</namespace>
  </compound>
  <compound kind="file">
    <name>QPSolver.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_solver/</path>
    <filename>a00446</filename>
    <includes id="a03374" name="mc_rbdyn/Contact.h" local="no" imported="no">mc_rbdyn/Contact.h</includes>
    <includes id="a00236" name="Robots.h" local="no" imported="no">mc_rbdyn/Robots.h</includes>
    <includes id="a00416" name="ConstraintSet.h" local="no" imported="no">mc_solver/ConstraintSet.h</includes>
    <includes id="a00425" name="DynamicsConstraint.h" local="no" imported="no">mc_solver/DynamicsConstraint.h</includes>
    <includes id="a03359" name="mc_solver/api.h" local="no" imported="no">mc_solver/api.h</includes>
    <includes id="a00443" name="QPResult.h" local="no" imported="no">mc_solver/msg/QPResult.h</includes>
    <class kind="class">mc_solver::QPSolver</class>
    <namespace>mc_tasks</namespace>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <namespace>mc_solver</namespace>
    <member kind="variable">
      <type></type>
      <name>None</name>
      <anchorfile>a00446.html</anchorfile>
      <anchor>ac7485dcc8d256a6f197ed7802687f252</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>Joints</name>
      <anchorfile>a00446.html</anchorfile>
      <anchor>afe16a7652eeda60792bb24b8bce8455c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>README.md</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/</path>
    <filename>a00755</filename>
  </compound>
  <compound kind="file">
    <name>RelativeEndEffectorTask.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>a00524</filename>
    <includes id="a00482" name="EndEffectorTask.h" local="no" imported="no">mc_tasks/EndEffectorTask.h</includes>
    <includes id="a03362" name="mc_tasks/api.h" local="no" imported="no">mc_tasks/api.h</includes>
    <class kind="struct">mc_tasks::RelativeEndEffectorTask</class>
    <namespace>mc_tasks</namespace>
  </compound>
  <compound kind="file">
    <name>mc_rbdyn/Robot.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>a03386</filename>
    <includes id="a00170" name="Base.h" local="no" imported="no">mc_rbdyn/Base.h</includes>
    <includes id="a00230" name="RobotModule.h" local="no" imported="no">mc_rbdyn/RobotModule.h</includes>
    <includes id="a00248" name="Surface.h" local="no" imported="no">mc_rbdyn/Surface.h</includes>
    <includes id="a00071" name="generic_gripper.h" local="no" imported="no">mc_control/generic_gripper.h</includes>
    <class kind="struct">mc_rbdyn::Robot</class>
    <namespace>mc_rbdyn</namespace>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI const mc_rbdyn::Robot &amp;</type>
      <name>robotFromConfig</name>
      <anchorfile>a00759.html</anchorfile>
      <anchor>ga70b316b2f0c0caf547e160e74c2a029d</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config, const mc_rbdyn::Robots &amp;robots, const std::string &amp;prefix, bool required=false, const std::string &amp;robotIndexKey=&quot;robotIndex&quot;, const std::string &amp;robotNameKey=&quot;robot&quot;, const std::string &amp;defaultRobotName=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>std::string MC_RBDYN_DLLAPI</type>
      <name>robotNameFromConfig</name>
      <anchorfile>a00759.html</anchorfile>
      <anchor>ga40325ac769295d23f270976eead26245</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config, const mc_rbdyn::Robots &amp;robots, const std::string &amp;prefix=&quot;&quot;, bool required=false, const std::string &amp;robotIndexKey=&quot;robotIndex&quot;, const std::string &amp;robotNameKey=&quot;robot&quot;, const std::string &amp;defaultRobotName=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int MC_RBDYN_DLLAPI</type>
      <name>robotIndexFromConfig</name>
      <anchorfile>a00759.html</anchorfile>
      <anchor>gaf9b711ec2baa5684b8f422d740464b5f</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config, const mc_rbdyn::Robots &amp;robots, const std::string &amp;prefix=&quot;&quot;, bool required=false, const std::string &amp;robotIndexKey=&quot;robotIndex&quot;, const std::string &amp;robotNameKey=&quot;robot&quot;, const std::string &amp;defaultRobotName=&quot;&quot;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mc_solver/msg/Robot.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_solver/msg/</path>
    <filename>a03389</filename>
    <class kind="struct">mc_solver::RobotMsg</class>
    <namespace>mc_solver</namespace>
  </compound>
  <compound kind="file">
    <name>RobotLoader.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>a00227</filename>
    <includes id="a00230" name="RobotModule.h" local="no" imported="no">mc_rbdyn/RobotModule.h</includes>
    <includes id="a03350" name="mc_rbdyn/api.h" local="no" imported="no">mc_rbdyn/api.h</includes>
    <includes id="a00368" name="loader.h" local="no" imported="no">mc_rtc/loader.h</includes>
    <class kind="struct">mc_rbdyn::details::are_strings</class>
    <class kind="struct">mc_rbdyn::details::are_strings&lt; T &gt;</class>
    <class kind="struct">mc_rbdyn::details::are_strings&lt; T, Args... &gt;</class>
    <class kind="class">mc_rbdyn::RobotLoader</class>
    <namespace>mc_rbdyn</namespace>
    <namespace>mc_rbdyn::details</namespace>
    <member kind="function">
      <type>std::conditional&lt; std::is_same&lt; std::string, T &gt;::value, const std::string &amp;, std::string &gt;::type</type>
      <name>to_string</name>
      <anchorfile>a00778.html</anchorfile>
      <anchor>a71fcd7fe46e75452f9c6302bb1c40412</anchor>
      <arglist>(const T &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RobotModule.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>a00230</filename>
    <includes id="a00173" name="BodySensor.h" local="no" imported="no">mc_rbdyn/BodySensor.h</includes>
    <includes id="a00176" name="Collision.h" local="no" imported="no">mc_rbdyn/Collision.h</includes>
    <includes id="a00179" name="CompoundJointConstraintDescription.h" local="no" imported="no">mc_rbdyn/CompoundJointConstraintDescription.h</includes>
    <includes id="a00197" name="Flexibility.h" local="no" imported="no">mc_rbdyn/Flexibility.h</includes>
    <includes id="a00200" name="ForceSensor.h" local="no" imported="no">mc_rbdyn/ForceSensor.h</includes>
    <includes id="a00212" name="Mimic.h" local="no" imported="no">mc_rbdyn/Mimic.h</includes>
    <includes id="a00245" name="Springs.h" local="no" imported="no">mc_rbdyn/Springs.h</includes>
    <includes id="a03350" name="mc_rbdyn/api.h" local="no" imported="no">mc_rbdyn/api.h</includes>
    <includes id="a00206" name="StabilizerConfiguration.h" local="no" imported="no">mc_rbdyn/lipm_stabilizer/StabilizerConfiguration.h</includes>
    <includes id="a00263" name="constants.h" local="no" imported="no">mc_rtc/constants.h</includes>
    <class kind="struct">mc_rbdyn::DevicePtrVector</class>
    <class kind="struct">mc_rbdyn::VisualMap</class>
    <class kind="struct">mc_rbdyn::RobotModule</class>
    <class kind="struct">mc_rbdyn::RobotModule::Gripper</class>
    <class kind="struct">mc_rbdyn::RobotModule::Gripper::Safety</class>
    <namespace>mc_rbdyn</namespace>
    <member kind="define">
      <type>#define</type>
      <name>ROBOT_MODULE_API</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>a983157fccbdda235351228ec75cbd167</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; RobotModule &gt;</type>
      <name>RobotModulePtr</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>af67e459a90b9a864418fca7d55d959a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; RobotModule, Eigen::aligned_allocator&lt; RobotModule &gt; &gt;</type>
      <name>RobotModuleVector</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>a95605f5cb57b7c5b39027072bedbbc04</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>RobotModule::bounds_t MC_RBDYN_DLLAPI</type>
      <name>urdf_limits_to_bounds</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>aa4f40fc0642de7f1debd053f9c5d393f</anchor>
      <arglist>(const rbd::parsers::Limits &amp;limits)</arglist>
    </member>
    <member kind="function">
      <type>RobotModule::bounds_t MC_RTC_DEPRECATED MC_RBDYN_DLLAPI</type>
      <name>urdf_limits_to_bounds</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>a44d55a51f42d585c340944099985fa8e</anchor>
      <arglist>(const mc_rbdyn_urdf::Limits &amp;limits)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RobotModuleMacros.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>a00233</filename>
    <includes id="a00230" name="RobotModule.h" local="no" imported="no">mc_rbdyn/RobotModule.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>ROBOT_MODULE_CHECK_VERSION</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a8ff1f95ceab073746f8203ca23fbb3cd</anchor>
      <arglist>(NAME)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROBOT_MODULE_COMMON</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>aefdd7a13affe8001b4bf38b8e94fcd50</anchor>
      <arglist>(NAME)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROBOT_MODULE_DEFAULT_CONSTRUCTOR</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a61416168a2a0e73c18a99a7da049df9a</anchor>
      <arglist>(NAME, TYPE)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROBOT_MODULE_CANONIC_CONSTRUCTOR</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a835eb9cb28d7a07e5fb285241d7e7b08</anchor>
      <arglist>(NAME, TYPE)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Robots.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>a00236</filename>
    <includes id="a03386" name="mc_rbdyn/Robot.h" local="no" imported="no">mc_rbdyn/Robot.h</includes>
    <class kind="struct">mc_rbdyn::Robots</class>
    <namespace>mc_rbdyn</namespace>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI std::shared_ptr&lt; Robots &gt;</type>
      <name>loadRobot</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>acaac690d2e96da3b8254fecefe1cccf9</anchor>
      <arglist>(const RobotModule &amp;module, sva::PTransformd *base=nullptr, const std::string &amp;baseName=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI MC_RTC_DEPRECATED std::shared_ptr&lt; Robots &gt;</type>
      <name>loadRobot</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>a7f3fbf6971706876454da1142aadb193</anchor>
      <arglist>(const RobotModule &amp;module, const std::string &amp;surfaceDir, sva::PTransformd *base=nullptr, const std::string &amp;baseName=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI std::shared_ptr&lt; Robots &gt;</type>
      <name>loadRobots</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>a90beb4c07fba317439956363ae429538</anchor>
      <arglist>(const std::vector&lt; std::shared_ptr&lt; RobotModule &gt;&gt; &amp;modules)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI MC_RTC_DEPRECATED std::shared_ptr&lt; Robots &gt;</type>
      <name>loadRobots</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>a1506cb6d1d95f69cae2f1a6c072fa406</anchor>
      <arglist>(const std::vector&lt; std::shared_ptr&lt; RobotModule &gt;&gt; &amp;modules, const std::vector&lt; std::string &gt; &amp;surfaceDirs)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI std::shared_ptr&lt; Robots &gt;</type>
      <name>loadRobotAndEnv</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>afad00246a5238eb31795027c0acad7a9</anchor>
      <arglist>(const RobotModule &amp;module, const RobotModule &amp;envModule, sva::PTransformd *base=nullptr, const std::string &amp;baseName=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI MC_RTC_DEPRECATED std::shared_ptr&lt; Robots &gt;</type>
      <name>loadRobotAndEnv</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>a21e283b3c61bc0db909f2a950bf4384a</anchor>
      <arglist>(const RobotModule &amp;module, const std::string &amp;surfaceDir, const RobotModule &amp;envModule, const std::string &amp;envSurfaceDir, sva::PTransformd *base=nullptr, const std::string &amp;baseName=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI std::shared_ptr&lt; Robots &gt;</type>
      <name>loadRobotFromUrdf</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>a8e415d422767b48828fbf2e282b66041</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;urdf, bool withVirtualLinks=true, const std::vector&lt; std::string &gt; &amp;filteredLinks={}, bool fixed=false, sva::PTransformd *base=nullptr, const std::string &amp;baseName=&quot;&quot;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Rotation.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/</path>
    <filename>a00341</filename>
    <includes id="a00293" name="traits.h" local="no" imported="no">mc_rtc/gui/details/traits.h</includes>
    <includes id="a00296" name="elements.h" local="no" imported="no">mc_rtc/gui/elements.h</includes>
    <includes id="a00332" name="types.h" local="no" imported="no">mc_rtc/gui/types.h</includes>
    <class kind="struct">mc_rtc::gui::RotationROImpl</class>
    <class kind="struct">mc_rtc::gui::RotationImpl</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <member kind="function">
      <type>RotationROImpl&lt; GetT &gt;</type>
      <name>Rotation</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>a9dc809d7e99978fe3f5e2439d1a20771</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>RotationImpl&lt; GetT, SetT &gt;</type>
      <name>Rotation</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>a6440392ea4b48778f6d4012e0400ee5b</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, SetT set_fn)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>rpy_utils.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>a00239</filename>
    <namespace>mc_rbdyn</namespace>
    <member kind="function">
      <type>Eigen::Matrix3d</type>
      <name>rpyToMat</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>a5f178afee4c03533ae15c4dc04c143e2</anchor>
      <arglist>(const double &amp;r, const double &amp;p, const double &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix3d</type>
      <name>rpyToMat</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>a04f15be86a9827b0d076764f344406ab</anchor>
      <arglist>(const Eigen::Vector3d &amp;rpy)</arglist>
    </member>
    <member kind="function">
      <type>sva::PTransformd</type>
      <name>rpyToPT</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>afa2b9eed96e67a1bdb6abf90bb597063</anchor>
      <arglist>(const Eigen::Vector3d &amp;rpy)</arglist>
    </member>
    <member kind="function">
      <type>sva::PTransformd</type>
      <name>rpyToPT</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>a4626f965b6c407b0bd14e10f98ec42b9</anchor>
      <arglist>(const double &amp;r, const double &amp;p, const double &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>rpyFromMat</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>a0948fb6dc9382e116f65c76261d26ea0</anchor>
      <arglist>(const Eigen::Matrix3d &amp;E)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>rpyFromQuat</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>a058cd1f189f02e2c4986b6aacffa8195</anchor>
      <arglist>(const Eigen::Quaterniond &amp;quat)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SCHAddon.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>a00242</filename>
    <includes id="a03350" name="mc_rbdyn/api.h" local="no" imported="no">mc_rbdyn/api.h</includes>
    <namespace>sch</namespace>
    <namespace>sch::mc_rbdyn</namespace>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI void</type>
      <name>transform</name>
      <anchorfile>a00780.html</anchorfile>
      <anchor>a3c0ffcdf6b05980ab8ca56474c431bc7</anchor>
      <arglist>(S_Object &amp;obj, const sva::PTransformd &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI STP_BV *</type>
      <name>STPBV</name>
      <anchorfile>a00780.html</anchorfile>
      <anchor>a30354c6b845b9f2c2bf59342c84f9e0d</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI S_Polyhedron *</type>
      <name>Polyhedron</name>
      <anchorfile>a00780.html</anchorfile>
      <anchor>a1d8bc5539da072c12d1f76bc317f8af3</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI double</type>
      <name>distance</name>
      <anchorfile>a00780.html</anchorfile>
      <anchor>a8e193a456c2d3dab3ad5f12ed049e3b1</anchor>
      <arglist>(CD_Pair &amp;pair, Eigen::Vector3d &amp;p1, Eigen::Vector3d &amp;p2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Schema.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/</path>
    <filename>a00344</filename>
    <includes id="a00296" name="elements.h" local="no" imported="no">mc_rtc/gui/elements.h</includes>
    <class kind="struct">mc_rtc::gui::SchemaImpl</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <member kind="function">
      <type>SchemaImpl&lt; Callback &gt;</type>
      <name>Schema</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>a0c892f6b2ba9e06d4bda32a16b76b75b</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;schema, Callback cb)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SimulationContactPair.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/</path>
    <filename>a00095</filename>
    <includes id="a03335" name="mc_control/api.h" local="no" imported="no">mc_control/api.h</includes>
    <includes id="a03386" name="mc_rbdyn/Robot.h" local="no" imported="no">mc_rbdyn/Robot.h</includes>
    <includes id="a00242" name="SCHAddon.h" local="no" imported="no">mc_rbdyn/SCHAddon.h</includes>
    <includes id="a00251" name="surface_hull.h" local="no" imported="no">mc_rbdyn/surface_hull.h</includes>
    <class kind="struct">mc_control::SimulationContactPair</class>
    <namespace>mc_control</namespace>
  </compound>
  <compound kind="file">
    <name>SlidingFootContact.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/fsm/states/</path>
    <filename>a00059</filename>
    <includes id="a03392" name="mc_control/fsm/State.h" local="no" imported="no">mc_control/fsm/State.h</includes>
    <includes id="a00263" name="constants.h" local="no" imported="no">mc_rtc/constants.h</includes>
    <includes id="a00473" name="CoMTask.h" local="no" imported="no">mc_tasks/CoMTask.h</includes>
    <includes id="a00476" name="CoPTask.h" local="no" imported="no">mc_tasks/CoPTask.h</includes>
    <includes id="a00512" name="OrientationTask.h" local="no" imported="no">mc_tasks/OrientationTask.h</includes>
    <includes id="a00521" name="PostureTask.h" local="no" imported="no">mc_tasks/PostureTask.h</includes>
    <includes id="a00524" name="RelativeEndEffectorTask.h" local="no" imported="no">mc_tasks/RelativeEndEffectorTask.h</includes>
    <class kind="struct">mc_control::fsm::SlidingFootContactState</class>
    <namespace>mc_control</namespace>
    <namespace>mc_control::fsm</namespace>
  </compound>
  <compound kind="file">
    <name>SmoothTask.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>a00527</filename>
    <class kind="struct">mc_tasks::SmoothTask</class>
    <namespace>mc_tasks</namespace>
  </compound>
  <compound kind="file">
    <name>Spline.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_trajectory/</path>
    <filename>a00551</filename>
    <includes id="a03365" name="mc_trajectory/api.h" local="no" imported="no">mc_trajectory/api.h</includes>
    <class kind="struct">mc_trajectory::Spline</class>
    <namespace>mc_trajectory</namespace>
  </compound>
  <compound kind="file">
    <name>spline_utils.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_trajectory/</path>
    <filename>a00554</filename>
    <includes id="a03365" name="mc_trajectory/api.h" local="no" imported="no">mc_trajectory/api.h</includes>
    <namespace>mc_trajectory</namespace>
    <member kind="function">
      <type>MC_TRAJECTORY_DLLAPI Eigen::MatrixXd</type>
      <name>generateInterpolatedWaypoints</name>
      <anchorfile>a00798.html</anchorfile>
      <anchor>a9fbcf4dd49d2e09b5d33208fae44f11b</anchor>
      <arglist>(const Eigen::Vector3d &amp;start, const Eigen::Vector3d &amp;stop, unsigned int nrWP)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SplineTrajectoryTask.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>a00530</filename>
    <includes id="a00536" name="TrajectoryTaskGeneric.h" local="no" imported="no">mc_tasks/TrajectoryTaskGeneric.h</includes>
    <includes id="a00548" name="InterpolatedRotation.h" local="no" imported="no">mc_trajectory/InterpolatedRotation.h</includes>
    <class kind="struct">mc_tasks::SplineTrajectoryTask</class>
    <namespace>mc_tasks</namespace>
  </compound>
  <compound kind="file">
    <name>Springs.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>a00245</filename>
    <includes id="a03350" name="mc_rbdyn/api.h" local="no" imported="no">mc_rbdyn/api.h</includes>
    <class kind="struct">mc_rbdyn::Springs</class>
    <namespace>mc_rbdyn</namespace>
  </compound>
  <compound kind="file">
    <name>StabilizerConfiguration.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/lipm_stabilizer/</path>
    <filename>a00206</filename>
    <includes id="a03350" name="mc_rbdyn/api.h" local="no" imported="no">mc_rbdyn/api.h</includes>
    <includes id="a00209" name="ZMPCCConfiguration.h" local="no" imported="no">mc_rbdyn/lipm_stabilizer/ZMPCCConfiguration.h</includes>
    <includes id="a03371" name="mc_rtc/Configuration.h" local="no" imported="no">mc_rtc/Configuration.h</includes>
    <includes id="a00389" name="logging.h" local="no" imported="no">mc_rtc/logging.h</includes>
    <class kind="struct">mc_rbdyn::lipm_stabilizer::FDQPWeights</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; mc_rbdyn::lipm_stabilizer::FDQPWeights &gt;</class>
    <class kind="struct">mc_rbdyn::lipm_stabilizer::StabilizerConfiguration</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; mc_rbdyn::lipm_stabilizer::StabilizerConfiguration &gt;</class>
    <namespace>mc_rbdyn</namespace>
    <namespace>mc_rbdyn::lipm_stabilizer</namespace>
    <namespace>mc_rtc</namespace>
  </compound>
  <compound kind="file">
    <name>StabilizerStandingState.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/fsm/states/</path>
    <filename>a00062</filename>
    <includes id="a03392" name="mc_control/fsm/State.h" local="no" imported="no">mc_control/fsm/State.h</includes>
    <includes id="a00167" name="Pendulum.h" local="no" imported="no">mc_planning/Pendulum.h</includes>
    <includes id="a03380" name="mc_tasks/lipm_stabilizer/Contact.h" local="no" imported="no">mc_tasks/lipm_stabilizer/Contact.h</includes>
    <class kind="struct">mc_control::fsm::StabilizerStandingState</class>
    <namespace>mc_tasks</namespace>
    <namespace>mc_tasks::lipm_stabilizer</namespace>
    <namespace>mc_control</namespace>
    <namespace>mc_control::fsm</namespace>
  </compound>
  <compound kind="file">
    <name>StabilizerTask.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/lipm_stabilizer/</path>
    <filename>a00491</filename>
    <includes id="a00098" name="ExponentialMovingAverage.h" local="no" imported="no">mc_filter/ExponentialMovingAverage.h</includes>
    <includes id="a00101" name="LeakyIntegrator.h" local="no" imported="no">mc_filter/LeakyIntegrator.h</includes>
    <includes id="a00110" name="StationaryOffset.h" local="no" imported="no">mc_filter/StationaryOffset.h</includes>
    <includes id="a00473" name="CoMTask.h" local="no" imported="no">mc_tasks/CoMTask.h</includes>
    <includes id="a00476" name="CoPTask.h" local="no" imported="no">mc_tasks/CoPTask.h</includes>
    <includes id="a00503" name="MetaTask.h" local="no" imported="no">mc_tasks/MetaTask.h</includes>
    <includes id="a00512" name="OrientationTask.h" local="no" imported="no">mc_tasks/OrientationTask.h</includes>
    <includes id="a00206" name="StabilizerConfiguration.h" local="no" imported="no">mc_rbdyn/lipm_stabilizer/StabilizerConfiguration.h</includes>
    <includes id="a03380" name="mc_tasks/lipm_stabilizer/Contact.h" local="no" imported="no">mc_tasks/lipm_stabilizer/Contact.h</includes>
    <includes id="a00494" name="ZMPCC.h" local="no" imported="no">mc_tasks/lipm_stabilizer/ZMPCC.h</includes>
    <class kind="struct">mc_tasks::lipm_stabilizer::StabilizerTask</class>
    <class kind="struct">mc_tasks::lipm_stabilizer::StabilizerTask::EnumClassHash</class>
    <namespace>mc_tasks</namespace>
    <namespace>mc_tasks::lipm_stabilizer</namespace>
  </compound>
  <compound kind="file">
    <name>mc_control/fsm/State.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/fsm/</path>
    <filename>a03392</filename>
    <includes id="a03338" name="mc_control/fsm/api.h" local="no" imported="no">mc_control/fsm/api.h</includes>
    <includes id="a03341" name="mc_control/fsm/states/api.h" local="no" imported="no">mc_control/fsm/states/api.h</includes>
    <includes id="a03371" name="mc_rtc/Configuration.h" local="no" imported="no">mc_rtc/Configuration.h</includes>
    <class kind="class">mc_control::fsm::State</class>
    <namespace>mc_control</namespace>
    <namespace>mc_control::fsm</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FSM_STATE_API</name>
      <anchorfile>a03392.html</anchorfile>
      <anchor>a3d9a843e054d57012b5f40fbab9ca357</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EXPORT_SINGLE_STATE</name>
      <anchorfile>a03392.html</anchorfile>
      <anchor>afc0c9094c9775d1a72401d17cd60d6be</anchor>
      <arglist>(NAME, TYPE)</arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; State &gt;</type>
      <name>StatePtr</name>
      <anchorfile>a00762.html</anchorfile>
      <anchor>a4c42d903de4c4a1e5ad50c37bc2d547a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct MC_CONTROL_FSM_DLLAPI</type>
      <name>Controller</name>
      <anchorfile>a00762.html</anchorfile>
      <anchor>a3d06e24faff23eaa588f3820e74042b7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mc_planning/State.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_planning/</path>
    <filename>a03395</filename>
    <includes id="a03347" name="mc_planning/api.h" local="no" imported="no">mc_planning/api.h</includes>
    <class kind="class">mc_planning::StateP</class>
    <class kind="class">mc_planning::StatePV</class>
    <class kind="class">mc_planning::StatePVA</class>
    <namespace>mc_planning</namespace>
  </compound>
  <compound kind="file">
    <name>StateBuilder.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/</path>
    <filename>a00347</filename>
    <includes id="a03371" name="mc_rtc/Configuration.h" local="no" imported="no">mc_rtc/Configuration.h</includes>
    <includes id="a00296" name="elements.h" local="no" imported="no">mc_rtc/gui/elements.h</includes>
    <includes id="a00335" name="plot.h" local="no" imported="no">mc_rtc/gui/plot.h</includes>
    <class kind="struct">mc_rtc::gui::StateBuilder</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <member kind="enumeration">
      <type></type>
      <name>ElementsStacking</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>a649ddcaedb769dede3922fa845e71ca4</anchor>
      <arglist></arglist>
      <enumvalue file="a00785.html" anchor="a649ddcaedb769dede3922fa845e71ca4a06ce2a25e5d12c166a36f654dbea6012">Vertical</enumvalue>
      <enumvalue file="a00785.html" anchor="a649ddcaedb769dede3922fa845e71ca4ac1b5fa03ecdb95d4a45dd1c40b02527f">Horizontal</enumvalue>
    </member>
  </compound>
  <compound kind="file">
    <name>StateFactory.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/fsm/</path>
    <filename>a00032</filename>
    <includes id="a03392" name="mc_control/fsm/State.h" local="no" imported="no">mc_control/fsm/State.h</includes>
    <includes id="a00368" name="loader.h" local="no" imported="no">mc_rtc/loader.h</includes>
    <class kind="class">mc_control::fsm::StateFactory</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_control</namespace>
    <namespace>mc_control::fsm</namespace>
  </compound>
  <compound kind="file">
    <name>StationaryOffset.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_filter/</path>
    <filename>a00110</filename>
    <includes id="a00098" name="ExponentialMovingAverage.h" local="no" imported="no">mc_filter/ExponentialMovingAverage.h</includes>
    <class kind="struct">mc_filter::StationaryOffset</class>
    <namespace>mc_filter</namespace>
  </compound>
  <compound kind="file">
    <name>StringInput.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/</path>
    <filename>a00350</filename>
    <includes id="a00296" name="elements.h" local="no" imported="no">mc_rtc/gui/elements.h</includes>
    <class kind="struct">mc_rtc::gui::StringInputImpl</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <member kind="function">
      <type>StringInputImpl&lt; GetT, SetT &gt;</type>
      <name>StringInput</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>a4f8c1eb018c71e856f48cee90d7ea65d</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, SetT set_fn)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Surface.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>a00248</filename>
    <includes id="a03350" name="mc_rbdyn/api.h" local="no" imported="no">mc_rbdyn/api.h</includes>
    <class kind="struct">mc_rbdyn::Surface</class>
    <namespace>mc_rbdyn</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Surface &gt;</type>
      <name>SurfacePtr</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>a848cf0b2e8f6ca6f18ceba1769d9a426</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>surface_hull.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>a00251</filename>
    <includes id="a03350" name="mc_rbdyn/api.h" local="no" imported="no">mc_rbdyn/api.h</includes>
    <namespace>sch</namespace>
    <namespace>mc_rbdyn</namespace>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI sch::S_Object *</type>
      <name>surface_to_sch</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>adf1399b68c68126e373f564e95bc7531</anchor>
      <arglist>(const mc_rbdyn::Surface &amp;surface, const double &amp;depth=0.01, const unsigned int &amp;slice=8)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI sch::S_Object *</type>
      <name>sch_polyhedron</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>a3db1776d4f8f36e1eb2a8c51bc157867</anchor>
      <arglist>(const std::vector&lt; sva::PTransformd &gt; &amp;points)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI sch::S_Object *</type>
      <name>planar_hull</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>a96cab2abc78656a41b2b56987c5fbbfa</anchor>
      <arglist>(const mc_rbdyn::PlanarSurface &amp;surface, const double &amp;depth)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI sch::S_Object *</type>
      <name>cylindrical_hull</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>adcd59f0c2e8c9cd94a6f9800c164e723</anchor>
      <arglist>(const mc_rbdyn::CylindricalSurface &amp;surface, const unsigned int &amp;slice)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI sch::S_Object *</type>
      <name>gripper_hull</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>a70b7277a0499a32774e608f8def99043</anchor>
      <arglist>(const mc_rbdyn::GripperSurface &amp;surface, const double &amp;depth)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>surface_utils.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>a00254</filename>
    <includes id="a03350" name="mc_rbdyn/api.h" local="no" imported="no">mc_rbdyn/api.h</includes>
    <namespace>mc_rbdyn</namespace>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI std::vector&lt; std::shared_ptr&lt; Surface &gt; &gt;</type>
      <name>readRSDFFromDir</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>a01a984b0ca29b3b20b799b01e7239a9b</anchor>
      <arglist>(const std::string &amp;dirname)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SurfaceTransformTask.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>a00533</filename>
    <includes id="a00536" name="TrajectoryTaskGeneric.h" local="no" imported="no">mc_tasks/TrajectoryTaskGeneric.h</includes>
    <class kind="struct">mc_tasks::SurfaceTransformTask</class>
    <namespace>mc_tasks</namespace>
  </compound>
  <compound kind="file">
    <name>time_utils.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/</path>
    <filename>a00395</filename>
    <class kind="struct">mc_rtc::measure</class>
    <namespace>mc_rtc</namespace>
    <member kind="typedef">
      <type>measure&lt; std::chrono::duration&lt; double &gt; &gt;</type>
      <name>measure_s</name>
      <anchorfile>a00763.html</anchorfile>
      <anchor>a2553c85ef1b4ffa76b14a245d200b453</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>measure&lt; std::chrono::duration&lt; double, std::milli &gt; &gt;</type>
      <name>measure_ms</name>
      <anchorfile>a00763.html</anchorfile>
      <anchor>a852f3a96e5f08ba4981cc528501f1e8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>measure&lt; std::chrono::duration&lt; double, std::nano &gt; &gt;</type>
      <name>measure_ns</name>
      <anchorfile>a00763.html</anchorfile>
      <anchor>acec9c84f7ea66cc456dfa85636344fb9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>traits.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/details/</path>
    <filename>a00293</filename>
    <class kind="struct">mc_rtc::gui::details::ReturnType</class>
    <class kind="struct">mc_rtc::gui::details::CheckReturnType</class>
    <class kind="struct">mc_rtc::gui::details::CheckReturnType&lt; GetT, T &gt;</class>
    <class kind="struct">mc_rtc::gui::details::CheckReturnType&lt; GetT, T, Args... &gt;</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <namespace>mc_rtc::gui::details</namespace>
    <member kind="typedef">
      <type>typename ReturnType&lt; GetT &gt;::type</type>
      <name>ReturnTypeT</name>
      <anchorfile>a00786.html</anchorfile>
      <anchor>a62d70a1c5467de8404eceee15a80da68</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Trajectory.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/</path>
    <filename>a00353</filename>
    <includes id="a00293" name="traits.h" local="no" imported="no">mc_rtc/gui/details/traits.h</includes>
    <includes id="a00296" name="elements.h" local="no" imported="no">mc_rtc/gui/elements.h</includes>
    <includes id="a00332" name="types.h" local="no" imported="no">mc_rtc/gui/types.h</includes>
    <class kind="struct">mc_rtc::gui::TrajectoryImpl</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <member kind="function">
      <type>TrajectoryImpl&lt; GetT &gt;</type>
      <name>Trajectory</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>a062a5442d4cabf7a31d7f83008751a6a</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>TrajectoryImpl&lt; GetT &gt;</type>
      <name>Trajectory</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>aa175899f8868d419050975dc9f79ed97</anchor>
      <arglist>(const std::string &amp;name, const LineConfig &amp;config, GetT get_fn)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrajectoryTaskGeneric.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>a00536</filename>
    <includes id="a00236" name="Robots.h" local="no" imported="no">mc_rbdyn/Robots.h</includes>
    <includes id="a00389" name="logging.h" local="no" imported="no">mc_rtc/logging.h</includes>
    <includes id="a00446" name="QPSolver.h" local="no" imported="no">mc_solver/QPSolver.h</includes>
    <includes id="a00503" name="MetaTask.h" local="no" imported="no">mc_tasks/MetaTask.h</includes>
    <includes id="a03362" name="mc_tasks/api.h" local="no" imported="no">mc_tasks/api.h</includes>
    <class kind="struct">mc_tasks::TrajectoryTaskGeneric</class>
    <namespace>mc_tasks</namespace>
  </compound>
  <compound kind="file">
    <name>Transform.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/</path>
    <filename>a00356</filename>
    <includes id="a00293" name="traits.h" local="no" imported="no">mc_rtc/gui/details/traits.h</includes>
    <includes id="a00296" name="elements.h" local="no" imported="no">mc_rtc/gui/elements.h</includes>
    <includes id="a00332" name="types.h" local="no" imported="no">mc_rtc/gui/types.h</includes>
    <class kind="struct">mc_rtc::gui::TransformROImpl</class>
    <class kind="struct">mc_rtc::gui::TransformImpl</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <member kind="function">
      <type>TransformROImpl&lt; GetT &gt;</type>
      <name>Transform</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>aa5342b74063b005e6a03efd66adef74e</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>TransformImpl&lt; GetT, SetT &gt;</type>
      <name>Transform</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>a96cb90761dce6d6e3441d779e7184847</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, SetT set_fn)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Transition.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/fsm/</path>
    <filename>a00065</filename>
    <includes id="a03335" name="mc_control/api.h" local="no" imported="no">mc_control/api.h</includes>
    <class kind="class">mc_control::fsm::Transition</class>
    <namespace>mc_control</namespace>
    <namespace>mc_control::fsm</namespace>
  </compound>
  <compound kind="file">
    <name>TransitionMap.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_control/fsm/</path>
    <filename>a00068</filename>
    <includes id="a00032" name="StateFactory.h" local="no" imported="no">mc_control/fsm/StateFactory.h</includes>
    <includes id="a00065" name="Transition.h" local="no" imported="no">mc_control/fsm/Transition.h</includes>
    <includes id="a03338" name="mc_control/fsm/api.h" local="no" imported="no">mc_control/fsm/api.h</includes>
    <class kind="class">mc_control::fsm::TransitionMap</class>
    <namespace>mc_control</namespace>
    <namespace>mc_control::fsm</namespace>
  </compound>
  <compound kind="file">
    <name>type_name.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/</path>
    <filename>a00398</filename>
    <includes id="a00401" name="utils_api.h" local="no" imported="no">mc_rtc/utils_api.h</includes>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::internal</namespace>
    <member kind="function">
      <type>MC_RTC_UTILS_DLLAPI std::string</type>
      <name>demangle</name>
      <anchorfile>a00781.html</anchorfile>
      <anchor>af017e274f3cf4699850fdbf753d07fa2</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>type_name</name>
      <anchorfile>a00763.html</anchorfile>
      <anchor>a8fb61bc6391bc9cd0ef2aa0efff2d641</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>plot/types.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/plot/</path>
    <filename>a03398</filename>
    <includes id="a00332" name="types.h" local="no" imported="no">mc_rtc/gui/types.h</includes>
    <class kind="struct">mc_rtc::gui::plot::Range</class>
    <class kind="struct">mc_rtc::gui::plot::AxisConfiguration</class>
    <class kind="struct">mc_rtc::gui::plot::PolygonDescription</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <namespace>mc_rtc::gui::plot</namespace>
    <member kind="enumeration">
      <type></type>
      <name>Plot</name>
      <anchorfile>a00787.html</anchorfile>
      <anchor>ae8d436e1212bee55dfdb14d50b0d6be9</anchor>
      <arglist></arglist>
      <enumvalue file="a00787.html" anchor="ae8d436e1212bee55dfdb14d50b0d6be9aeb6d8ae6f20283755b339c0dc273988b">Standard</enumvalue>
      <enumvalue file="a00787.html" anchor="ae8d436e1212bee55dfdb14d50b0d6be9a74c53bcd3dcb2bb79993b2fec37d362a">XY</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>a00787.html</anchorfile>
      <anchor>a6e2b70125fa1d433838b9a8f2bf28c4d</anchor>
      <arglist></arglist>
      <enumvalue file="a00787.html" anchor="a6e2b70125fa1d433838b9a8f2bf28c4dac9812e629ac3822b86f7c19704983d0e">Abscissa</enumvalue>
      <enumvalue file="a00787.html" anchor="a6e2b70125fa1d433838b9a8f2bf28c4da5d32a72e2819aaf62362fcc862b37c5e">Ordinate</enumvalue>
      <enumvalue file="a00787.html" anchor="a6e2b70125fa1d433838b9a8f2bf28c4da4c0a11247d92f73fb84baa51e37a3263">Polygon</enumvalue>
      <enumvalue file="a00787.html" anchor="a6e2b70125fa1d433838b9a8f2bf28c4daa7a7e14b2a005870ba134e6c92bb7b51">Polygons</enumvalue>
      <enumvalue file="a00787.html" anchor="a6e2b70125fa1d433838b9a8f2bf28c4dab83f39f54c4bd7f3a02f9a45fd996031">AbscissaOrdinate</enumvalue>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_Abscissa</name>
      <anchorfile>a00787.html</anchorfile>
      <anchor>a73e5c8e2228efe9d85770fa3233df148</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_Abscissa</name>
      <anchorfile>a00787.html</anchorfile>
      <anchor>ad9dd006fddf621ad45bc2ed39819cb7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_Abscissa</name>
      <anchorfile>a00787.html</anchorfile>
      <anchor>a4b35e42f9bdc831051bad630befc19d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_2d</name>
      <anchorfile>a00787.html</anchorfile>
      <anchor>a4670673e25f4957cc8b1d6933601fbb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_2d</name>
      <anchorfile>a00787.html</anchorfile>
      <anchor>a37afa0ee1be4dc35f8b370b58cd05c8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>Solid</name>
      <anchorfile>a03398.html</anchorfile>
      <anchor>ae070f931bda093c33a301115abc450b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>Dotted</name>
      <anchorfile>a03398.html</anchorfile>
      <anchor>af050e39a625ecaa0d27537968bbeeaff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>Dashed</name>
      <anchorfile>a03398.html</anchorfile>
      <anchor>a3aa6973802ff89463140e58e4978b222</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>Left</name>
      <anchorfile>a03398.html</anchorfile>
      <anchor>aa149c1d1da2ae1c94f1ae91f4919625a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>types.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/</path>
    <filename>a00332</filename>
    <includes id="a03371" name="mc_rtc/Configuration.h" local="no" imported="no">mc_rtc/Configuration.h</includes>
    <includes id="a03356" name="mc_rtc/gui/api.h" local="no" imported="no">mc_rtc/gui/api.h</includes>
    <includes id="a00389" name="logging.h" local="no" imported="no">mc_rtc/logging.h</includes>
    <class kind="struct">mc_rtc::gui::Color</class>
    <class kind="struct">mc_rtc::gui::LineConfig</class>
    <class kind="struct">mc_rtc::gui::ArrowConfig</class>
    <class kind="struct">mc_rtc::gui::ForceConfig</class>
    <class kind="struct">mc_rtc::gui::PointConfig</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <member kind="enumeration">
      <type></type>
      <name>LineStyle</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>a23166295a3983f35cb0fa510b4c156c9</anchor>
      <arglist></arglist>
      <enumvalue file="a00785.html" anchor="a23166295a3983f35cb0fa510b4c156c9ae41480b6bbfbf7407974a88d3d34f4fa">Solid</enumvalue>
      <enumvalue file="a00785.html" anchor="a23166295a3983f35cb0fa510b4c156c9a90c09393a4c0970bc9a6703ad527781c">Dotted</enumvalue>
    </member>
  </compound>
  <compound kind="file">
    <name>Update.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_solver/utils/</path>
    <filename>a00455</filename>
    <includes id="a00452" name="ContactWrenchMatrixToLambdaMatrix.h" local="no" imported="no">mc_solver/utils/ContactWrenchMatrixToLambdaMatrix.h</includes>
    <includes id="a00458" name="UpdateNrVars.h" local="no" imported="no">mc_solver/utils/UpdateNrVars.h</includes>
    <class kind="struct">mc_solver::utils::UpdateTag</class>
    <class kind="struct">mc_solver::utils::Update</class>
    <class kind="struct">mc_solver::utils::IsUpdate</class>
    <class kind="struct">mc_solver::utils::UpdateForce</class>
    <namespace>mc_solver</namespace>
    <namespace>mc_solver::utils</namespace>
    <member kind="typedef">
      <type>Update&lt; UpdateNrVarsRobot &gt;</type>
      <name>UpdateRobot</name>
      <anchorfile>a00794.html</anchorfile>
      <anchor>a3fef857fcf6a819b7f8061f33248d0b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Update&lt; UpdateNrVarsLambda &gt;</type>
      <name>UpdateLambda</name>
      <anchorfile>a00794.html</anchorfile>
      <anchor>a51609ca39a4099935af3983ff08a0c50</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>UpdateNrVars.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_solver/utils/</path>
    <filename>a00458</filename>
    <includes id="a03359" name="mc_solver/api.h" local="no" imported="no">mc_solver/api.h</includes>
    <class kind="struct">mc_solver::utils::UpdateNrVarsData</class>
    <class kind="struct">mc_solver::utils::UpdateNrVarsRobot</class>
    <class kind="struct">mc_solver::utils::UpdateNrVarsLambda</class>
    <namespace>mc_solver</namespace>
    <namespace>mc_solver::utils</namespace>
  </compound>
  <compound kind="file">
    <name>log/utils.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/log/</path>
    <filename>a03401</filename>
    <includes id="a00392" name="MessagePackBuilder.h" local="no" imported="no">mc_rtc/MessagePackBuilder.h</includes>
    <class kind="struct">mc_rtc::log::GetLogType</class>
    <class kind="struct">mc_rtc::log::GetLogType&lt; std::vector&lt; double, A &gt; &gt;</class>
    <class kind="struct">mc_rtc::log::is_serializable</class>
    <class kind="struct">mc_rtc::log::callback_is_serializable</class>
    <class kind="struct">mc_rtc::log::LogWriter</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::log</namespace>
    <member kind="define">
      <type>#define</type>
      <name>IMPL_MAPPING</name>
      <anchorfile>a03401.html</anchorfile>
      <anchor>a5e23e6dc4a586d5ce355088cf563b4b9</anchor>
      <arglist>(CPPT, ENUMV)</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>LogType</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>ae623e7dc6e6722fd48752713664b3549</anchor>
      <arglist></arglist>
      <enumvalue file="a00790.html" anchor="ae623e7dc6e6722fd48752713664b3549a6adf97f83acf6453d4a6a4b1070f3754">None</enumvalue>
      <enumvalue file="a00790.html" anchor="ae623e7dc6e6722fd48752713664b3549ac26f15e86e3de4c398a8273272aba034">Bool</enumvalue>
      <enumvalue file="a00790.html" anchor="ae623e7dc6e6722fd48752713664b3549a310554dc6901f24b84131602f5aa7728">Int8_t</enumvalue>
      <enumvalue file="a00790.html" anchor="ae623e7dc6e6722fd48752713664b3549a52b8419558c2745bb3f452f5dba89c0e">Int16_t</enumvalue>
      <enumvalue file="a00790.html" anchor="ae623e7dc6e6722fd48752713664b3549a31da5bff69db770ab36fc4197417eb6e">Int32_t</enumvalue>
      <enumvalue file="a00790.html" anchor="ae623e7dc6e6722fd48752713664b3549a6ee9244c64454706197c23f12163b3e4">Int64_t</enumvalue>
      <enumvalue file="a00790.html" anchor="ae623e7dc6e6722fd48752713664b3549aaa8a6d419e8de319fc0fb8151154a3c8">Uint8_t</enumvalue>
      <enumvalue file="a00790.html" anchor="ae623e7dc6e6722fd48752713664b3549a2cf01fdc4d5b4b49bd5531cea84517ae">Uint16_t</enumvalue>
      <enumvalue file="a00790.html" anchor="ae623e7dc6e6722fd48752713664b3549a114753c09137e486b349fb7ded3a738e">Uint32_t</enumvalue>
      <enumvalue file="a00790.html" anchor="ae623e7dc6e6722fd48752713664b3549a752da4dabeb6a21c46c62388107f2b53">Uint64_t</enumvalue>
      <enumvalue file="a00790.html" anchor="ae623e7dc6e6722fd48752713664b3549a22ae0e2b89e5e3d477f988cc36d3272b">Float</enumvalue>
      <enumvalue file="a00790.html" anchor="ae623e7dc6e6722fd48752713664b3549ad909d38d705ce75386dd86e611a82f5b">Double</enumvalue>
      <enumvalue file="a00790.html" anchor="ae623e7dc6e6722fd48752713664b3549a27118326006d3829667a400ad23d5d98">String</enumvalue>
      <enumvalue file="a00790.html" anchor="ae623e7dc6e6722fd48752713664b3549ae9b0a766c9aba1f88f69157593dcade3">Vector2d</enumvalue>
      <enumvalue file="a00790.html" anchor="ae623e7dc6e6722fd48752713664b3549abd18c4378a1b42df9061eb5bd43755c9">Vector3d</enumvalue>
      <enumvalue file="a00790.html" anchor="ae623e7dc6e6722fd48752713664b3549ada57d50e3cb02d10e15d0dab71fb846f">Vector6d</enumvalue>
      <enumvalue file="a00790.html" anchor="ae623e7dc6e6722fd48752713664b3549ab2e07f7f9214839944e939b29de2252b">VectorXd</enumvalue>
      <enumvalue file="a00790.html" anchor="ae623e7dc6e6722fd48752713664b3549a9dea906d4e9243ea050120f8f4a1f1c9">Quaterniond</enumvalue>
      <enumvalue file="a00790.html" anchor="ae623e7dc6e6722fd48752713664b3549a2ec69636c565a422c59d7fc675bcd836">PTransformd</enumvalue>
      <enumvalue file="a00790.html" anchor="ae623e7dc6e6722fd48752713664b3549a9fd99a0871090c0c75a35ac57944e044">ForceVecd</enumvalue>
      <enumvalue file="a00790.html" anchor="ae623e7dc6e6722fd48752713664b3549a08efd42d00b69280268271026472b237">MotionVecd</enumvalue>
      <enumvalue file="a00790.html" anchor="ae623e7dc6e6722fd48752713664b3549a18f1829c8dab599745c7d5bc84585aa2">VectorDouble</enumvalue>
    </member>
    <member kind="function">
      <type>const char **</type>
      <name>LogTypeNames</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>a9979086ae04c2369f6ea39d42ec2fcb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>LogTypeName</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>a6351f9d1bb2bb7f8f3508cc9f0e36e5e</anchor>
      <arglist>(LogType t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>a9aa92bc1668b9218bf395ae4fc92e795</anchor>
      <arglist>(bool, Bool)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>a4a530e246a423018eb4757de9a38fe0a</anchor>
      <arglist>(int8_t, Int8_t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>a701b7606804a3db8de4c0e7a52d928c0</anchor>
      <arglist>(int16_t, Int16_t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>a2bf6ab72f6469b3269f31e5bba5a2e53</anchor>
      <arglist>(int32_t, Int32_t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>a8bfaf29781e441da25c30cbeba3acf09</anchor>
      <arglist>(int64_t, Int64_t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>a9e592f5c13ba9f39d5b1a71a53bdfd8e</anchor>
      <arglist>(uint8_t, Uint8_t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>a70fc3b45c7d5e2602b6c0967efa4b4f0</anchor>
      <arglist>(uint16_t, Uint16_t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>a5725243119abb09aa142128b7fc9f40f</anchor>
      <arglist>(uint32_t, Uint32_t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>ad6b297b2129cec68c11ffa52c448d8ae</anchor>
      <arglist>(uint64_t, Uint64_t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>a7349ebfd4a26447bfa3c1d087924b8ed</anchor>
      <arglist>(float, Float)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>a254cbef473857a8f7300c4893e025070</anchor>
      <arglist>(double, Double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>a209c2c06d48dddd58e98eb20b6537fbf</anchor>
      <arglist>(std::string, String)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>a3832207f7dfe9bb0a76bd55c40141aa0</anchor>
      <arglist>(Eigen::Vector2d, Vector2d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>a8a95695038f7381e9ff63fb77021fe22</anchor>
      <arglist>(Eigen::Vector3d, Vector3d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>abde1c442a27ca22960f0a2c42c12e1e5</anchor>
      <arglist>(Eigen::Vector6d, Vector6d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>a40e42a14f68a8cacf3f5c14bdc235422</anchor>
      <arglist>(Eigen::VectorXd, VectorXd)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>a77ff7d3e9889df9292a6575c95b473a8</anchor>
      <arglist>(Eigen::Quaterniond, Quaterniond)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>a85a6ea306358c1ae94b79e65b22cb252</anchor>
      <arglist>(sva::PTransformd, PTransformd)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>a42e9d70a432b1bc02a1f5dcff729bfb5</anchor>
      <arglist>(sva::ForceVecd, ForceVecd)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>a70d34eabb941deeb9f0dea2280ae1201</anchor>
      <arglist>(sva::MotionVecd, MotionVecd)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>utils.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/</path>
    <filename>a00386</filename>
    <includes id="a00389" name="logging.h" local="no" imported="no">mc_rtc/logging.h</includes>
  </compound>
  <compound kind="file">
    <name>utils_api.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/</path>
    <filename>a00401</filename>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_UTILS_VERSION</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>a46af0212489d0be9e68321c07f865e45</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_UTILS_DLLIMPORT</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>a8c714e5ec4642ad2fbeb874ec1ea290c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_UTILS_DLLEXPORT</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>a59b21389e495a6b42899eea7452bde3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_UTILS_DLLLOCAL</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>ac847eca5b9bc55005276d08214aad7ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_UTILS_DLLAPI</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>a797d67eb3213978212928ed90cf0dff2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MC_RTC_UTILS_LOCAL</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>af3c7cdf1557399d0a6334aef3b20a746</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VectorOrientationTask.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/</path>
    <filename>a00539</filename>
    <includes id="a00536" name="TrajectoryTaskGeneric.h" local="no" imported="no">mc_tasks/TrajectoryTaskGeneric.h</includes>
    <class kind="struct">mc_tasks::VectorOrientationTask</class>
    <namespace>mc_tasks</namespace>
  </compound>
  <compound kind="file">
    <name>XYTheta.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rtc/gui/</path>
    <filename>a00359</filename>
    <includes id="a00293" name="traits.h" local="no" imported="no">mc_rtc/gui/details/traits.h</includes>
    <includes id="a00296" name="elements.h" local="no" imported="no">mc_rtc/gui/elements.h</includes>
    <includes id="a00332" name="types.h" local="no" imported="no">mc_rtc/gui/types.h</includes>
    <class kind="struct">mc_rtc::gui::XYThetaROImpl</class>
    <class kind="struct">mc_rtc::gui::XYThetaImpl</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <member kind="function">
      <type>XYThetaROImpl&lt; GetT &gt;</type>
      <name>XYTheta</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>aaaa2ebe2ecb490f266fe541318646561</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>XYThetaImpl&lt; GetT, SetT &gt;</type>
      <name>XYTheta</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>a98fa40132858d1d9c0091acb36ce9f32</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, SetT set_fn)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mc_rbdyn/ZMP.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/</path>
    <filename>a03404</filename>
    <includes id="a03350" name="mc_rbdyn/api.h" local="no" imported="no">mc_rbdyn/api.h</includes>
    <namespace>mc_rbdyn</namespace>
    <member kind="function">
      <type>Eigen::Vector3d MC_RBDYN_DLLAPI</type>
      <name>zmp</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>a329453006944dae96fa60d86dca66db8</anchor>
      <arglist>(const sva::ForceVecd &amp;netTotalWrench, const Eigen::Vector3d &amp;plane_p, const Eigen::Vector3d &amp;plane_n, double minimalNetNormalForce=1.)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d MC_RBDYN_DLLAPI</type>
      <name>zmp</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>aa9d4155584b04e51fdb5c24f5739fc24</anchor>
      <arglist>(const sva::ForceVecd &amp;netTotalWrench, const sva::PTransformd &amp;zmpFrame, double minimalNetNormalForce=1.)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mc_solver/msg/ZMP.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_solver/msg/</path>
    <filename>a03407</filename>
    <class kind="struct">mc_solver::ZMP</class>
    <namespace>mc_solver</namespace>
  </compound>
  <compound kind="file">
    <name>ZMPCC.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_tasks/lipm_stabilizer/</path>
    <filename>a00494</filename>
    <includes id="a00101" name="LeakyIntegrator.h" local="no" imported="no">mc_filter/LeakyIntegrator.h</includes>
    <includes id="a00209" name="ZMPCCConfiguration.h" local="no" imported="no">mc_rbdyn/lipm_stabilizer/ZMPCCConfiguration.h</includes>
    <class kind="struct">mc_tasks::lipm_stabilizer::ZMPCC</class>
    <namespace>mc_rtc</namespace>
    <namespace>mc_rtc::gui</namespace>
    <namespace>mc_tasks</namespace>
    <namespace>mc_tasks::lipm_stabilizer</namespace>
  </compound>
  <compound kind="file">
    <name>ZMPCCConfiguration.h</name>
    <path>/home/runner/work/mc_rtc/mc_rtc/include/mc_rbdyn/lipm_stabilizer/</path>
    <filename>a00209</filename>
    <includes id="a03350" name="mc_rbdyn/api.h" local="no" imported="no">mc_rbdyn/api.h</includes>
    <includes id="a03371" name="mc_rtc/Configuration.h" local="no" imported="no">mc_rtc/Configuration.h</includes>
    <class kind="struct">mc_rbdyn::lipm_stabilizer::ZMPCCConfiguration</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; mc_rbdyn::lipm_stabilizer::ZMPCCConfiguration &gt;</class>
    <namespace>mc_rbdyn</namespace>
    <namespace>mc_rbdyn::lipm_stabilizer</namespace>
    <namespace>mc_rtc</namespace>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::internal::_has_configuration_load_object</name>
    <filename>a01793.html</filename>
    <member kind="function" static="yes">
      <type>static std::true_type</type>
      <name>test</name>
      <anchorfile>a01793.html</anchorfile>
      <anchor>a7df8b2b030c0677a4cea0ea0a86c3e22</anchor>
      <arglist>(T *p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::false_type</type>
      <name>test</name>
      <anchorfile>a01793.html</anchorfile>
      <anchor>aaf07ac07f94d666ac90926acc0816ee5</anchor>
      <arglist>(...)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::internal::_has_configuration_save_object</name>
    <filename>a01801.html</filename>
    <member kind="function" static="yes">
      <type>static std::true_type</type>
      <name>test</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a2620f7e45fb564c548f34b045d2694e7</anchor>
      <arglist>(T *p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::false_type</type>
      <name>test</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a4baa69ec78f3c15e6563f9416632b4c3</anchor>
      <arglist>(...)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::plot::impl::Abscissa</name>
    <filename>a01981.html</filename>
    <templarg>GetT</templarg>
    <member kind="function">
      <type></type>
      <name>Abscissa</name>
      <anchorfile>a01981.html</anchorfile>
      <anchor>a57a4c02713024e53ec4043123cab4c50</anchor>
      <arglist>(AxisConfiguration config, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a01981.html</anchorfile>
      <anchor>ad46e2e46e2c4e130880c831cf3df8d07</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder) const</arglist>
    </member>
    <member kind="function">
      <type>Abscissa &amp;</type>
      <name>range</name>
      <anchorfile>a01981.html</anchorfile>
      <anchor>a86d5bd8a471e0f85217fd8a6872c89ca</anchor>
      <arglist>(const Range &amp;range)</arglist>
    </member>
    <member kind="function">
      <type>Abscissa &amp;</type>
      <name>min</name>
      <anchorfile>a01981.html</anchorfile>
      <anchor>aabf95601f4cd3af4b63249bd327f2148</anchor>
      <arglist>(double min)</arglist>
    </member>
    <member kind="function">
      <type>Abscissa &amp;</type>
      <name>max</name>
      <anchorfile>a01981.html</anchorfile>
      <anchor>a190355057411d2e31f821dbb45afcf96</anchor>
      <arglist>(double max)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Type</type>
      <name>type</name>
      <anchorfile>a01981.html</anchorfile>
      <anchor>a74de98c8a1157861357192b66f451241</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::plot::impl::AbscissaOrdinate</name>
    <filename>a01985.html</filename>
    <templarg>GetXT</templarg>
    <templarg>GetYT</templarg>
    <member kind="function">
      <type></type>
      <name>AbscissaOrdinate</name>
      <anchorfile>a01985.html</anchorfile>
      <anchor>a59782a8bb1c04dbaf888856985d7273d</anchor>
      <arglist>(const std::string &amp;name, GetXT get_x_fn, GetYT get_y_fn, Color color, Style style, Side side)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a01985.html</anchorfile>
      <anchor>a3356c8e13777a41231e4a53f60a0e14c</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder) const</arglist>
    </member>
    <member kind="function">
      <type>AbscissaOrdinate &amp;</type>
      <name>style</name>
      <anchorfile>a01985.html</anchorfile>
      <anchor>a9298450fcf5a9549db2df14dc6223e4a</anchor>
      <arglist>(Style style)</arglist>
    </member>
    <member kind="function">
      <type>AbscissaOrdinate &amp;</type>
      <name>side</name>
      <anchorfile>a01985.html</anchorfile>
      <anchor>ac412c96504ea09d32b3f19e18e0fca0b</anchor>
      <arglist>(Side side)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Type</type>
      <name>type</name>
      <anchorfile>a01985.html</anchorfile>
      <anchor>a13fb99d2e08099b6c7d7738e8bdd31fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>name_</name>
      <anchorfile>a01985.html</anchorfile>
      <anchor>af7bfde3739ae017ceb6db526762ca6aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GetXT</type>
      <name>get_x_fn_</name>
      <anchorfile>a01985.html</anchorfile>
      <anchor>a06bb63c46c89243d82cbcb4a7323a3cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GetYT</type>
      <name>get_y_fn_</name>
      <anchorfile>a01985.html</anchorfile>
      <anchor>ade656f6138f2fd579ad5670c5afac13b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Color</type>
      <name>color_</name>
      <anchorfile>a01985.html</anchorfile>
      <anchor>a86c83c91843a11a26a3404ddb7b4437b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Style</type>
      <name>style_</name>
      <anchorfile>a01985.html</anchorfile>
      <anchor>ad56c269ffbd0cbf144af4b4ff066bd59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Side</type>
      <name>side_</name>
      <anchorfile>a01985.html</anchorfile>
      <anchor>ae33beeb0efca412dd64fcbad5e984c48</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::plot::impl::AbscissaOrdinateWithColor</name>
    <filename>a01989.html</filename>
    <templarg>GetXT</templarg>
    <templarg>GetYT</templarg>
    <templarg>GetColor</templarg>
    <base>mc_rtc::gui::plot::impl::AbscissaOrdinate</base>
    <member kind="function">
      <type></type>
      <name>AbscissaOrdinateWithColor</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>abd61cc0d2ea75882f75a5f54f9047a0f</anchor>
      <arglist>(const std::string &amp;name, GetXT get_x, GetYT get_y, GetColor color, Style style, Side side)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>a3d6f033510ac8d8a5a05b56adf3c19e2</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::AddContactTask</name>
    <filename>a02337.html</filename>
    <base>mc_tasks::AddRemoveContactTask</base>
    <member kind="function">
      <type></type>
      <name>AddContactTask</name>
      <anchorfile>a02337.html</anchorfile>
      <anchor>ae6e667b644d14474374570f60a1a8f6f</anchor>
      <arglist>(mc_rbdyn::Robots &amp;robots, std::shared_ptr&lt; mc_solver::BoundedSpeedConstr &gt; constSpeedConstr, mc_rbdyn::Contact &amp;contact, double speed=0.01, double stiffness=2, double weight=1000, Eigen::Vector3d *userT_0_s=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AddContactTask</name>
      <anchorfile>a02337.html</anchorfile>
      <anchor>a3300a38ebe7922a02dec8a5efb99d718</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, mc_rbdyn::Contact &amp;contact, double speed=0.01, double stiffness=2, double weight=1000, Eigen::Vector3d *userT_0_s=nullptr)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_control::fsm::AddRemoveContactState</name>
    <filename>a01421.html</filename>
    <base>mc_control::fsm::State</base>
    <member kind="function">
      <type></type>
      <name>AddRemoveContactState</name>
      <anchorfile>a01421.html</anchorfile>
      <anchor>acc53f1acf266f32644d1a6c3b7c996a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AddRemoveContactState</name>
      <anchorfile>a01421.html</anchorfile>
      <anchor>a42e535cede2f88a26609cb298ae9d62c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configure</name>
      <anchorfile>a01421.html</anchorfile>
      <anchor>af0432348ace1dfdbcf46acca4c53c859</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a01421.html</anchorfile>
      <anchor>a2e3305b90c679d3f53a5d1473dd557f3</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a01421.html</anchorfile>
      <anchor>a88a669bde8f5bcdfb31560b7f4e3d39c</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>teardown</name>
      <anchorfile>a01421.html</anchorfile>
      <anchor>a40c9854b8c479f9a572ef9c1795eb516</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unique_ptr&lt; AddRemoveContactStateImpl &gt;</type>
      <name>impl_</name>
      <anchorfile>a01421.html</anchorfile>
      <anchor>a8921148d58f33c039fe655ad12c6fbb2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::AddRemoveContactTask</name>
    <filename>a02333.html</filename>
    <base>mc_tasks::MetaTask</base>
    <member kind="function">
      <type></type>
      <name>AddRemoveContactTask</name>
      <anchorfile>a02333.html</anchorfile>
      <anchor>a3e8f9e6f159cb1e62bd9b933342f985e</anchor>
      <arglist>(mc_rbdyn::Robots &amp;robots, std::shared_ptr&lt; mc_solver::BoundedSpeedConstr &gt; constSpeedConstr, mc_rbdyn::Contact &amp;contact, double direction, double speed=0.01, double stiffness=2, double weight=1000, Eigen::Vector3d *userT_0_s=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AddRemoveContactTask</name>
      <anchorfile>a02333.html</anchorfile>
      <anchor>a68be02e1630f484884e60e3ec249f662</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, mc_rbdyn::Contact &amp;contact, double direction, double speed=0.01, double stiffness=2, double weight=1000, Eigen::Vector3d *userT_0_s=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>direction</name>
      <anchorfile>a02333.html</anchorfile>
      <anchor>a6cc87c0025db4a70501d92f6c24b09e8</anchor>
      <arglist>(double direction)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>speed</name>
      <anchorfile>a02333.html</anchorfile>
      <anchor>a92268af15885043be699e14dc3683fda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>speed</name>
      <anchorfile>a02333.html</anchorfile>
      <anchor>ae60e21511e6e1379af325184a7459781</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stiffness</name>
      <anchorfile>a02333.html</anchorfile>
      <anchor>a48baadecb63cdda817bda05f6e8f1bfa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weight</name>
      <anchorfile>a02333.html</anchorfile>
      <anchor>a94e15cb317d7a258015b7eabfb2a1109</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>velError</name>
      <anchorfile>a02333.html</anchorfile>
      <anchor>ac356d531abfb403e1d7f66fcb3189bce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dimWeight</name>
      <anchorfile>a02333.html</anchorfile>
      <anchor>a83923c85bfda96b94c2d2a8b793ab798</anchor>
      <arglist>(const Eigen::VectorXd &amp;dimW) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Eigen::VectorXd</type>
      <name>dimWeight</name>
      <anchorfile>a02333.html</anchorfile>
      <anchor>a2ca17fc43a9a8acce7e7e1d975d33385</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Eigen::VectorXd</type>
      <name>eval</name>
      <anchorfile>a02333.html</anchorfile>
      <anchor>af45fc0604c6dbf8742fcbf5f29555b7e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Eigen::VectorXd</type>
      <name>speed</name>
      <anchorfile>a02333.html</anchorfile>
      <anchor>a8e14709c98129124ee03c631274b6afe</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable">
      <type>mc_rbdyn::Robots &amp;</type>
      <name>robots</name>
      <anchorfile>a02333.html</anchorfile>
      <anchor>ac370293e74d26c6c14fe3ff593de45f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mc_rbdyn::Robot &amp;</type>
      <name>robot</name>
      <anchorfile>a02333.html</anchorfile>
      <anchor>aaf9b93ac2b2b32e8e3f12d6ed84b5d01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mc_rbdyn::Robot &amp;</type>
      <name>env</name>
      <anchorfile>a02333.html</anchorfile>
      <anchor>a98b07421e0322187bb0e5fae5b595f1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; mc_solver::BoundedSpeedConstr &gt;</type>
      <name>constSpeedConstr</name>
      <anchorfile>a02333.html</anchorfile>
      <anchor>ab421f9378ae251f53925cf179825626e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; mc_rbdyn::Surface &gt;</type>
      <name>robotSurf</name>
      <anchorfile>a02333.html</anchorfile>
      <anchor>a03082e63152e83579e4cb7aed4bc05bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>robotBodyIndex</name>
      <anchorfile>a02333.html</anchorfile>
      <anchor>a9fe42ac857795cdd634819a17a5238b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sva::PTransformd</type>
      <name>targetTf</name>
      <anchorfile>a02333.html</anchorfile>
      <anchor>a7dac96a0da2ff21be423cc30af924827</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>bodyId</name>
      <anchorfile>a02333.html</anchorfile>
      <anchor>a8846f1a33c20ed70bf425b49027aba12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::MatrixXd</type>
      <name>dofMat</name>
      <anchorfile>a02333.html</anchorfile>
      <anchor>ae0fae793050143ac0f684c83e8146b23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::VectorXd</type>
      <name>speedMat</name>
      <anchorfile>a02333.html</anchorfile>
      <anchor>ae14972bb1047cfc306dc198a6cb2a09a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::Vector3d</type>
      <name>normal</name>
      <anchorfile>a02333.html</anchorfile>
      <anchor>ac46066f1cc163f34fcbb8c45e7593536</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>stiffness_</name>
      <anchorfile>a02333.html</anchorfile>
      <anchor>ad4c4be286affbb126d787a5356e7bf96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>weight_</name>
      <anchorfile>a02333.html</anchorfile>
      <anchor>a24cf1f1758dde72e116fc9038e9ccf3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>speed_</name>
      <anchorfile>a02333.html</anchorfile>
      <anchor>afcdad65af3391e9059dbfac1db885679</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>direction_</name>
      <anchorfile>a02333.html</anchorfile>
      <anchor>aa408d0703b72d18dc3337fe383bcd840</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::Vector3d</type>
      <name>targetSpeed</name>
      <anchorfile>a02333.html</anchorfile>
      <anchor>acdd2290d6e07d8778d1bb92feb96d973</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; tasks::qp::LinVelocityTask &gt;</type>
      <name>linVelTask</name>
      <anchorfile>a02333.html</anchorfile>
      <anchor>a3e1fc72abbc657ece8ae16faafaffeff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; tasks::qp::PIDTask &gt;</type>
      <name>linVelTaskPid</name>
      <anchorfile>a02333.html</anchorfile>
      <anchor>a114af5b6d97905968a79dce1bc86f0ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>targetVelWeight</name>
      <anchorfile>a02333.html</anchorfile>
      <anchor>a2b3721e007480a543c292855d83ee315</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::force::AdmittanceTask</name>
    <filename>a02345.html</filename>
    <base>mc_tasks::SurfaceTransformTask</base>
    <member kind="function">
      <type>EIGEN_MAKE_ALIGNED_OPERATOR_NEW</type>
      <name>AdmittanceTask</name>
      <anchorfile>a02345.html</anchorfile>
      <anchor>ababaa90033e00d09b1372d4bb7f618d9</anchor>
      <arglist>(const std::string &amp;robotSurface, const mc_rbdyn::Robots &amp;robots, unsigned robotIndex, double stiffness=5.0, double weight=1000.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a02345.html</anchorfile>
      <anchor>a052349477335695173c7765bbac00210</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>const sva::ForceVecd &amp;</type>
      <name>admittance</name>
      <anchorfile>a02345.html</anchorfile>
      <anchor>abaa1066a123da76ad55c064c860b96d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>admittance</name>
      <anchorfile>a02345.html</anchorfile>
      <anchor>a856da07a6437955a17e20b42ef8de0d0</anchor>
      <arglist>(const sva::ForceVecd &amp;admittance)</arglist>
    </member>
    <member kind="function">
      <type>sva::PTransformd</type>
      <name>surfacePose</name>
      <anchorfile>a02345.html</anchorfile>
      <anchor>a3958c43db37f34168e7b0b370d8edf23</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sva::PTransformd</type>
      <name>targetPose</name>
      <anchorfile>a02345.html</anchorfile>
      <anchor>a78745a07e09888ac0774f99fb5e82041</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>targetPose</name>
      <anchorfile>a02345.html</anchorfile>
      <anchor>aafc8ff52e25c57da0c710ef842cdd6a0</anchor>
      <arglist>(const sva::PTransformd &amp;X_0_target)</arglist>
    </member>
    <member kind="function">
      <type>sva::PTransformd</type>
      <name>poseError</name>
      <anchorfile>a02345.html</anchorfile>
      <anchor>abe93dbf1a3b1401e71ba92c861d55aa5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sva::ForceVecd &amp;</type>
      <name>targetWrench</name>
      <anchorfile>a02345.html</anchorfile>
      <anchor>ae8a55ef8c9d0173de5004c2dc8c3f1d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>targetWrenchW</name>
      <anchorfile>a02345.html</anchorfile>
      <anchor>aef645fa9420f6fbef7e29b6bf3d15888</anchor>
      <arglist>(const sva::ForceVecd &amp;wrenchW)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>targetWrench</name>
      <anchorfile>a02345.html</anchorfile>
      <anchor>ab0d0b00e2dea87d27d130d2c88f1361c</anchor>
      <arglist>(const sva::ForceVecd &amp;wrench)</arglist>
    </member>
    <member kind="function">
      <type>sva::ForceVecd</type>
      <name>measuredWrench</name>
      <anchorfile>a02345.html</anchorfile>
      <anchor>ac887e6bd95fbafc40c1c4e4465b95b7e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>maxLinearVel</name>
      <anchorfile>a02345.html</anchorfile>
      <anchor>a99d636ebeb1f79aa4cc09409cb1456a1</anchor>
      <arglist>(const Eigen::Vector3d &amp;maxLinearVel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>maxAngularVel</name>
      <anchorfile>a02345.html</anchorfile>
      <anchor>a1a82a23ac354e6e380ecd7803e790d27</anchor>
      <arglist>(const Eigen::Vector3d &amp;maxAngularVel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refVelB</name>
      <anchorfile>a02345.html</anchorfile>
      <anchor>a530f67ea3aaa3fc0437aa72940de1143</anchor>
      <arglist>(const sva::MotionVecd &amp;velB)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>a02345.html</anchorfile>
      <anchor>a11f68c4af2082ba57141752b3036e0f1</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const mc_rtc::Configuration &amp;config) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02345.html</anchorfile>
      <anchor>aebc49ae7f9bf32ddfc48b8c64b238ff2</anchor>
      <arglist>(mc_solver::QPSolver &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::function&lt; bool(const mc_tasks::MetaTask &amp;task, std::string &amp;)&gt;</type>
      <name>buildCompletionCriteria</name>
      <anchorfile>a02345.html</anchorfile>
      <anchor>a341dbedb9368d583f45b7e3ca8bda8cd</anchor>
      <arglist>(double dt, const mc_rtc::Configuration &amp;config) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>a02345.html</anchorfile>
      <anchor>a7340c5f14c1ba117ec60046742b3e9ad</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;gui) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToLogger</name>
      <anchorfile>a02345.html</anchorfile>
      <anchor>ad8f353f9df118e8fc859bc5ee80a41c9</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeFromLogger</name>
      <anchorfile>a02345.html</anchorfile>
      <anchor>a2a74f0a62a272f2c01332345f1974f3f</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToSolver</name>
      <anchorfile>a02345.html</anchorfile>
      <anchor>a9e4af3978acf95b18cb58842898ff266</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>maxAngularVel_</name>
      <anchorfile>a02345.html</anchorfile>
      <anchor>afad98878cf6e7f64980a3b743ed76a7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>maxLinearVel_</name>
      <anchorfile>a02345.html</anchorfile>
      <anchor>af4e15b0d348fae4b9f335f30e2a077b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const mc_rbdyn::Robots &amp;</type>
      <name>robots_</name>
      <anchorfile>a02345.html</anchorfile>
      <anchor>ad63efb656ede4ea8b139489cf7ed50ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>rIndex_</name>
      <anchorfile>a02345.html</anchorfile>
      <anchor>a658941cdb929605537a9c8fd740138f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>timestep_</name>
      <anchorfile>a02345.html</anchorfile>
      <anchor>ae1d5d0caedd77b293454ad6209ff6617</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const mc_rbdyn::Surface &amp;</type>
      <name>surface_</name>
      <anchorfile>a02345.html</anchorfile>
      <anchor>ac854c2ff4e850e265a8b18d2e92df0ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::ForceVecd</type>
      <name>admittance_</name>
      <anchorfile>a02345.html</anchorfile>
      <anchor>afec1507c00f7ab6e535c856c4e6c258e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::ForceVecd</type>
      <name>targetWrench_</name>
      <anchorfile>a02345.html</anchorfile>
      <anchor>a3433b288829da956de5f93c99dc12870</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::ForceVecd</type>
      <name>wrenchError_</name>
      <anchorfile>a02345.html</anchorfile>
      <anchor>af66ad4d439b2cdfd9b6dc8bf7603cef3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::MotionVecd</type>
      <name>feedforwardVelB_</name>
      <anchorfile>a02345.html</anchorfile>
      <anchor>a626218531c0140a6ce6b3efa2c2b840b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::MotionVecd</type>
      <name>refVelB_</name>
      <anchorfile>a02345.html</anchorfile>
      <anchor>a2eeb8d4440242d2c4526226e15efaf87</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::internal::Allocator</name>
    <filename>a01845.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::internal::Allocator&lt; T, typename T::eigen_aligned_operator_new_marker_type &gt;</name>
    <filename>a01849.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::details::are_strings</name>
    <filename>a01737.html</filename>
    <templarg>Args</templarg>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::details::are_strings&lt; T &gt;</name>
    <filename>a01741.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::details::are_strings&lt; T, Args... &gt;</name>
    <filename>a01745.html</filename>
    <templarg></templarg>
    <templarg>Args</templarg>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::internal::args_t</name>
    <filename>a01841.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>typename std::decay&lt; T &gt;::type</type>
      <name>decay_t</name>
      <anchorfile>a01841.html</anchorfile>
      <anchor>a5b8154625caf14c4dcc919d071c7ba46</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::conditional&lt; is_arithmetic, decay_t, T &gt;::type</type>
      <name>type</name>
      <anchorfile>a01841.html</anchorfile>
      <anchor>a0b4ee875f9490a7d6bef544143160904</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>is_arithmetic</name>
      <anchorfile>a01841.html</anchorfile>
      <anchor>a63d9d0405b36451f9c9441f71e3642f6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::ArrayInputImpl</name>
    <filename>a01865.html</filename>
    <templarg>GetT</templarg>
    <templarg>SetT</templarg>
    <base>mc_rtc::gui::CommonInputImpl</base>
    <member kind="function">
      <type></type>
      <name>ArrayInputImpl</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>aa25c4430a4386d5d792f4cb6614f87bb</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, SetT set_fn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayInputImpl</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>ac26b5be350a65134eda4f0719f2328d8</anchor>
      <arglist>(const std::string &amp;name, const std::vector&lt; std::string &gt; &amp;labels, GetT get_fn, SetT set_fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>aec0a1f87e9dbf0e954634ca4d9e17922</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;writer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayInputImpl</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a91070d8d8f19e1ee2ae32c3438184647</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a497495027c99ecdbbb5c015283d008a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>ac0959fbabfc2ed01f4c312d1f807791f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::ArrayLabelImpl</name>
    <filename>a01869.html</filename>
    <templarg>GetT</templarg>
    <base>mc_rtc::gui::LabelImpl</base>
    <member kind="function">
      <type></type>
      <name>ArrayLabelImpl</name>
      <anchorfile>a01869.html</anchorfile>
      <anchor>a11eeb4f728745ce49936ade3b34d4efe</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayLabelImpl</name>
      <anchorfile>a01869.html</anchorfile>
      <anchor>aad484a9e2c383641335beb67a978c088</anchor>
      <arglist>(const std::string &amp;name, const std::vector&lt; std::string &gt; &amp;labels, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayLabelImpl</name>
      <anchorfile>a01869.html</anchorfile>
      <anchor>a02d3815aeb09dea7b6fa6a19d1128fb2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a01869.html</anchorfile>
      <anchor>a94beffccdc20b934bba9da0653e84961</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;writer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>a01869.html</anchorfile>
      <anchor>ad160afb68a84367222d9ddaf3da0e5d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>a01869.html</anchorfile>
      <anchor>adb6228965c592d3ef019d87703f41aaf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::ArrowConfig</name>
    <filename>a02081.html</filename>
    <member kind="function">
      <type></type>
      <name>ArrowConfig</name>
      <anchorfile>a02081.html</anchorfile>
      <anchor>afee2c97534d0d32230344946009da5fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrowConfig</name>
      <anchorfile>a02081.html</anchorfile>
      <anchor>a596d68e4143fa44e40e6a78f5c35c87f</anchor>
      <arglist>(const Color &amp;color)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrowConfig</name>
      <anchorfile>a02081.html</anchorfile>
      <anchor>aa6c4a9f2dcf5a907df36d24c9160f620</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>a02081.html</anchorfile>
      <anchor>a8bca97cb476f2c8ff2a192dfd7dc70a6</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02081.html</anchorfile>
      <anchor>a8d9de052a5467447e3241d1222fd6fb1</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;out) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>a02081.html</anchorfile>
      <anchor>a4f03733ede37fe30d20a308f6d7d5abe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>head_diam</name>
      <anchorfile>a02081.html</anchorfile>
      <anchor>a26256e219f431d46b0294dae46f9a080</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>head_len</name>
      <anchorfile>a02081.html</anchorfile>
      <anchor>a79bdd719f1213d5d0649b7ea1182b559</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>shaft_diam</name>
      <anchorfile>a02081.html</anchorfile>
      <anchor>a863ad38d78a492d921944bd9093a8f83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>scale</name>
      <anchorfile>a02081.html</anchorfile>
      <anchor>afa8c14add2dbeefbebee6a86217bfc4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>start_point_scale</name>
      <anchorfile>a02081.html</anchorfile>
      <anchor>ad8499dc509f0c00ce757ed3bb46e2797</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>end_point_scale</name>
      <anchorfile>a02081.html</anchorfile>
      <anchor>a8769d2834d86e27f4dfcfac6dcb1a44f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Color</type>
      <name>color</name>
      <anchorfile>a02081.html</anchorfile>
      <anchor>a7a0b446420b034cf38470ae68b35ed7c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::ArrowImpl</name>
    <filename>a01877.html</filename>
    <templarg>GetStart</templarg>
    <templarg>SetStart</templarg>
    <templarg>GetEnd</templarg>
    <templarg>SetEnd</templarg>
    <base>mc_rtc::gui::ArrowROImpl</base>
    <member kind="function">
      <type></type>
      <name>ArrowImpl</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>aa433a79021362f7338be283a44f58cf6</anchor>
      <arglist>(const std::string &amp;name, const ArrowConfig &amp;config, GetStart get_start_fn, SetStart set_start_fn, GetEnd get_end_fn, SetEnd set_end_fn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrowImpl</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>a477913abc68cc99cddaf4496166dc412</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>a3d992464bca9a200b481434aecc0c7a5</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>handleRequest</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>a106e8180fe61c6a91023ffb29f06ee98</anchor>
      <arglist>(const mc_rtc::Configuration &amp;data)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::ArrowROImpl</name>
    <filename>a01873.html</filename>
    <templarg>GetStart</templarg>
    <templarg>GetEnd</templarg>
    <base>mc_rtc::gui::Element</base>
    <member kind="function">
      <type></type>
      <name>ArrowROImpl</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a2931391d13181c75b69b122a0977a4a3</anchor>
      <arglist>(const std::string &amp;name, const ArrowConfig &amp;config, GetStart get_start_fn, GetEnd get_end_fn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrowROImpl</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>ab3973c42d423404df611627b43a1197f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a7840f5c07db4b91e69e7a4b54fcc1a4f</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder, bool ro=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a057d3112dd2282d30d59514ce55fdb3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a20358219220c836e9e56f425c9f33390</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::plot::AxisConfiguration</name>
    <filename>a02013.html</filename>
    <member kind="function">
      <type></type>
      <name>AxisConfiguration</name>
      <anchorfile>a02013.html</anchorfile>
      <anchor>a6a8051c2000069f6e38ef3f25d8a4086</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AxisConfiguration</name>
      <anchorfile>a02013.html</anchorfile>
      <anchor>a656136780fbda0d82b1ff16905c46f5e</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AxisConfiguration</name>
      <anchorfile>a02013.html</anchorfile>
      <anchor>a82913efc5cd9675f38e17f98bde85e7f</anchor>
      <arglist>(Range range)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AxisConfiguration</name>
      <anchorfile>a02013.html</anchorfile>
      <anchor>a9e0fde8a6e63e1f3a21bbb9f946b9dcc</anchor>
      <arglist>(const std::string &amp;name, Range range)</arglist>
    </member>
    <member kind="function">
      <type>AxisConfiguration &amp;</type>
      <name>min</name>
      <anchorfile>a02013.html</anchorfile>
      <anchor>af4a1ad6155619aa6f1d2ab8feec617c3</anchor>
      <arglist>(double min)</arglist>
    </member>
    <member kind="function">
      <type>AxisConfiguration &amp;</type>
      <name>max</name>
      <anchorfile>a02013.html</anchorfile>
      <anchor>a57dec2715d846f093cfdd059378880f9</anchor>
      <arglist>(double max)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>a02013.html</anchorfile>
      <anchor>a0c01d0dfa7133defe27e167dc147689f</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02013.html</anchorfile>
      <anchor>a4b812f4837d01d6a931c415e518f67fb</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder) const</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>a02013.html</anchorfile>
      <anchor>a639c7393b6f1f870cb1a6128ba9536ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Range</type>
      <name>range</name>
      <anchorfile>a02013.html</anchorfile>
      <anchor>a1d461d7275261bd5c496e415a523bd89</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::Base</name>
    <filename>a01621.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>baseName</name>
      <anchorfile>a01621.html</anchorfile>
      <anchor>a29e3501c76c5f562000ea4c144bcb92e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sva::PTransformd</type>
      <name>X_0_s</name>
      <anchorfile>a01621.html</anchorfile>
      <anchor>ae50130e4a7f74e88220617d3080c65ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sva::PTransformd</type>
      <name>X_b0_s</name>
      <anchorfile>a01621.html</anchorfile>
      <anchor>a4fed34226bcc4165ddc6f39fab4dfacb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>rbd::Joint::Type</type>
      <name>baseType</name>
      <anchorfile>a01621.html</anchorfile>
      <anchor>aefd54756f82332b9155a61cea33d8cc3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::BodySensor</name>
    <filename>a01625.html</filename>
    <base>mc_rbdyn::Device</base>
    <member kind="function">
      <type>EIGEN_MAKE_ALIGNED_OPERATOR_NEW</type>
      <name>BodySensor</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a0ccd7feb3cb52abec8d65b3da9df4989</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BodySensor</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a44f050d481291a6015f3a5423e5098fe</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;bodyName, const sva::PTransformd &amp;X_b_s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BodySensor</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>ab9ffa63a5396c7eb000ea7fbf716d086</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>parentBody</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>ab5d6323b65ec6e712804d0c8590c8b55</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>X_b_s</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>adb95b5d1ba5be5b51912cfc058f2371d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>position</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a2be6a3b9c958d75d4c4310418356e014</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>position</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a644c0b250aaa8890d6b8f9ea26f2afb6</anchor>
      <arglist>(const Eigen::Vector3d &amp;position)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Quaterniond &amp;</type>
      <name>orientation</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>abcf42c2151733e3ef80c9594cb37a43a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>orientation</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a9544ac0b6bb997b65db638bf52b2d5a3</anchor>
      <arglist>(const Eigen::Quaterniond &amp;orientation)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>linearVelocity</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>ad01dc341ccff4cab51488c3cbffe21ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linearVelocity</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a0df07b5cdfd86d18be2227182bb2aec2</anchor>
      <arglist>(const Eigen::Vector3d &amp;linear_velocity)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>angularVelocity</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a0a4ae01169db62588ed207fa0b60b117</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>angularVelocity</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>aaf978a01b2013293156e3a825b58f868</anchor>
      <arglist>(const Eigen::Vector3d &amp;angular_velocity)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>acceleration</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a9ddd4e669bf23bc6d3ec7428a1f030ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceleration</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a47391dc54a7bfcfc505a52c8352d066c</anchor>
      <arglist>(const Eigen::Vector3d &amp;acceleration)</arglist>
    </member>
    <member kind="function">
      <type>DevicePtr</type>
      <name>clone</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a636b6a07fb613352e458b6636fcf240f</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_observers::BodySensorObserver</name>
    <filename>a01537.html</filename>
    <base>mc_observers::Observer</base>
    <member kind="function">
      <type></type>
      <name>BodySensorObserver</name>
      <anchorfile>a01537.html</anchorfile>
      <anchor>aad52d430f0c328c986a14d2a8a9a7b17</anchor>
      <arglist>(const std::string &amp;name, double dt, const mc_rtc::Configuration &amp;config={})</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a01537.html</anchorfile>
      <anchor>a23564250186a2e8780df9150945dad63</anchor>
      <arglist>(const mc_control::MCController &amp;ctl) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a01537.html</anchorfile>
      <anchor>a2a497aef03e071004c926032776ac520</anchor>
      <arglist>(const mc_control::MCController &amp;ctl) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateRobots</name>
      <anchorfile>a01537.html</anchorfile>
      <anchor>aa499d558eec971e714a924f1fb9d0722</anchor>
      <arglist>(const mc_control::MCController &amp;ctl, mc_rbdyn::Robots &amp;realRobots) override</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>posW</name>
      <anchorfile>a01537.html</anchorfile>
      <anchor>a40a80d57f8974b3af7d4f65df95161ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sva::MotionVecd &amp;</type>
      <name>velW</name>
      <anchorfile>a01537.html</anchorfile>
      <anchor>a96afc25baaad80aa4c09d6619eb3be56</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToLogger</name>
      <anchorfile>a01537.html</anchorfile>
      <anchor>a164f25654c0fc7ef6d08e5c052260445</anchor>
      <arglist>(const mc_control::MCController &amp;ctl, mc_rtc::Logger &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromLogger</name>
      <anchorfile>a01537.html</anchorfile>
      <anchor>aa36833218c888dbeee8d98e4994d43f1</anchor>
      <arglist>(mc_rtc::Logger &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>a01537.html</anchorfile>
      <anchor>abf71106c03fdf82b9e342a51bd7f4ea6</anchor>
      <arglist>(const mc_control::MCController &amp;ctl, mc_rtc::gui::StateBuilder &amp;) override</arglist>
    </member>
    <member kind="enumeration" protection="protected">
      <type></type>
      <name>Update</name>
      <anchorfile>a01537.html</anchorfile>
      <anchor>ace7a5ef240bc42d89053419e8718eba3</anchor>
      <arglist></arglist>
      <enumvalue file="a01537.html" anchor="ace7a5ef240bc42d89053419e8718eba3aa1595abbb4c3a326636dd178757cd6c1">Control</enumvalue>
      <enumvalue file="a01537.html" anchor="ace7a5ef240bc42d89053419e8718eba3ada2a1b654dd8965375b17b81a0874e1d">Estimator</enumvalue>
    </member>
    <member kind="variable" protection="protected">
      <type>Update</type>
      <name>updateFrom_</name>
      <anchorfile>a01537.html</anchorfile>
      <anchor>a41e24212545815c92909fc647cfd4d75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>fbSensorName_</name>
      <anchorfile>a01537.html</anchorfile>
      <anchor>a66d2fa568fd183d424b8b45488fe5c87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::PTransformd</type>
      <name>posW_</name>
      <anchorfile>a01537.html</anchorfile>
      <anchor>a7b67ccbf5ae607a9ed7227d64825d4fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::MotionVecd</type>
      <name>velW_</name>
      <anchorfile>a01537.html</anchorfile>
      <anchor>a4d5cc646377a58ef243bf1d6b8c10f5e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_solver::BoundedSpeedConstr</name>
    <filename>a02173.html</filename>
    <base>mc_solver::ConstraintSet</base>
    <member kind="function">
      <type></type>
      <name>BoundedSpeedConstr</name>
      <anchorfile>a02173.html</anchorfile>
      <anchor>a43af0872dd664d13d864053d3ecfda18</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, double dt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addToSolver</name>
      <anchorfile>a02173.html</anchorfile>
      <anchor>a54adcdc90cc41a64a9723b693f8beb1b</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, tasks::qp::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeFromSolver</name>
      <anchorfile>a02173.html</anchorfile>
      <anchor>a0214a46d2452e2dcf610bbf44f863019</anchor>
      <arglist>(tasks::qp::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addBoundedSpeed</name>
      <anchorfile>a02173.html</anchorfile>
      <anchor>abcd47fff771a0c7357bd5b682398b3df</anchor>
      <arglist>(QPSolver &amp;solver, const std::string &amp;bodyName, const Eigen::Vector3d &amp;bodyPoint, const Eigen::MatrixXd &amp;dof, const Eigen::VectorXd &amp;speed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addBoundedSpeed</name>
      <anchorfile>a02173.html</anchorfile>
      <anchor>aff11f05b8b3f2139db8ae2d95ce4afee</anchor>
      <arglist>(QPSolver &amp;solver, const std::string &amp;bodyName, const Eigen::Vector3d &amp;bodyPoint, const Eigen::MatrixXd &amp;dof, const Eigen::VectorXd &amp;lowerSpeed, const Eigen::VectorXd &amp;upperSpeed)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeBoundedSpeed</name>
      <anchorfile>a02173.html</anchorfile>
      <anchor>a5b85799a5bb8df9c5344cd9d3f630708</anchor>
      <arglist>(QPSolver &amp;solver, const std::string &amp;bodyName)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nrBoundedSpeeds</name>
      <anchorfile>a02173.html</anchorfile>
      <anchor>a70c84d6defba583690d9175ca4cf192d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a02173.html</anchorfile>
      <anchor>ab0fffcd8e01c61ced64cf5371999acb7</anchor>
      <arglist>(QPSolver &amp;solver)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_trajectory::BSpline</name>
    <filename>a02465.html</filename>
    <base>Spline&lt; Eigen::Vector3d, std::vector&lt; Eigen::Vector3d &gt; &gt;</base>
    <member kind="typedef">
      <type>spline::bezier_curve&lt; double, double, 3, false, Eigen::Vector3d &gt;</type>
      <name>bezier_curve_t</name>
      <anchorfile>a02465.html</anchorfile>
      <anchor>a58fe236423f0abd51af3cdcb50017a47</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Eigen::Vector3d &gt;</type>
      <name>waypoints_t</name>
      <anchorfile>a02465.html</anchorfile>
      <anchor>ada383daeac50ae7ac8b720c6096289f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSpline</name>
      <anchorfile>a02465.html</anchorfile>
      <anchor>a905828c45debcac32ddbd35718a138a1</anchor>
      <arglist>(double duration, const Eigen::Vector3d &amp;start, const Eigen::Vector3d &amp;target, const waypoints_t &amp;waypoints={})</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02465.html</anchorfile>
      <anchor>ab70108d4c7af3ce67b487bcbe11cab5d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Eigen::Vector3d &gt;</type>
      <name>splev</name>
      <anchorfile>a02465.html</anchorfile>
      <anchor>ae72e0f0db1744ff5a1e7ea8c8a832d5a</anchor>
      <arglist>(double t, unsigned int der=0)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Eigen::Vector3d &gt;</type>
      <name>sampleTrajectory</name>
      <anchorfile>a02465.html</anchorfile>
      <anchor>ac34c7879cd2d0a941a6b303c366d16f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>a02465.html</anchorfile>
      <anchor>a206f674c4f9e666083f9aa96b27b7628</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;gui, const std::vector&lt; std::string &gt; &amp;category)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::BSplineTrajectoryTask</name>
    <filename>a02349.html</filename>
    <base>SplineTrajectoryTask&lt; BSplineTrajectoryTask &gt;</base>
    <member kind="typedef">
      <type>SplineTrajectoryTask&lt; BSplineTrajectoryTask &gt;</type>
      <name>SplineTrajectoryBase</name>
      <anchorfile>a02349.html</anchorfile>
      <anchor>a81d5a557b19cceddeb5fe7911db9dceb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>mc_trajectory::BSpline::waypoints_t</type>
      <name>waypoints_t</name>
      <anchorfile>a02349.html</anchorfile>
      <anchor>a669d5fdec2578c135db701bba1727403</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSplineTrajectoryTask</name>
      <anchorfile>a02349.html</anchorfile>
      <anchor>aeb967476c50f3838e13951e0f3d9527c</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, const std::string &amp;surfaceName, double duration, double stiffness, double weight, const sva::PTransformd &amp;target, const waypoints_t &amp;posWp={}, const std::vector&lt; std::pair&lt; double, Eigen::Matrix3d &gt;&gt; &amp;oriWp={})</arglist>
    </member>
    <member kind="function">
      <type>const mc_trajectory::BSpline &amp;</type>
      <name>spline</name>
      <anchorfile>a02349.html</anchorfile>
      <anchor>a81a378c092ca9206ea9fa9e14448e979</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>mc_trajectory::BSpline &amp;</type>
      <name>spline</name>
      <anchorfile>a02349.html</anchorfile>
      <anchor>a57429fbfc25ba22a34d9881f54b76121</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>a02349.html</anchorfile>
      <anchor>a5c4c24081d3cfc9ba7d61097f97c968e</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;gui)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>posWaypoints</name>
      <anchorfile>a02349.html</anchorfile>
      <anchor>a60f2ef40ea951b8d1b9235dbfda346ca</anchor>
      <arglist>(const waypoints_t &amp;posWp)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>targetPos</name>
      <anchorfile>a02349.html</anchorfile>
      <anchor>a559bf605e5d3ee712f3beb4ca867daf0</anchor>
      <arglist>(const Eigen::Vector3d &amp;target)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Eigen::Vector3d &amp;</type>
      <name>targetPos</name>
      <anchorfile>a02349.html</anchorfile>
      <anchor>a9c6b5bc01bbaa882d10178076867265e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_trajectory::BSpline</type>
      <name>bspline</name>
      <anchorfile>a02349.html</anchorfile>
      <anchor>ac881b5b505b63c5e89bec2e598c767e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>SplineTrajectoryTask&lt; BSplineTrajectoryTask &gt;</name>
      <anchorfile>a02349.html</anchorfile>
      <anchor>ac5eeec3b2af2e5d3a329daf981453a2e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::ButtonImpl</name>
    <filename>a01881.html</filename>
    <templarg>Callback</templarg>
    <base>VoidCallbackElement&lt; Element, Callback &gt;</base>
    <member kind="function">
      <type></type>
      <name>ButtonImpl</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a6a2a14b50f174bfa4b780b9ce5b1f6d2</anchor>
      <arglist>(const std::string &amp;name, Callback cb, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ButtonImpl</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a7000759c96ebcc16419cae8ff7cb311f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ac31b264c88f746ffcf7579b769d5fc8a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::log::callback_is_serializable</name>
    <filename>a02153.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>typename std::result_of&lt; T()&gt;::type</type>
      <name>ret_type</name>
      <anchorfile>a02153.html</anchorfile>
      <anchor>a38207f8c1014c4e1b2ebb310e3ceb551</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::decay&lt; ret_type &gt;::type</type>
      <name>base_type</name>
      <anchorfile>a02153.html</anchorfile>
      <anchor>a36029a9801c5ca972f21e626ea554174</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>value</name>
      <anchorfile>a02153.html</anchorfile>
      <anchor>aad0ab42aac325e0fa19a1a82d853288b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::CallbackElement</name>
    <filename>a01921.html</filename>
    <templarg>ElementT</templarg>
    <templarg>Callback</templarg>
    <member kind="function">
      <type>bool</type>
      <name>handleRequest</name>
      <anchorfile>a01921.html</anchorfile>
      <anchor>a405f276989aeae1fd599f46e0458e10f</anchor>
      <arglist>(const mc_rtc::Configuration &amp;data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CallbackElement</name>
      <anchorfile>a01921.html</anchorfile>
      <anchor>a26a8cb0f6a61d3442fca7f11d29f57d2</anchor>
      <arglist>(const std::string &amp;name, Callback cb, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CallbackElement</name>
      <anchorfile>a01921.html</anchorfile>
      <anchor>ae9ef12835522d27b5d1a55210b0c973c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Callback</type>
      <name>cb_</name>
      <anchorfile>a01921.html</anchorfile>
      <anchor>a872fb77b757c4074529ce4847ba4dc17</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CallbackElement&lt; DataElement&lt; GetT &gt;, Callback &gt;</name>
    <filename>a01921.html</filename>
    <base>mc_rtc::gui::DataElement</base>
    <member kind="function">
      <type>bool</type>
      <name>handleRequest</name>
      <anchorfile>a01921.html</anchorfile>
      <anchor>a405f276989aeae1fd599f46e0458e10f</anchor>
      <arglist>(const mc_rtc::Configuration &amp;data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CallbackElement</name>
      <anchorfile>a01921.html</anchorfile>
      <anchor>a26a8cb0f6a61d3442fca7f11d29f57d2</anchor>
      <arglist>(const std::string &amp;name, Callback cb, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CallbackElement</name>
      <anchorfile>a01921.html</anchorfile>
      <anchor>ae9ef12835522d27b5d1a55210b0c973c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Callback</type>
      <name>cb_</name>
      <anchorfile>a01921.html</anchorfile>
      <anchor>a872fb77b757c4074529ce4847ba4dc17</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CallbackElement&lt; DataElement&lt; GetT &gt;, SetT &gt;</name>
    <filename>a01921.html</filename>
    <base>mc_rtc::gui::DataElement</base>
    <member kind="function">
      <type>bool</type>
      <name>handleRequest</name>
      <anchorfile>a01921.html</anchorfile>
      <anchor>a405f276989aeae1fd599f46e0458e10f</anchor>
      <arglist>(const mc_rtc::Configuration &amp;data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CallbackElement</name>
      <anchorfile>a01921.html</anchorfile>
      <anchor>a26a8cb0f6a61d3442fca7f11d29f57d2</anchor>
      <arglist>(const std::string &amp;name, SetT cb, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CallbackElement</name>
      <anchorfile>a01921.html</anchorfile>
      <anchor>ae9ef12835522d27b5d1a55210b0c973c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SetT</type>
      <name>cb_</name>
      <anchorfile>a01921.html</anchorfile>
      <anchor>a872fb77b757c4074529ce4847ba4dc17</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CallbackElement&lt; Element, Callback &gt;</name>
    <filename>a01921.html</filename>
    <base>mc_rtc::gui::Element</base>
    <member kind="function">
      <type>bool</type>
      <name>handleRequest</name>
      <anchorfile>a01921.html</anchorfile>
      <anchor>a405f276989aeae1fd599f46e0458e10f</anchor>
      <arglist>(const mc_rtc::Configuration &amp;data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CallbackElement</name>
      <anchorfile>a01921.html</anchorfile>
      <anchor>a26a8cb0f6a61d3442fca7f11d29f57d2</anchor>
      <arglist>(const std::string &amp;name, Callback cb, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CallbackElement</name>
      <anchorfile>a01921.html</anchorfile>
      <anchor>ae9ef12835522d27b5d1a55210b0c973c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Callback</type>
      <name>cb_</name>
      <anchorfile>a01921.html</anchorfile>
      <anchor>a872fb77b757c4074529ce4847ba4dc17</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::CheckboxImpl</name>
    <filename>a01885.html</filename>
    <templarg>GetT</templarg>
    <templarg>Callback</templarg>
    <base>VoidCallbackElement&lt; DataElement&lt; GetT &gt;, Callback &gt;</base>
    <member kind="function">
      <type></type>
      <name>CheckboxImpl</name>
      <anchorfile>a01885.html</anchorfile>
      <anchor>a2be8a9d91abdab7867e3ef29903aa18a</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, Callback cb)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CheckboxImpl</name>
      <anchorfile>a01885.html</anchorfile>
      <anchor>a49e606784d3c5c64ebf3dc493491e99d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>a01885.html</anchorfile>
      <anchor>a39f960415eb48979416b212d6f08c453</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::details::CheckReturnType</name>
    <filename>a01901.html</filename>
    <templarg></templarg>
    <templarg>Args</templarg>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>value</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>a1cd446713edcf2fe36d5ac75ab1a46ce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::details::CheckReturnType&lt; GetT, T &gt;</name>
    <filename>a01905.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>value</name>
      <anchorfile>a01905.html</anchorfile>
      <anchor>adffa0057cdc8db7d17518647ecdaae3f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::details::CheckReturnType&lt; GetT, T, Args... &gt;</name>
    <filename>a01909.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>Args</templarg>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>value</name>
      <anchorfile>a01909.html</anchorfile>
      <anchor>ae2a3213c436d7248322db80b601c9747</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_planning::motion_interpolator::ClampedCubicSpline</name>
    <filename>a01561.html</filename>
    <templarg></templarg>
    <base>mc_planning::motion_interpolator::CubicSplineBase</base>
    <member kind="function">
      <type></type>
      <name>ClampedCubicSpline</name>
      <anchorfile>a01561.html</anchorfile>
      <anchor>a363f8cf48dad98287656235f9e3570a7</anchor>
      <arglist>(const double &amp;scale=1.0, const double &amp;eps=1.0e-3)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setSplineCoeff</name>
      <anchorfile>a01561.html</anchorfile>
      <anchor>a204ae47403bf002885988ac91e40d694</anchor>
      <arglist>(unsigned int n_base, unsigned int n_segment, unsigned int n_offset)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::Collision</name>
    <filename>a01629.html</filename>
    <member kind="function">
      <type></type>
      <name>Collision</name>
      <anchorfile>a01629.html</anchorfile>
      <anchor>afaef9be2f1209c8cc63876f13b8da184</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Collision</name>
      <anchorfile>a01629.html</anchorfile>
      <anchor>a212f22fc390d0f873dc67244cdbdbce7</anchor>
      <arglist>(const std::string &amp;b1, const std::string &amp;b2, double i, double s, double d)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNone</name>
      <anchorfile>a01629.html</anchorfile>
      <anchor>a664a8719f81b8fee2d2b26cd3cf645ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01629.html</anchorfile>
      <anchor>aab32d2891597a9ec0d7f76e3dd0723a9</anchor>
      <arglist>(const Collision &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a01629.html</anchorfile>
      <anchor>a4f990041663f252046812111a6791048</anchor>
      <arglist>(const Collision &amp;rhs) const</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>body1</name>
      <anchorfile>a01629.html</anchorfile>
      <anchor>a169addbd06a09743b06287121884f027</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>body2</name>
      <anchorfile>a01629.html</anchorfile>
      <anchor>afde353de6419a4e248eec0851f664968</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>iDist</name>
      <anchorfile>a01629.html</anchorfile>
      <anchor>a4e96ac27cda155ffddb1222ff08f012c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>sDist</name>
      <anchorfile>a01629.html</anchorfile>
      <anchor>a2853ab9ab669747303ccda6b22bb7d77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>damping</name>
      <anchorfile>a01629.html</anchorfile>
      <anchor>affd388406c44197c32f6685e64d7bdb9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Collision</name>
    <filename>a02485.html</filename>
  </compound>
  <compound kind="class">
    <name>mc_solver::CollisionsConstraint</name>
    <filename>a02177.html</filename>
    <base>mc_solver::ConstraintSet</base>
    <member kind="function">
      <type></type>
      <name>CollisionsConstraint</name>
      <anchorfile>a02177.html</anchorfile>
      <anchor>a9a46b2c285695e166eefc0814938e2b4</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, unsigned int r1Index, unsigned int r2Index, double timeStep)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeCollision</name>
      <anchorfile>a02177.html</anchorfile>
      <anchor>abd70fa0653a8fbdc8d9e397694340626</anchor>
      <arglist>(QPSolver &amp;solver, const std::string &amp;b1Name, const std::string &amp;b2Name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeCollisions</name>
      <anchorfile>a02177.html</anchorfile>
      <anchor>a0e5e400e748c70619be1602764431b5f</anchor>
      <arglist>(QPSolver &amp;solver, const std::vector&lt; mc_rbdyn::Collision &gt; &amp;cols)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeCollisionByBody</name>
      <anchorfile>a02177.html</anchorfile>
      <anchor>a5f5f7b094d049ef78ceaba70868db1f4</anchor>
      <arglist>(QPSolver &amp;solver, const std::string &amp;byName, const std::string &amp;b2Name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCollision</name>
      <anchorfile>a02177.html</anchorfile>
      <anchor>a63ceff121b62162d0817026e7177767e</anchor>
      <arglist>(QPSolver &amp;solver, const mc_rbdyn::Collision &amp;col)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCollisions</name>
      <anchorfile>a02177.html</anchorfile>
      <anchor>a9908fdb932f5228faf0e508f9db37edd</anchor>
      <arglist>(QPSolver &amp;solver, const std::vector&lt; mc_rbdyn::Collision &gt; &amp;cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a02177.html</anchorfile>
      <anchor>a3234964e5bd5e0bd73e62f507f1880c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addToSolver</name>
      <anchorfile>a02177.html</anchorfile>
      <anchor>ad35e4c70b095a3dd62bcc640f5fc3cae</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, tasks::qp::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeFromSolver</name>
      <anchorfile>a02177.html</anchorfile>
      <anchor>ad7757edd53edcdbda1ba8da7513acc74</anchor>
      <arglist>(tasks::qp::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CollisionsConstraint</name>
      <anchorfile>a02177.html</anchorfile>
      <anchor>a65a16e95f788ae679f6aa0bf67d0ec10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; tasks::qp::CollisionConstr &gt;</type>
      <name>collConstr</name>
      <anchorfile>a02177.html</anchorfile>
      <anchor>aeb19fca872f0ad264f1babf3fcb19da8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>r1Index</name>
      <anchorfile>a02177.html</anchorfile>
      <anchor>a0fbd97c53f4fb31297e1abd61fa304b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>r2Index</name>
      <anchorfile>a02177.html</anchorfile>
      <anchor>a0dc1390b5fc625595ded740a9e12afd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; mc_rbdyn::Collision &gt;</type>
      <name>cols</name>
      <anchorfile>a02177.html</anchorfile>
      <anchor>a8f2dea27de0d2763cf96505ecac6f61c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>defaultDampingOffset</name>
      <anchorfile>a02177.html</anchorfile>
      <anchor>a53ad175e22679ab9924f71ad573fd87a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::Color</name>
    <filename>a02073.html</filename>
    <member kind="function">
      <type></type>
      <name>Color</name>
      <anchorfile>a02073.html</anchorfile>
      <anchor>a6bf0c09177e7f1b669b9adb92c419e31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Color</name>
      <anchorfile>a02073.html</anchorfile>
      <anchor>a6617b4f252dcb3740631c1bcdaa3cb67</anchor>
      <arglist>(double r, double g, double b, double a=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Color</name>
      <anchorfile>a02073.html</anchorfile>
      <anchor>aeb57adc472b6fb0a69bf7a10b5f5594a</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a02073.html</anchorfile>
      <anchor>a88f0c62ce52e458e2b1e43df4b276cee</anchor>
      <arglist>(const Color &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a02073.html</anchorfile>
      <anchor>a35449e25ee188f7eb035bde4cdbb9585</anchor>
      <arglist>(const Color &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>a02073.html</anchorfile>
      <anchor>a00c78ad570966b39179e645a01992d48</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02073.html</anchorfile>
      <anchor>a978da973c4ae23ee6eb6024cdd25e601</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>a02073.html</anchorfile>
      <anchor>a87e4816568409dd6a11a288a9007e1d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>r</name>
      <anchorfile>a02073.html</anchorfile>
      <anchor>af5fa54af25cd633fec4abb5cd14c0b17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>g</name>
      <anchorfile>a02073.html</anchorfile>
      <anchor>acf401312f7e9a75003519e34206904f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>b</name>
      <anchorfile>a02073.html</anchorfile>
      <anchor>a19f305fdd38fecd3a8fb92282afd9291</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>a</name>
      <anchorfile>a02073.html</anchorfile>
      <anchor>ab9713e13336d4780ae324ca7d2b3f06d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Color</type>
      <name>White</name>
      <anchorfile>a02073.html</anchorfile>
      <anchor>a5f5e172d9bab5c0466a472a29524624c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Color</type>
      <name>Black</name>
      <anchorfile>a02073.html</anchorfile>
      <anchor>a30bf9fd63c97d6aafcba351ef24623ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Color</type>
      <name>Red</name>
      <anchorfile>a02073.html</anchorfile>
      <anchor>a3d0adbf54f2e20cb7b501ba72c8f7276</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Color</type>
      <name>Green</name>
      <anchorfile>a02073.html</anchorfile>
      <anchor>abdba78af0ed851bf27d15fed39883f8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Color</type>
      <name>Blue</name>
      <anchorfile>a02073.html</anchorfile>
      <anchor>a5a61a49e6fc3a4164027706e24071ae3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Color</type>
      <name>Cyan</name>
      <anchorfile>a02073.html</anchorfile>
      <anchor>af871b9eafcbda49196e2fceeae7333f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Color</type>
      <name>Magenta</name>
      <anchorfile>a02073.html</anchorfile>
      <anchor>a7c21a98320c6d79a3e8d64fec9574d3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Color</type>
      <name>Yellow</name>
      <anchorfile>a02073.html</anchorfile>
      <anchor>aea41af05139ca52503e824b2021d372a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Color</type>
      <name>Gray</name>
      <anchorfile>a02073.html</anchorfile>
      <anchor>a4f74e46e6c7c8bcc08298e143ffeb25d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Color</type>
      <name>LightGray</name>
      <anchorfile>a02073.html</anchorfile>
      <anchor>a3df51c77219b7e3811b711250de18017</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::ComboInputImpl</name>
    <filename>a01889.html</filename>
    <templarg>GetT</templarg>
    <templarg>SetT</templarg>
    <base>mc_rtc::gui::CommonInputImpl</base>
    <member kind="function">
      <type></type>
      <name>ComboInputImpl</name>
      <anchorfile>a01889.html</anchorfile>
      <anchor>a878cc6bcd8c591901875a5bc50ca3d8d</anchor>
      <arglist>(const std::string &amp;name, const std::vector&lt; std::string &gt; &amp;values, GetT get_fn, SetT set_fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a01889.html</anchorfile>
      <anchor>a8634db0eae6c2bb845b8521c2866676d</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;writer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ComboInputImpl</name>
      <anchorfile>a01889.html</anchorfile>
      <anchor>a9a8d446bb306476504480f7b0438905d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>a01889.html</anchorfile>
      <anchor>a8227eaf335ae36ca1739cfc97eabe8f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>a01889.html</anchorfile>
      <anchor>af26181127e4bd175ee0e474d79b41b91</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_solver::CoMIncPlaneConstr</name>
    <filename>a02185.html</filename>
    <base>mc_solver::ConstraintSet</base>
    <member kind="function">
      <type></type>
      <name>CoMIncPlaneConstr</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>a36c14d8513aede45203f3113bca8866f</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, double dt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addToSolver</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>a7fe287ede6acc66b93ebc6e1a8f54882</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, tasks::qp::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeFromSolver</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>aa6901fd29799bb8f88e639be2e2e06ac</anchor>
      <arglist>(tasks::qp::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_planes</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>aae037f758b45e836e2ef33edbda90c58</anchor>
      <arglist>(QPSolver &amp;solver, const std::vector&lt; mc_rbdyn::Plane &gt; &amp;planes, const std::vector&lt; Eigen::Vector3d &gt; &amp;speeds={}, const std::vector&lt; Eigen::Vector3d &gt; &amp;normalsDots={}, double iDist=0.05, double sDist=0.01, double damping=0.1, double dampingOff=0.)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::CommonInputImpl</name>
    <filename>a01925.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>CallbackElement&lt; DataElement&lt; GetT &gt;, SetT &gt;</base>
    <member kind="function">
      <type></type>
      <name>CommonInputImpl</name>
      <anchorfile>a01925.html</anchorfile>
      <anchor>a1d18c6be098836d8c4dc9cd9bcae1072</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, SetT set_fn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CommonInputImpl</name>
      <anchorfile>a01925.html</anchorfile>
      <anchor>aee87ac9fbe3573e62fd457a0065118e8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_control::CompletionCriteria</name>
    <filename>a01373.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>completed</name>
      <anchorfile>a01373.html</anchorfile>
      <anchor>a6b2c61033f0f8d2d7f45aeb6e8fb028e</anchor>
      <arglist>(const mc_tasks::MetaTask &amp;task)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configure</name>
      <anchorfile>a01373.html</anchorfile>
      <anchor>a7cf119e44a4a74ad734dc2fe34f2fff6</anchor>
      <arglist>(const mc_tasks::MetaTask &amp;task, double dt, const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>output</name>
      <anchorfile>a01373.html</anchorfile>
      <anchor>a2485b806e905c84cd087fb47287f2240</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::force::ComplianceTask</name>
    <filename>a02353.html</filename>
    <base>mc_tasks::MetaTask</base>
    <member kind="function">
      <type>EIGEN_MAKE_ALIGNED_OPERATOR_NEW</type>
      <name>ComplianceTask</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>abeac2349008fb866484434e051af4eba</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, const std::string &amp;body, double timestep, const Eigen::Matrix6d &amp;dof=Eigen::Matrix6d::Identity(), double stiffness=5.0, double weight=1000.0, double forceThresh=3., double torqueThresh=1., std::pair&lt; double, double &gt; forceGain=defaultFGain, std::pair&lt; double, double &gt; torqueGain=defaultTGain)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ComplianceTask</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>a859869df35e31dd54e09a1a2e25f602c</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, const std::string &amp;body, double timestep, double stiffness=5.0, double weight=1000.0, double forceThresh=3., double torqueThresh=1., std::pair&lt; double, double &gt; forceGain=defaultFGain, std::pair&lt; double, double &gt; torqueGain=defaultTGain)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>af4b7d4df6aeeff1f359b6465dadb29d4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>sva::ForceVecd</type>
      <name>getFilteredWrench</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>a89bd5b9501d970f3fc4b847ffa084592</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTargetWrench</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>a2b45259a30107a6204afe29de4789d5e</anchor>
      <arglist>(const sva::ForceVecd &amp;wrench)</arglist>
    </member>
    <member kind="function">
      <type>sva::ForceVecd</type>
      <name>getTargetWrench</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>a978e9f71933578108ec5eff13b09de0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stiffness</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>a449d3d8ab18b84bb0d12b932b8aea91a</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stiffness</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>aa97e6e109aed6c749c86c3e52ff734f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>weight</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>a04018b7471bd13a2a53488805bbb4c00</anchor>
      <arglist>(double w)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weight</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>a2ac7d3a0f032a28664f341b111ea9b2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forceThresh</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>afdc2f323bda36fb60212f95f6671d22a</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>forceThresh</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>a72ec1f3e8d39f7eb5968584b8386b860</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>torqueThresh</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>a044c1fedcaef27af30b4c40b3722cc8c</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>torqueThresh</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>a31c058f1eb7eea9a1a96a4aecedf2522</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forceGain</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>a85fd09f0aa44d74d7ea178a1a854aa4d</anchor>
      <arglist>(std::pair&lt; double, double &gt; t)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; double, double &gt;</type>
      <name>forceGain</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>ab60763dc6de33680b62268e34965da2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>torqueGain</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>a5177a999dfcd172f539b6c74cf786dae</anchor>
      <arglist>(std::pair&lt; double, double &gt; t)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; double, double &gt;</type>
      <name>torqueGain</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>ae49b7e1b18ab7cca6e79a0b49ba55ce1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dof</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>a25d158e3ea17507fe4ba679818e8d71a</anchor>
      <arglist>(const Eigen::Matrix6d &amp;dof)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix6d</type>
      <name>dof</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>a4db01beff8250952ae3b0f853020e8c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dimWeight</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>af29f3468d90160d16cdc8d7c8188c074</anchor>
      <arglist>(const Eigen::VectorXd &amp;dimW) override</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>dimWeight</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>ade42094d33ea2b4967c7c7c49b10e953</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selectActiveJoints</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>ac916be1434dee468c5924ad903a3b609</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const std::vector&lt; std::string &gt; &amp;activeJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;activeDofs={}) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selectUnactiveJoints</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>abab673c6f1104ed69eecc72f9a236ba2</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const std::vector&lt; std::string &gt; &amp;unactiveJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;unactiveDofs={}) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetJointsSelector</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>ad1f9dd57c39cef2bdcffafeea3404702</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>eval</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>a1e2ffbb255464894b2254af872876957</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>speed</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>a54d74b5d04bac21cde53bfc0b3c29350</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_solver::details::CompoundJointConstraint</name>
    <filename>a02189.html</filename>
    <member kind="function">
      <type>MC_SOLVER_DLLAPI</type>
      <name>CompoundJointConstraint</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>ad06e91a57f1229af89b70c358f4a7b13</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, unsigned int rIndex, double dt)</arglist>
    </member>
    <member kind="function">
      <type>MC_SOLVER_DLLAPI</type>
      <name>CompoundJointConstraint</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>acb4fa85bb33ff2a1de3b7de351f131c5</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, unsigned int rIndex, double dt, const CompoundJointConstraintDescriptionVector &amp;desc)</arglist>
    </member>
    <member kind="function">
      <type>MC_SOLVER_DLLAPI</type>
      <name>~CompoundJointConstraint</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a652516c75f732ca1396233a447a75060</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>MC_SOLVER_DLLAPI void</type>
      <name>addConstraint</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>aa6b6d7c5a42e5233d89290cd75460dad</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, unsigned int rIndex, const CompoundJointConstraintDescription &amp;desc)</arglist>
    </member>
    <member kind="function">
      <type>MC_SOLVER_DLLAPI void</type>
      <name>updateNrVars</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>ad18a2350451245577b50d4556cc566fa</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const tasks::qp::SolverData &amp;data) override</arglist>
    </member>
    <member kind="function">
      <type>MC_SOLVER_DLLAPI void</type>
      <name>update</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a12500c0416901546eb4d77bf0a3d2c9e</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const tasks::qp::SolverData &amp;data) override</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>AInEq</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>aab8f87d466ef7d494d1781854d5753db</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxInEq</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a6c4e91e2613fdeb3f7fc8120b46560e9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>nameInEq</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a63d6b830f71e0e0cc7667b1577d754d0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>bInEq</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a55dffd4ce88a71b31224c2487a2156ad</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>descInEq</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>aac212bc890f2ed4dc3e059e915408b02</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, int i) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_solver::CompoundJointConstraint</name>
    <filename>a02197.html</filename>
    <base>mc_solver::ConstraintSet</base>
    <member kind="function">
      <type></type>
      <name>CompoundJointConstraint</name>
      <anchorfile>a02197.html</anchorfile>
      <anchor>a6bab2c52e39b3c37781091ff0477b554</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, double dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToSolver</name>
      <anchorfile>a02197.html</anchorfile>
      <anchor>ab5c96ef4ac5e418eed9e07ad0be00064</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, tasks::qp::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromSolver</name>
      <anchorfile>a02197.html</anchorfile>
      <anchor>af01c6fabfd9fb7f818d62693aaaac1ed</anchor>
      <arglist>(tasks::qp::QPSolver &amp;solver) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::CompoundJointConstraintDescription</name>
    <filename>a01633.html</filename>
    <member kind="variable">
      <type>EIGEN_MAKE_ALIGNED_OPERATOR_NEW std::string</type>
      <name>j1</name>
      <anchorfile>a01633.html</anchorfile>
      <anchor>a4fc963a5996bfafc4e1e0675e9db6b6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>j2</name>
      <anchorfile>a01633.html</anchorfile>
      <anchor>ac9819775fec0daea6ce39b6979ef153d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::Vector2d</type>
      <name>p1</name>
      <anchorfile>a01633.html</anchorfile>
      <anchor>a8c937c01687684763d1d040626ca9dcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::Vector2d</type>
      <name>p2</name>
      <anchorfile>a01633.html</anchorfile>
      <anchor>a0cc1f94178b76862c60dd6d6c86ddb07</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::CoMTask</name>
    <filename>a02357.html</filename>
    <base>TrajectoryTaskGeneric&lt; tasks::qp::CoMTask &gt;</base>
    <member kind="typedef">
      <type>TrajectoryTaskGeneric&lt; tasks::qp::CoMTask &gt;</type>
      <name>TrajectoryBase</name>
      <anchorfile>a02357.html</anchorfile>
      <anchor>a51467f7e3f362d7aaa1b6ddb48b5d41a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CoMTask</name>
      <anchorfile>a02357.html</anchorfile>
      <anchor>a4c8786f3b387a997fb2ae923e2843669</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, double stiffness=5.0, double weight=100.)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>a02357.html</anchorfile>
      <anchor>aced244122dda39108ec801512c4ca339</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move_com</name>
      <anchorfile>a02357.html</anchorfile>
      <anchor>ad6a83e7e89cbae657665c8815c558f4d</anchor>
      <arglist>(const Eigen::Vector3d &amp;com)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>com</name>
      <anchorfile>a02357.html</anchorfile>
      <anchor>a9c9d83e308955c7de9205e28bc7c0e9b</anchor>
      <arglist>(const Eigen::Vector3d &amp;com)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>com</name>
      <anchorfile>a02357.html</anchorfile>
      <anchor>afab16ec288652d1509a90a4df324e3ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>actual</name>
      <anchorfile>a02357.html</anchorfile>
      <anchor>abc72179651c43a085fe41dd7e420b699</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>a02357.html</anchorfile>
      <anchor>a1e128a33ad470c85099edc2f64409a25</anchor>
      <arglist>(mc_solver::QPSolver &amp;, const mc_rtc::Configuration &amp;config) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>a02357.html</anchorfile>
      <anchor>ad673a413597c928fe6b631c7d778e650</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToLogger</name>
      <anchorfile>a02357.html</anchorfile>
      <anchor>a67f50fc6a98a4d834ab322931766499d</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeFromLogger</name>
      <anchorfile>a02357.html</anchorfile>
      <anchor>a40670ec23d1459006df4e47398c516ed</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::Configuration</name>
    <filename>a01809.html</filename>
    <class kind="struct">mc_rtc::Configuration::Exception</class>
    <member kind="function">
      <type>MC_RTC_DEPRECATED bool</type>
      <name>isMember</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a983c430fc82d271e83397cc546197c6d</anchor>
      <arglist>(const std::string &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a6488f8ecfa643aebe3c77e8fd4218160</anchor>
      <arglist>(const std::string &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>aab2994ae20cb81a98567fa3f7dada3fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator int</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>addad9797926f65f2ff14c5110f95c338</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned int</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>ab39671fa3b6d9cc688c03543bc4013a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator int64_t</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a32803cad64b14b34c620c9b5e37072a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator uint64_t</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a00e2bb70e28b2fd7f1e2a7e127db936b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator double</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>ab5db0da32673006f62e46b9a8251d84e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>aec19d5037e1fead68093f2f2edee4592</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Eigen::Vector2d</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a9e120c4c13e652f87528d0af495160c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Eigen::Vector3d</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>ac33924d180b8d55448ee3e2ff7d07ab6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Eigen::Vector6d</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a028726dd426da2ce9c6101297b2c197c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Eigen::VectorXd</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a7b23823ef481d190f96bc451dd9e7882</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Eigen::Quaterniond</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>aca0f087d742c71c166993aa5617ec9a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Eigen::Matrix3d</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a7a2df9dbb9a6139d9ff99c6c60ef61a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Eigen::Matrix6d</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a80b1043ef8da93ff82487f6fb6c13303</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Eigen::MatrixXd</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>af81c15b1dd176938e437913bac33f42c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator sva::PTransformd</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a77528e3ee7e12ac9a0fc6cce71feb176</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator sva::ForceVecd</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>abde2e86ccecf6e5f45f6cb6a2f6590fd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator sva::MotionVecd</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a548367a2c7a77ee3e9a8fae5dd955767</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::vector&lt; T, A &gt;</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>ab06d6d358eef19d9c4c8748bc7767064</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::array&lt; T, N &gt;</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>aa4af8f372da0ca5bc835588c737c5877</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::pair&lt; T1, T2 &gt;</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a552f9761ab8458992b1ef20ad9019602</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::map&lt; std::string, T, C, A &gt;</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>ac26424cf2ed968f1999a3277ab4f7835</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::set&lt; T, C, A &gt;</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a7cb85c50202da3906f0af969eb4af6d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::unordered_set&lt; T, H, E, A &gt;</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a0ed2f23cedeb589c8f7f26f54b99b76f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a60d258128cadfb8b4cc30229d169991b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Configuration</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a56857d79e0d10c4347e20ee425987970</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Configuration</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>af2bae551aad627ee177f6897c7258eb0</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Configuration</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a10aac0c05692c6b8ac9667ce9f104395</anchor>
      <arglist>(const char *path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>ad0a580d2b8dfb6896f79005eccb8f400</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a6c9bdbb3100799d4905a06a19b431362</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadData</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a0ffb387fee217c9b635099dbe61c4984</anchor>
      <arglist>(const std::string &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadYAMLData</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>ab49ef6ce388e0698db3574e329de4ccc</anchor>
      <arglist>(const std::string &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a77eb23c01cd9f1f5f36047829121aeef</anchor>
      <arglist>(const std::string &amp;path, bool pretty=true) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>dump</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>afda08b8028840339ae754ae18d85a402</anchor>
      <arglist>(bool pretty=false, bool yaml=false) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>toMessagePack</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>ac40b549f94ac55bb5f99b2b8a5343709</anchor>
      <arglist>(std::vector&lt; char &gt; &amp;data) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toMessagePack</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a0f5e10d984befe08c3a5b23ce0cd25cf</anchor>
      <arglist>(MessagePackBuilder &amp;builder) const</arglist>
    </member>
    <member kind="function">
      <type>Configuration</type>
      <name>operator()</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>ad8bc98b0203b31bd14f80fb84de0d9df</anchor>
      <arglist>(const std::string &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a2796ec136928735aecaa448c91758e20</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a08e9130c96815bb8fe1092d69b9ea67a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Configuration</type>
      <name>operator[]</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>af63d0b9fe005fd5fea2078a17c62b2e7</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>at</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a945df64f7246385258b1d6190566586f</anchor>
      <arglist>(size_t i, const T &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a4bd14911f7201bfc8d7ae644ceed153f</anchor>
      <arglist>(const std::string &amp;key, T &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a495e1e8637ac6471065748d23bade3fc</anchor>
      <arglist>(const std::string &amp;key, const T &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a8b8525da90c67972b332d4ee13c6111f</anchor>
      <arglist>(const char *rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>ab40bcb05918c9fea3ea53ecd4c8d5d85</anchor>
      <arglist>(const T &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_null</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a9f830086d3d5434db12cee782c6144a2</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a6a28ad4e71394b56e27687e9d64a8cda</anchor>
      <arglist>(const std::string &amp;key, bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>ad8c514c42066587028dffdda71d04215</anchor>
      <arglist>(const std::string &amp;key, int value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a903485c9427fa24b5f754c341e749217</anchor>
      <arglist>(const std::string &amp;key, unsigned int value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a1fbaebc34e51e08b6cbe8546ef1797e6</anchor>
      <arglist>(const std::string &amp;key, int64_t value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a84124f26f358cd627bac643a6d943ea5</anchor>
      <arglist>(const std::string &amp;key, uint64_t value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a2f4ba1235e2b9244b088b7c53e628473</anchor>
      <arglist>(const std::string &amp;key, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a4f6a511f64af1b3d6f2b2615f8a8f6d4</anchor>
      <arglist>(const std::string &amp;key, const std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>acf1ace73ff093e8db22d7301afe54c08</anchor>
      <arglist>(const std::string &amp;key, const char *value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a445f971b2ff6b0211f0dd9dac27acb7c</anchor>
      <arglist>(const std::string &amp;key, const Eigen::Vector2d &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a943753f6cca1b82f7115eb76fe478a10</anchor>
      <arglist>(const std::string &amp;key, const Eigen::Vector3d &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a0f720b9cb210c2712dfb6ccc28741c89</anchor>
      <arglist>(const std::string &amp;key, const Eigen::Vector6d &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>ab0590506d6b5b59447a914a07a1bdde4</anchor>
      <arglist>(const std::string &amp;key, const Eigen::VectorXd &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a4b52dba70d98ca9f8fb6d0f3cb07c678</anchor>
      <arglist>(const std::string &amp;key, const Eigen::Quaterniond &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a2f65e4dfd9a8f2b7396ed49afdb4c15c</anchor>
      <arglist>(const std::string &amp;key, const Eigen::Matrix3d &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a4fdd3aa2cff1a6d0738b0e8bab39293f</anchor>
      <arglist>(const std::string &amp;key, const Eigen::Matrix6d &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>af8da53741027d97a38ef0432f782f8fe</anchor>
      <arglist>(const std::string &amp;key, const Eigen::MatrixXd &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>af4e791facdf1723ee2ddfc14847abbec</anchor>
      <arglist>(const std::string &amp;key, const sva::PTransformd &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>aa266606c55da0e7ff81c1eb9074d39cf</anchor>
      <arglist>(const std::string &amp;key, const sva::ForceVecd &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a3c79c749a5aaec1610c8d6eb2f826c1e</anchor>
      <arglist>(const std::string &amp;key, const sva::MotionVecd &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a1be30ae398db04ef0b80adb11efbf9af</anchor>
      <arglist>(const std::string &amp;key, const Configuration &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Configuration</type>
      <name>add</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a2e61fb3d7f560d5870f297f4b3b827db</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>Configuration</type>
      <name>array</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a8e8413f64735152ab9b35bcdb86f951a</anchor>
      <arglist>(const std::string &amp;key, size_t size=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_null</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a46665344d4631d7756dedaf854d7ee7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a2ab60e254c814d3226bf71d80788280a</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>af7cc0d1d2c6cf370f88dadc0b8e4e81a</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a847a47be791d47b6c31726e99b0ea088</anchor>
      <arglist>(unsigned int value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a205fc0d430f299aa0164f003b6441ad5</anchor>
      <arglist>(int64_t value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a1c61327ca8aa6900ffab4db371b11373</anchor>
      <arglist>(uint64_t value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>af9d07a501dc465a22aa9f890e2b5e596</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>af362005c9e4f3f3afc28dee4b8f6fc5e</anchor>
      <arglist>(const std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>ae763761b200b9af74836a7d99a9fa169</anchor>
      <arglist>(const char *value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>ad31146ebaf600b81a831bd27349944d1</anchor>
      <arglist>(const Eigen::Vector2d &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a732d4fba7f1ceee9d8f87274bbdda8ef</anchor>
      <arglist>(const Eigen::Vector3d &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a8b5bfd34e8172f43a995a89337b94dca</anchor>
      <arglist>(const Eigen::Vector6d &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a44d15ea8aa8caa106ab779a868d01fb3</anchor>
      <arglist>(const Eigen::VectorXd &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a19788844d047cab2e17e7f45eba2986f</anchor>
      <arglist>(const Eigen::Quaterniond &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a1ff5a33ab312654b770b841ce3b23d1f</anchor>
      <arglist>(const Eigen::Matrix3d &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>ab186d30e230cbd2b725de1f28ed7b12b</anchor>
      <arglist>(const Eigen::Matrix6d &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>ad77127e883930d52b5082776afe437ea</anchor>
      <arglist>(const Eigen::MatrixXd &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>ac6789b021e72956e2e29d4f80e6f1b61</anchor>
      <arglist>(const sva::PTransformd &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a4edd42944a80b5fcaf83fedbdbd1d18f</anchor>
      <arglist>(const sva::ForceVecd &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>abf5e743e0ca14bb22bed349263a3f4b5</anchor>
      <arglist>(const sva::MotionVecd &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a0ce151a46f81cc17810166a4730794d4</anchor>
      <arglist>(const Configuration &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Configuration</type>
      <name>array</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a8f1241b1ee27c4c61304c50eeb03fd82</anchor>
      <arglist>(size_t reserve=0)</arglist>
    </member>
    <member kind="function">
      <type>Configuration</type>
      <name>object</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a7f8499a98a31debf5c49366bdb56a84d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a5c9ff27b8d536d10c2b7a8c3cb668d29</anchor>
      <arglist>(const T &amp;value, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a26b92d3f9bebfeac92ea681f503cf815</anchor>
      <arglist>(const std::string &amp;key, const std::vector&lt; T, A &gt; &amp;value, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a0e109854f5fa1ebf445fa25f90c22872</anchor>
      <arglist>(const std::string &amp;key, const std::array&lt; T, N &gt; &amp;value, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>af86216ade31bbb09752140b1671127c0</anchor>
      <arglist>(const std::string &amp;key, const std::pair&lt; T1, T2 &gt; &amp;value, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a337880690cd85f2717649b1cf2ff904a</anchor>
      <arglist>(const std::string &amp;key, const std::map&lt; std::string, T, C, A &gt; &amp;value, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>ac6316f0f31330566f57ec87e91f5890f</anchor>
      <arglist>(const std::string &amp;key, const std::set&lt; T, C, A &gt; &amp;value, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>ae73a0ee95aa1ea44a146d0befaa25539</anchor>
      <arglist>(const std::string &amp;key, const std::unordered_set&lt; T, H, E, A &gt; &amp;value, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a9644c99468a58791ee42c867ae5d5961</anchor>
      <arglist>(const std::string &amp;key, const T &amp;value, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>aa8131a69b609aa32a7cf621c49c3a65b</anchor>
      <arglist>(const std::vector&lt; T, A &gt; &amp;value, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a79565aba9bcbefa4901278ea9345715d</anchor>
      <arglist>(const std::array&lt; T, N &gt; &amp;value, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a638b0308597ed9c9aa09afe70f803cab</anchor>
      <arglist>(const std::pair&lt; T1, T2 &gt; &amp;value, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>abc47821ac71ced9b55f3b76286d4b942</anchor>
      <arglist>(const std::map&lt; std::string, T, C, A &gt; &amp;value, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>ab8cc8b0acc61a5bcf4befd1752691e97</anchor>
      <arglist>(const std::set&lt; T, C, A &gt; &amp;value, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a2c8ff7ed5c88e2027d384ec046bbdb42</anchor>
      <arglist>(const std::unordered_set&lt; T, H, E, A &gt; &amp;value, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remove</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>aeee0a378708fce3e3330972f04812801</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>keys</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a6c2ced6def7b01c3f4dbbac73a82afbf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConfigurationArrayIterator</type>
      <name>begin</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>ae9a11fd79001b161cac33cd8e6e08935</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConfigurationArrayIterator</type>
      <name>end</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a516be2ebaed86b5b458575a595d1104a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void MC_RTC_UTILS_DLLAPI</type>
      <name>operator()</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a1f7d3126e3673517391e2e797577d888</anchor>
      <arglist>(const std::string &amp;key, std::string &amp;v) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Configuration</type>
      <name>rootArray</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>ab71ccf94edbc00fd72a4f8b2513d78e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Configuration</type>
      <name>fromData</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>ad3ad60b6c971c4932632eb9f616ea2e1</anchor>
      <arglist>(const std::string &amp;data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Configuration</type>
      <name>fromData</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>aed2f387badb9d350e03140894fea693b</anchor>
      <arglist>(const char *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Configuration</type>
      <name>fromYAMLData</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a284313d57598532957a94f5904f3132c</anchor>
      <arglist>(const std::string &amp;data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Configuration</type>
      <name>fromYAMLData</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a0b948a9b83ed36579d17767f266cd5f2</anchor>
      <arglist>(const char *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Configuration</type>
      <name>fromMessagePack</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a892e074a206f0117fb8e65e7482bda13</anchor>
      <arglist>(const char *data, size_t size)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::ConfigurationArrayIterator</name>
    <filename>a01821.html</filename>
    <member kind="function">
      <type></type>
      <name>ConfigurationArrayIterator</name>
      <anchorfile>a01821.html</anchorfile>
      <anchor>a0a701ce8020231cfab82a35bc49a4ba6</anchor>
      <arglist>(const Configuration &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a01821.html</anchorfile>
      <anchor>a0ab342728fa49052e5c69a10c6988d86</anchor>
      <arglist>(const ConfigurationArrayIterator &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>ConfigurationArrayIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>a01821.html</anchorfile>
      <anchor>a0ef6f1e296111a90e6341b22f3c307a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Configuration</type>
      <name>operator*</name>
      <anchorfile>a01821.html</anchorfile>
      <anchor>a0b8813d6778dd6b8a25c658917a4216f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Configuration</type>
      <name>operator*</name>
      <anchorfile>a01821.html</anchorfile>
      <anchor>a5beff7f5439023c5c17f8a0008413c49</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>i</name>
      <anchorfile>a01821.html</anchorfile>
      <anchor>a2d7d4ae76ac0313499089302504022cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Configuration</type>
      <name>conf</name>
      <anchorfile>a01821.html</anchorfile>
      <anchor>a27c3d2c9bb03ebd34bc1055b134da339</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::ConfigurationLoader</name>
    <filename>a01785.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>a01785.html</anchorfile>
      <anchor>a3e8685e2cdb83f2ec06ab4e231a653ae</anchor>
      <arglist>(const mc_rtc::Configuration &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>save</name>
      <anchorfile>a01785.html</anchorfile>
      <anchor>ac516ceb726f94bd4e5a32ad25f1178c2</anchor>
      <arglist>(const T &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::ConfigurationLoader&lt; mc_control::fsm::Contact &gt;</name>
    <filename>a01401.html</filename>
    <member kind="function" static="yes">
      <type>static mc_control::fsm::Contact</type>
      <name>load</name>
      <anchorfile>a01401.html</anchorfile>
      <anchor>a268768db389141d5c9dda3f58f51a03d</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::ConfigurationLoader&lt; mc_rbdyn::CompoundJointConstraintDescription &gt;</name>
    <filename>a01637.html</filename>
    <member kind="function" static="yes">
      <type>static mc_rbdyn::CompoundJointConstraintDescription</type>
      <name>load</name>
      <anchorfile>a01637.html</anchorfile>
      <anchor>ae134fc4eeb684a9fe90b8bea94f74b84</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static mc_rtc::Configuration</type>
      <name>save</name>
      <anchorfile>a01637.html</anchorfile>
      <anchor>a24281b69d10bef2a02ccc3f57f5c1508</anchor>
      <arglist>(const mc_rbdyn::CompoundJointConstraintDescription &amp;desc)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::ConfigurationLoader&lt; mc_rbdyn::Contact &gt;</name>
    <filename>a01649.html</filename>
    <member kind="function" static="yes">
      <type>static mc_rbdyn::Contact</type>
      <name>load</name>
      <anchorfile>a01649.html</anchorfile>
      <anchor>a1693666583895fbbd09a39081383914e</anchor>
      <arglist>(const mc_rtc::Configuration &amp;, const mc_rbdyn::Robots &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static mc_rtc::Configuration</type>
      <name>save</name>
      <anchorfile>a01649.html</anchorfile>
      <anchor>a5bd43b00507933f99b76646f50ed0fde</anchor>
      <arglist>(const mc_rbdyn::Contact &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::ConfigurationLoader&lt; mc_rbdyn::lipm_stabilizer::FDQPWeights &gt;</name>
    <filename>a01689.html</filename>
    <member kind="function" static="yes">
      <type>static mc_rbdyn::lipm_stabilizer::FDQPWeights</type>
      <name>load</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>af6bc9c479eb0cbd067ea314e165fe451</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static mc_rtc::Configuration</type>
      <name>save</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>af9445788bc08d4b66c5a82c8fc4e35df</anchor>
      <arglist>(const mc_rbdyn::lipm_stabilizer::FDQPWeights &amp;weights)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::ConfigurationLoader&lt; mc_rbdyn::lipm_stabilizer::StabilizerConfiguration &gt;</name>
    <filename>a01697.html</filename>
    <member kind="function" static="yes">
      <type>static mc_rbdyn::lipm_stabilizer::StabilizerConfiguration</type>
      <name>load</name>
      <anchorfile>a01697.html</anchorfile>
      <anchor>a6f8a65b949b2129b60545644f984db59</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static mc_rtc::Configuration</type>
      <name>save</name>
      <anchorfile>a01697.html</anchorfile>
      <anchor>a4e91cd76b79b671e4049c8444cf1e3f4</anchor>
      <arglist>(const mc_rbdyn::lipm_stabilizer::StabilizerConfiguration &amp;stabiConf)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::ConfigurationLoader&lt; mc_rbdyn::lipm_stabilizer::ZMPCCConfiguration &gt;</name>
    <filename>a01705.html</filename>
    <member kind="function" static="yes">
      <type>static mc_rbdyn::lipm_stabilizer::ZMPCCConfiguration</type>
      <name>load</name>
      <anchorfile>a01705.html</anchorfile>
      <anchor>a424041a72a1aab6e27b6b8c9115041bb</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static mc_rtc::Configuration</type>
      <name>save</name>
      <anchorfile>a01705.html</anchorfile>
      <anchor>a9dc93d8923aa1b6251a7c61acf5332c7</anchor>
      <arglist>(const mc_rbdyn::lipm_stabilizer::ZMPCCConfiguration &amp;zmpcc)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::ConfigurationLoader&lt; mc_rbdyn::RobotModule &gt;</name>
    <filename>a01641.html</filename>
    <member kind="function" static="yes">
      <type>static mc_rbdyn::RobotModule</type>
      <name>load</name>
      <anchorfile>a01641.html</anchorfile>
      <anchor>ab398e7053d2dd2b218a40ee608a8657c</anchor>
      <arglist>(const mc_rtc::Configuration &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static mc_rtc::Configuration</type>
      <name>save</name>
      <anchorfile>a01641.html</anchorfile>
      <anchor>ae55ea4ba484aaf84aa2fbf822084281c</anchor>
      <arglist>(const mc_rbdyn::RobotModule &amp;, bool save_mbc=true, const std::vector&lt; std::string &gt; &amp;filteredLinks={}, bool fixed=false)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::ConfigurationLoader&lt; mc_rbdyn::RobotModulePtr &gt;</name>
    <filename>a01645.html</filename>
    <member kind="function" static="yes">
      <type>static mc_rbdyn::RobotModulePtr</type>
      <name>load</name>
      <anchorfile>a01645.html</anchorfile>
      <anchor>a27d2d736e80c235652f7576f9bd95e2a</anchor>
      <arglist>(const mc_rtc::Configuration &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static mc_rtc::Configuration</type>
      <name>save</name>
      <anchorfile>a01645.html</anchorfile>
      <anchor>a6081d5cb189f9b7439d8eced06fce954</anchor>
      <arglist>(const mc_rbdyn::RobotModulePtr &amp;, bool save_mbc=true, const std::vector&lt; std::string &gt; &amp;filteredLinks={}, bool fixed=false)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::ConfigurationLoader&lt; mc_tasks::lipm_stabilizer::ContactState &gt;</name>
    <filename>a02389.html</filename>
    <member kind="function" static="yes">
      <type>static mc_tasks::lipm_stabilizer::ContactState</type>
      <name>load</name>
      <anchorfile>a02389.html</anchorfile>
      <anchor>a1528be809a0f45f51c25a46722a101bb</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static mc_rtc::Configuration</type>
      <name>save</name>
      <anchorfile>a02389.html</anchorfile>
      <anchor>a569fbb0c9f4777d08b28cad40479fb7f</anchor>
      <arglist>(const mc_tasks::lipm_stabilizer::ContactState &amp;contact)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::ConfigurationLoader&lt; void &gt;</name>
    <filename>a01789.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>a01789.html</anchorfile>
      <anchor>a8b405815d2c463e01efa6394cca1dc54</anchor>
      <arglist>(const mc_rtc::Configuration &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>save</name>
      <anchorfile>a01789.html</anchorfile>
      <anchor>a6d4adb3f20c993a424538d38241da5de</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_solver::utils::Constraint</name>
    <filename>a02297.html</filename>
    <templarg>ConstraintT</templarg>
    <templarg>UpdateT</templarg>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>adcc2b9ec9fbd3b47e0183ef0ce034c73</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>ae5a2073ed0b8b0432593221fec955e4e</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>aab0cc49bca85557519c9a110b54c65ca</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Constraint</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>a819dd76da2909a4c88efcca1cb9aaf69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNrVars</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>ab383394a69ab62c4fab23378e64868de</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const tasks::qp::SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>a7693804807033e3718c4ba01a58d3a58</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const tasks::qp::SolverData &amp;data) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Constraint&lt; tasks::qp::Equality, UpdateT &gt;</name>
    <filename>a02297.html</filename>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>adcc2b9ec9fbd3b47e0183ef0ce034c73</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>ae5a2073ed0b8b0432593221fec955e4e</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>aab0cc49bca85557519c9a110b54c65ca</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Constraint</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>a819dd76da2909a4c88efcca1cb9aaf69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNrVars</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>ab383394a69ab62c4fab23378e64868de</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const tasks::qp::SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>a7693804807033e3718c4ba01a58d3a58</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const tasks::qp::SolverData &amp;data) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Constraint&lt; tasks::qp::Equality, utils::UpdateForce &gt;</name>
    <filename>a02297.html</filename>
    <base>mc_solver::utils::UpdateForce</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>adcc2b9ec9fbd3b47e0183ef0ce034c73</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>ae5a2073ed0b8b0432593221fec955e4e</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>aab0cc49bca85557519c9a110b54c65ca</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Constraint</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>a819dd76da2909a4c88efcca1cb9aaf69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNrVars</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>ab383394a69ab62c4fab23378e64868de</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const tasks::qp::SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>a7693804807033e3718c4ba01a58d3a58</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const tasks::qp::SolverData &amp;data) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Constraint&lt; tasks::qp::Equality, utils::UpdateLambda &gt;</name>
    <filename>a02297.html</filename>
    <base>Update&lt; UpdateNrVarsLambda &gt;</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>adcc2b9ec9fbd3b47e0183ef0ce034c73</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>ae5a2073ed0b8b0432593221fec955e4e</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>aab0cc49bca85557519c9a110b54c65ca</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Constraint</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>a819dd76da2909a4c88efcca1cb9aaf69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNrVars</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>ab383394a69ab62c4fab23378e64868de</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const tasks::qp::SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>a7693804807033e3718c4ba01a58d3a58</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const tasks::qp::SolverData &amp;data) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Constraint&lt; tasks::qp::Equality, utils::UpdateRobot &gt;</name>
    <filename>a02297.html</filename>
    <base>mc_solver::utils::Update</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>adcc2b9ec9fbd3b47e0183ef0ce034c73</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>ae5a2073ed0b8b0432593221fec955e4e</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>aab0cc49bca85557519c9a110b54c65ca</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Constraint</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>a819dd76da2909a4c88efcca1cb9aaf69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNrVars</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>ab383394a69ab62c4fab23378e64868de</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const tasks::qp::SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>a7693804807033e3718c4ba01a58d3a58</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const tasks::qp::SolverData &amp;data) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Constraint&lt; tasks::qp::GenInequality, UpdateT &gt;</name>
    <filename>a02297.html</filename>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>adcc2b9ec9fbd3b47e0183ef0ce034c73</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>ae5a2073ed0b8b0432593221fec955e4e</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>aab0cc49bca85557519c9a110b54c65ca</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Constraint</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>a819dd76da2909a4c88efcca1cb9aaf69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNrVars</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>ab383394a69ab62c4fab23378e64868de</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const tasks::qp::SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>a7693804807033e3718c4ba01a58d3a58</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const tasks::qp::SolverData &amp;data) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Constraint&lt; tasks::qp::GenInequality, utils::UpdateForce &gt;</name>
    <filename>a02297.html</filename>
    <base>mc_solver::utils::UpdateForce</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>adcc2b9ec9fbd3b47e0183ef0ce034c73</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>ae5a2073ed0b8b0432593221fec955e4e</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>aab0cc49bca85557519c9a110b54c65ca</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Constraint</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>a819dd76da2909a4c88efcca1cb9aaf69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNrVars</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>ab383394a69ab62c4fab23378e64868de</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const tasks::qp::SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>a7693804807033e3718c4ba01a58d3a58</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const tasks::qp::SolverData &amp;data) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Constraint&lt; tasks::qp::GenInequality, utils::UpdateLambda &gt;</name>
    <filename>a02297.html</filename>
    <base>Update&lt; UpdateNrVarsLambda &gt;</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>adcc2b9ec9fbd3b47e0183ef0ce034c73</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>ae5a2073ed0b8b0432593221fec955e4e</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>aab0cc49bca85557519c9a110b54c65ca</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Constraint</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>a819dd76da2909a4c88efcca1cb9aaf69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNrVars</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>ab383394a69ab62c4fab23378e64868de</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const tasks::qp::SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>a7693804807033e3718c4ba01a58d3a58</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const tasks::qp::SolverData &amp;data) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Constraint&lt; tasks::qp::GenInequality, utils::UpdateRobot &gt;</name>
    <filename>a02297.html</filename>
    <base>mc_solver::utils::Update</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>adcc2b9ec9fbd3b47e0183ef0ce034c73</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>ae5a2073ed0b8b0432593221fec955e4e</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>aab0cc49bca85557519c9a110b54c65ca</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Constraint</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>a819dd76da2909a4c88efcca1cb9aaf69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNrVars</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>ab383394a69ab62c4fab23378e64868de</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const tasks::qp::SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>a7693804807033e3718c4ba01a58d3a58</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const tasks::qp::SolverData &amp;data) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Constraint&lt; tasks::qp::Inequality, UpdateT &gt;</name>
    <filename>a02297.html</filename>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>adcc2b9ec9fbd3b47e0183ef0ce034c73</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>ae5a2073ed0b8b0432593221fec955e4e</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>aab0cc49bca85557519c9a110b54c65ca</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Constraint</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>a819dd76da2909a4c88efcca1cb9aaf69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNrVars</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>ab383394a69ab62c4fab23378e64868de</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const tasks::qp::SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>a7693804807033e3718c4ba01a58d3a58</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const tasks::qp::SolverData &amp;data) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Constraint&lt; tasks::qp::Inequality, utils::UpdateForce &gt;</name>
    <filename>a02297.html</filename>
    <base>mc_solver::utils::UpdateForce</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>adcc2b9ec9fbd3b47e0183ef0ce034c73</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>ae5a2073ed0b8b0432593221fec955e4e</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>aab0cc49bca85557519c9a110b54c65ca</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Constraint</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>a819dd76da2909a4c88efcca1cb9aaf69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNrVars</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>ab383394a69ab62c4fab23378e64868de</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const tasks::qp::SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>a7693804807033e3718c4ba01a58d3a58</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const tasks::qp::SolverData &amp;data) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Constraint&lt; tasks::qp::Inequality, utils::UpdateLambda &gt;</name>
    <filename>a02297.html</filename>
    <base>Update&lt; UpdateNrVarsLambda &gt;</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>adcc2b9ec9fbd3b47e0183ef0ce034c73</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>ae5a2073ed0b8b0432593221fec955e4e</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>aab0cc49bca85557519c9a110b54c65ca</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Constraint</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>a819dd76da2909a4c88efcca1cb9aaf69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNrVars</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>ab383394a69ab62c4fab23378e64868de</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const tasks::qp::SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>a7693804807033e3718c4ba01a58d3a58</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const tasks::qp::SolverData &amp;data) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Constraint&lt; tasks::qp::Inequality, utils::UpdateRobot &gt;</name>
    <filename>a02297.html</filename>
    <base>mc_solver::utils::Update</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>adcc2b9ec9fbd3b47e0183ef0ce034c73</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>ae5a2073ed0b8b0432593221fec955e4e</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>aab0cc49bca85557519c9a110b54c65ca</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Constraint</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>a819dd76da2909a4c88efcca1cb9aaf69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNrVars</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>ab383394a69ab62c4fab23378e64868de</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const tasks::qp::SolverData &amp;data) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>a7693804807033e3718c4ba01a58d3a58</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;mbcs, const tasks::qp::SolverData &amp;data) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_solver::ConstraintSet</name>
    <filename>a02201.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addToSolver</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a8b2739907caaeb5d49ccaedc1665e3ca</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, tasks::qp::QPSolver &amp;solver)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>removeFromSolver</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>aa7a3302adccb4d3183e829fd2754b75a</anchor>
      <arglist>(tasks::qp::QPSolver &amp;solver)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConstraintSet</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>ad979bb11e0faeba2c10d36d5a4c46e00</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_solver::ConstraintSetLoader</name>
    <filename>a02205.html</filename>
    <base>GenericLoader&lt; ConstraintSetLoader, ConstraintSet &gt;</base>
    <member kind="function" static="yes">
      <type>static storage_t &amp;</type>
      <name>storage</name>
      <anchorfile>a02205.html</anchorfile>
      <anchor>a96dbeec49975b75e093f8074822fc5dd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_control::fsm::Contact</name>
    <filename>a01389.html</filename>
    <member kind="function">
      <type>EIGEN_MAKE_ALIGNED_OPERATOR_NEW</type>
      <name>Contact</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>a63c45626b5b52b6f6be29663c10a8613</anchor>
      <arglist>(const std::string &amp;r1, const std::string &amp;r2, const std::string &amp;r1Surface, const std::string &amp;r2Surface, double friction=mc_rbdyn::Contact::defaultFriction, const Eigen::Vector6d &amp;dof=Eigen::Vector6d::Ones())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>a63027fea5b27ea98fb1c39aa78c56fed</anchor>
      <arglist>(const Contact &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>a19a8a477e8c16ad944a32c12401ceb25</anchor>
      <arglist>(const Contact &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>a770914b6bd76f3cd0b4c42c950073328</anchor>
      <arglist>(const Contact &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Contact</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>a46d54c4d75fe306846531e8c436fa6f7</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Contact</type>
      <name>from_mc_rbdyn</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>a6936e7692e199d18b9c7906c70414313</anchor>
      <arglist>(const Controller &amp;, const mc_rbdyn::Contact &amp;)</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>r1</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>a9984ba81a2a54cc3216911a4a7c23bb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>r2</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>a426b803fa1191501cc273d05b2f4d7e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>r1Surface</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>ac21f685a8adc12fb0a3015851023ae08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>r2Surface</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>a19bb1febaf343d980f6de167b004d8bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>friction</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>a2d8289fa5ded9a7df86e5c85d03e4435</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::Vector6d</type>
      <name>dof</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>abf05b8825daf19dd4cff5630b7268e7e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::lipm_stabilizer::internal::Contact</name>
    <filename>a02381.html</filename>
    <member kind="function">
      <type>EIGEN_MAKE_ALIGNED_OPERATOR_NEW</type>
      <name>Contact</name>
      <anchorfile>a02381.html</anchorfile>
      <anchor>ab56fecf3381766d1faa3ebc2754a9de8</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Contact</name>
      <anchorfile>a02381.html</anchorfile>
      <anchor>a65934b1c7c1f5ba59139c2b2d4351971</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;robot, const std::string &amp;surfaceName, double friction)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Contact</name>
      <anchorfile>a02381.html</anchorfile>
      <anchor>a326db6cb41cb9ee4d824d52a8ddbe0e1</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;robot, const std::string &amp;surfaceName, const sva::PTransformd &amp;surfacePose, double friction)</arglist>
    </member>
    <member kind="function">
      <type>HrepXd</type>
      <name>hrep</name>
      <anchorfile>a02381.html</anchorfile>
      <anchor>a8f5506ed9550e264f73e26e6178b30e0</anchor>
      <arglist>(const Eigen::Vector3d &amp;vertical) const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Matrix&lt; double, 16, 6 &gt; &amp;</type>
      <name>wrenchFaceMatrix</name>
      <anchorfile>a02381.html</anchorfile>
      <anchor>aced5d5b44832c71dcdde1ebfe46f7c32</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>sagittal</name>
      <anchorfile>a02381.html</anchorfile>
      <anchor>a335b37445d20098b896931675aaedc34</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>lateral</name>
      <anchorfile>a02381.html</anchorfile>
      <anchor>a1a221647a888696d4d1837961e1b7a6d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>normal</name>
      <anchorfile>a02381.html</anchorfile>
      <anchor>a5f40394e257213822ca9b73a581b2c10</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>position</name>
      <anchorfile>a02381.html</anchorfile>
      <anchor>ab1b330e62ef0cb3d0d1b4db0a8e886fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>halfWidth</name>
      <anchorfile>a02381.html</anchorfile>
      <anchor>ad9eaefdf3407007a4c8f3dab5220d45c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>halfLength</name>
      <anchorfile>a02381.html</anchorfile>
      <anchor>a2778ca298df3670ee48b9c2fb269e44c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>anklePose</name>
      <anchorfile>a02381.html</anchorfile>
      <anchor>a1ebec093bad160567aca2d5ea46dc679</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>sagital</name>
      <anchorfile>a02381.html</anchorfile>
      <anchor>ac7880a19753e73389edd2b9ed0c120d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>lateral</name>
      <anchorfile>a02381.html</anchorfile>
      <anchor>a8e213b8f4786b25e7f84eb78132a3d4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>vertical</name>
      <anchorfile>a02381.html</anchorfile>
      <anchor>a58a17b848f5db25d422c17d56c82f6b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>surfaceName</name>
      <anchorfile>a02381.html</anchorfile>
      <anchor>a88df6c5efb4bf9e601ab5f3d82933cca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>surfacePose</name>
      <anchorfile>a02381.html</anchorfile>
      <anchor>a1c494354335f7d7aa16f0202b637ea98</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Eigen::Vector3d &gt; &amp;</type>
      <name>polygon</name>
      <anchorfile>a02381.html</anchorfile>
      <anchor>a5b6cfbb78cfb49c05589e1f861355853</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xmin</name>
      <anchorfile>a02381.html</anchorfile>
      <anchor>a2c628b2b87c83e06392028092bd89107</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xmax</name>
      <anchorfile>a02381.html</anchorfile>
      <anchor>adee46fe7d5c7596d13f2288c92a7a0c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ymin</name>
      <anchorfile>a02381.html</anchorfile>
      <anchor>a16f8c6cb34189692495e7afafb0b2ced</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ymax</name>
      <anchorfile>a02381.html</anchorfile>
      <anchor>a1ce5eeed46427c049da3050580e1456f</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::Contact</name>
    <filename>a01661.html</filename>
    <member kind="function">
      <type></type>
      <name>Contact</name>
      <anchorfile>a01661.html</anchorfile>
      <anchor>a569ffb048042c0924db72685d3850d2a</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, const std::string &amp;robotSurface, const std::string &amp;envSurface, double friction=defaultFriction)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Contact</name>
      <anchorfile>a01661.html</anchorfile>
      <anchor>a711291c387e7b26909dc6de01cb6f94d</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, const std::string &amp;robotSurface, const std::string &amp;envSurface, const sva::PTransformd &amp;X_es_rs, double friction=defaultFriction)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Contact</name>
      <anchorfile>a01661.html</anchorfile>
      <anchor>aa64e9ae1b141768ff36beab5ababfe62</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, unsigned int r1Index, unsigned int r2Index, const std::string &amp;r1Surface, const std::string &amp;r2Surface, double friction=defaultFriction, int ambiguityId=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Contact</name>
      <anchorfile>a01661.html</anchorfile>
      <anchor>a7bf365419cb070e0346b19deb39ef967</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, unsigned int r1Index, unsigned int r2Index, const std::string &amp;r1Surface, const std::string &amp;r2Surface, const sva::PTransformd &amp;X_r2s_r1s, double friction=defaultFriction, int ambiguityId=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Contact</name>
      <anchorfile>a01661.html</anchorfile>
      <anchor>a1e88a7e40daa8d2b1b1eb703681eec3c</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, unsigned int r1Index, unsigned int r2Index, const std::string &amp;r1Surface, const std::string &amp;r2Surface, const sva::PTransformd &amp;X_r2s_r1s, const sva::PTransformd &amp;X_b_s, double friction=defaultFriction, int ambiguityId=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Contact</name>
      <anchorfile>a01661.html</anchorfile>
      <anchor>ae5f2d788136b035561a499f6502701ae</anchor>
      <arglist>(const Contact &amp;contact)</arglist>
    </member>
    <member kind="function">
      <type>Contact &amp;</type>
      <name>operator=</name>
      <anchorfile>a01661.html</anchorfile>
      <anchor>a5b1021e931c554bd7aea2f6e3823a814</anchor>
      <arglist>(const Contact &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Contact</name>
      <anchorfile>a01661.html</anchorfile>
      <anchor>a2df9d85e287ed6d7f871d37b9d5dce95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>r1Index</name>
      <anchorfile>a01661.html</anchorfile>
      <anchor>aa48be551836f7c285dd373d2a0ce87cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>r2Index</name>
      <anchorfile>a01661.html</anchorfile>
      <anchor>a458502283c5a3f83ffc9cb851974dcdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::shared_ptr&lt; mc_rbdyn::Surface &gt; &amp;</type>
      <name>r1Surface</name>
      <anchorfile>a01661.html</anchorfile>
      <anchor>a308db2b2a5f434046db936ecae5acea6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::shared_ptr&lt; mc_rbdyn::Surface &gt; &amp;</type>
      <name>r2Surface</name>
      <anchorfile>a01661.html</anchorfile>
      <anchor>ab474bb24fbec7cda11deb827257970d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>X_r2s_r1s</name>
      <anchorfile>a01661.html</anchorfile>
      <anchor>a9deb8f52a9ea07b222b22102326589a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>X_r2s_r1s</name>
      <anchorfile>a01661.html</anchorfile>
      <anchor>a24d2d5e3381e4e863bea3c3d5f66b9c5</anchor>
      <arglist>(const sva::PTransformd &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>X_b_s</name>
      <anchorfile>a01661.html</anchorfile>
      <anchor>a840fb862241dd9ea8586c54733f9c2b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const int &amp;</type>
      <name>ambiguityId</name>
      <anchorfile>a01661.html</anchorfile>
      <anchor>a7f0e946a6448c600a2d4e8758a76e8f2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFixed</name>
      <anchorfile>a01661.html</anchorfile>
      <anchor>a7cc9fdeb70bb0ce49c00d052513430b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>friction</name>
      <anchorfile>a01661.html</anchorfile>
      <anchor>a54b141ffefe0b35cfed175e92d5220ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>friction</name>
      <anchorfile>a01661.html</anchorfile>
      <anchor>ae7a6d2761bed3b5ddc4f2f61f72000bc</anchor>
      <arglist>(double friction)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::string, std::string &gt;</type>
      <name>surfaces</name>
      <anchorfile>a01661.html</anchorfile>
      <anchor>ac48329027fe1bacf94046d859ff4d282</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sva::PTransformd</type>
      <name>X_0_r1s</name>
      <anchorfile>a01661.html</anchorfile>
      <anchor>a264707e8a87bb9a265583e14c16dcd28</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;robot) const</arglist>
    </member>
    <member kind="function">
      <type>sva::PTransformd</type>
      <name>X_0_r1s</name>
      <anchorfile>a01661.html</anchorfile>
      <anchor>afaf2d04a5bc477ee65742160ab6efa6e</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots) const</arglist>
    </member>
    <member kind="function">
      <type>sva::PTransformd</type>
      <name>X_0_r2s</name>
      <anchorfile>a01661.html</anchorfile>
      <anchor>a812161a2be97be624b190b4680dc21cb</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;robot) const</arglist>
    </member>
    <member kind="function">
      <type>sva::PTransformd</type>
      <name>X_0_r2s</name>
      <anchorfile>a01661.html</anchorfile>
      <anchor>a6be23bfafec507c064b00431499030ac</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; sva::PTransformd &gt;</type>
      <name>r1Points</name>
      <anchorfile>a01661.html</anchorfile>
      <anchor>ae816bfa2342aba72c0ab795683be3fc0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; sva::PTransformd &gt;</type>
      <name>r2Points</name>
      <anchorfile>a01661.html</anchorfile>
      <anchor>ae54975018f368092660612bb3d8e1d5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sva::PTransformd</type>
      <name>compute_X_r2s_r1s</name>
      <anchorfile>a01661.html</anchorfile>
      <anchor>ad0cb15ec589cb49c17ee23c38726a7dd</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots) const</arglist>
    </member>
    <member kind="function">
      <type>tasks::qp::ContactId</type>
      <name>contactId</name>
      <anchorfile>a01661.html</anchorfile>
      <anchor>ab3ebb29e5dc9a18a176fd4cc73bdb1c7</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots) const</arglist>
    </member>
    <member kind="function">
      <type>mc_solver::QPContactPtr</type>
      <name>taskContact</name>
      <anchorfile>a01661.html</anchorfile>
      <anchor>a3bf02462e834e4f4c41e660a35cbb219</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots) const</arglist>
    </member>
    <member kind="function">
      <type>mc_solver::QPContactPtrWPoints</type>
      <name>taskContactWPoints</name>
      <anchorfile>a01661.html</anchorfile>
      <anchor>a25167da185caf3c0766bf3d38662eaff</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, const sva::PTransformd *X_es_rs=nullptr) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toStr</name>
      <anchorfile>a01661.html</anchorfile>
      <anchor>a588405ba6ef27ddbd5155f9923eb6ed2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01661.html</anchorfile>
      <anchor>aaea8d15b3e88d845a98fc010459e69b1</anchor>
      <arglist>(const Contact &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a01661.html</anchorfile>
      <anchor>a3f7473e932a2666eadab5e23136aa7e0</anchor>
      <arglist>(const Contact &amp;rhs) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static mc_rbdyn::Contact</type>
      <name>load</name>
      <anchorfile>a01661.html</anchorfile>
      <anchor>a6929934e5fbe74f4fb6afe1949a26100</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::vector&lt; mc_rbdyn::Contact &gt;</type>
      <name>loadVector</name>
      <anchorfile>a01661.html</anchorfile>
      <anchor>a37b8d4f38c38cfac2a4517207d4d6763</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>nrConeGen</name>
      <anchorfile>a01661.html</anchorfile>
      <anchor>aac270db0e23b02eb4906922862bf8086</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>defaultFriction</name>
      <anchorfile>a01661.html</anchorfile>
      <anchor>a84813e75f0a4d9e421fb4a65fd7d96c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr unsigned int</type>
      <name>nrBilatPoints</name>
      <anchorfile>a01661.html</anchorfile>
      <anchor>a09ed33807af99b34743159c7ab72cb41</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_solver::ContactConstraint</name>
    <filename>a02209.html</filename>
    <base>mc_solver::ConstraintSet</base>
    <member kind="enumeration">
      <type></type>
      <name>ContactType</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>aa1038fc325c517503d2f68a3feec1c30</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Acceleration</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>aa1038fc325c517503d2f68a3feec1c30acbc392a30777e1fa953eea2c011ea2c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Velocity</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>aa1038fc325c517503d2f68a3feec1c30a15d06b5b0997a0a5e17eccd053c7c652</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Position</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>aa1038fc325c517503d2f68a3feec1c30a75ced229938828d7cf205928657fd137</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Acceleration</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>aa1038fc325c517503d2f68a3feec1c30acbc392a30777e1fa953eea2c011ea2c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Velocity</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>aa1038fc325c517503d2f68a3feec1c30a15d06b5b0997a0a5e17eccd053c7c652</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Position</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>aa1038fc325c517503d2f68a3feec1c30a75ced229938828d7cf205928657fd137</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ContactConstraint</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a2226b4449ee6faeb3f6d70cfdfb13b4f</anchor>
      <arglist>(double timeStep, ContactType contactType=Velocity, bool dynamics=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addToSolver</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a3e94d3c790da36671345692cbf14e81d</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, tasks::qp::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeFromSolver</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>af72efeda2c9cd6af2e4626f32ab7583d</anchor>
      <arglist>(tasks::qp::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ContactConstraint</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>ad4a4d2baaacb8b1d914d66a0110c99ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; tasks::qp::ContactConstr &gt;</type>
      <name>contactConstr</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>ad8b6359d4d1a771db2fd8bad433acf1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; tasks::qp::PositiveLambda &gt;</type>
      <name>posLambdaConstr</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a4456741f8ae0b07c199415fda9b9aecf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::lipm_stabilizer::ContactDescription</name>
    <filename>a02385.html</filename>
    <member kind="variable">
      <type>EIGEN_MAKE_ALIGNED_OPERATOR_NEW ContactState</type>
      <name>first</name>
      <anchorfile>a02385.html</anchorfile>
      <anchor>a720106ef8ea5446eee2a582d7d52eb2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>internal::Contact</type>
      <name>second</name>
      <anchorfile>a02385.html</anchorfile>
      <anchor>a8dad298937c721041146a906fdbddb68</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_solver::ContactMsg</name>
    <filename>a02277.html</filename>
    <member kind="variable">
      <type>uint16_t</type>
      <name>r1_index</name>
      <anchorfile>a02277.html</anchorfile>
      <anchor>a91f4355799d2e97441538f28adf25071</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>r2_index</name>
      <anchorfile>a02277.html</anchorfile>
      <anchor>aaaa28b666db138b8073c87f0367408ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>r1_body</name>
      <anchorfile>a02277.html</anchorfile>
      <anchor>ad8c4a5aae685b15b8dffeddcb01aa9f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>r2_body</name>
      <anchorfile>a02277.html</anchorfile>
      <anchor>a30084dbbeaca445a811e2b169344919d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>r1_surface</name>
      <anchorfile>a02277.html</anchorfile>
      <anchor>a7af4dca57bbecf5e3397e7ea4f11a360</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>r2_surface</name>
      <anchorfile>a02277.html</anchorfile>
      <anchor>a7d179ea79ffefc9a499c3300b4fba396</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; sva::PTransformd &gt;</type>
      <name>r1_points</name>
      <anchorfile>a02277.html</anchorfile>
      <anchor>a7ffb13c3e88fdefbdf8ad51aab184c16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sva::PTransformd</type>
      <name>X_b1_b2</name>
      <anchorfile>a02277.html</anchorfile>
      <anchor>a0c97419447f414150d56fb8cc8ea791e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>nr_generators</name>
      <anchorfile>a02277.html</anchorfile>
      <anchor>a5c34937b82f901be184a1de7ae8d1dd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>mu</name>
      <anchorfile>a02277.html</anchorfile>
      <anchor>a9e1941c9323f825326c7f8d64fac14ac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_solver::utils::ContactWrenchMatrixToLambdaMatrix</name>
    <filename>a02301.html</filename>
    <member kind="function">
      <type></type>
      <name>ContactWrenchMatrixToLambdaMatrix</name>
      <anchorfile>a02301.html</anchorfile>
      <anchor>a023d5ba6b69792d96db4ca6e8fd20e2c</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::MatrixXd</type>
      <name>transform</name>
      <anchorfile>a02301.html</anchorfile>
      <anchor>a3024b20e8f098756d24cd2082469c055</anchor>
      <arglist>(const Eigen::MatrixXd &amp;A) const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>transform</name>
      <anchorfile>a02301.html</anchorfile>
      <anchor>ae56a8607e4c339c9a345155ec613032d</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_control::fsm::Controller</name>
    <filename>a01397.html</filename>
    <base>mc_control::MCController</base>
    <member kind="function">
      <type></type>
      <name>Controller</name>
      <anchorfile>a01397.html</anchorfile>
      <anchor>a5e0523baab1c8ec0905f7715115d41c6</anchor>
      <arglist>(std::shared_ptr&lt; mc_rbdyn::RobotModule &gt; rm, double dt, const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Controller</name>
      <anchorfile>a01397.html</anchorfile>
      <anchor>a18c01ab44c3b2b9ab7025e6999a78e43</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a01397.html</anchorfile>
      <anchor>af87858917b432bbd4a9c728a4e344d1e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a01397.html</anchorfile>
      <anchor>a95a622b78163a77aa4d11d44101bc292</anchor>
      <arglist>(mc_solver::FeedbackType fType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a01397.html</anchorfile>
      <anchor>af8027a5c80b5f9b0d45616517299f3c3</anchor>
      <arglist>(const ControllerResetData &amp;data) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interrupt</name>
      <anchorfile>a01397.html</anchorfile>
      <anchor>a79c045371408e4adfaa31d6f7563fef5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>running</name>
      <anchorfile>a01397.html</anchorfile>
      <anchor>a59903f739677ea9f89b0cc8f0cdc051d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>resume</name>
      <anchorfile>a01397.html</anchorfile>
      <anchor>a8aa919380e8d3cb3105b899f5f386052</anchor>
      <arglist>(const std::string &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCollisions</name>
      <anchorfile>a01397.html</anchorfile>
      <anchor>a93448016e3467364e352d87cdb0dae89</anchor>
      <arglist>(const std::string &amp;r1, const std::string &amp;r2, const std::vector&lt; mc_rbdyn::Collision &gt; &amp;collisions)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeCollisions</name>
      <anchorfile>a01397.html</anchorfile>
      <anchor>a6553b3c43b65224a8aaca76784d7e9e8</anchor>
      <arglist>(const std::string &amp;r1, const std::string &amp;r2, const std::vector&lt; mc_rbdyn::Collision &gt; &amp;collisions)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeCollisions</name>
      <anchorfile>a01397.html</anchorfile>
      <anchor>a470d82a6de92ac6a42d13e13a351f738</anchor>
      <arglist>(const std::string &amp;r1, const std::string &amp;r2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasRobot</name>
      <anchorfile>a01397.html</anchorfile>
      <anchor>a3efb2acf6c10576d5deb7001f9b4fdc9</anchor>
      <arglist>(const std::string &amp;robot) const</arglist>
    </member>
    <member kind="function">
      <type>mc_rbdyn::Robot &amp;</type>
      <name>robot</name>
      <anchorfile>a01397.html</anchorfile>
      <anchor>aa80d2de4cc6e092e1659db0135d7d6f3</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; mc_tasks::PostureTask &gt;</type>
      <name>getPostureTask</name>
      <anchorfile>a01397.html</anchorfile>
      <anchor>ab5db53d98290f650552bcb57a42353b5</anchor>
      <arglist>(const std::string &amp;robot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addContact</name>
      <anchorfile>a01397.html</anchorfile>
      <anchor>afc21d62af737dc80c7b62b1fbc9c742e</anchor>
      <arglist>(const Contact &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeContact</name>
      <anchorfile>a01397.html</anchorfile>
      <anchor>aa5141b7ae41b4378c29758a69515c7b4</anchor>
      <arglist>(const Contact &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>const ContactSet &amp;</type>
      <name>contacts</name>
      <anchorfile>a01397.html</anchorfile>
      <anchor>a95a11b1d9a3ca77f322d1ec1b7819e08</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasContact</name>
      <anchorfile>a01397.html</anchorfile>
      <anchor>a7a64b59e262c533dc2eeb5e9aea0e7d3</anchor>
      <arglist>(const Contact &amp;c) const</arglist>
    </member>
    <member kind="function">
      <type>mc_solver::ContactConstraint &amp;</type>
      <name>contactConstraint</name>
      <anchorfile>a01397.html</anchorfile>
      <anchor>afc0ff4e1c1bec2352684291698b467dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StateFactory &amp;</type>
      <name>factory</name>
      <anchorfile>a01397.html</anchorfile>
      <anchor>acf6e4968c19820c0928e459dd42d0d64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>Executor</name>
      <anchorfile>a01397.html</anchorfile>
      <anchor>abde1658ded2ac75f5466b223e73135d9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_control::ControllerClient</name>
    <filename>a01381.html</filename>
    <member kind="function">
      <type></type>
      <name>ControllerClient</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a6f07073d0c388e08b2fe2bf153220592</anchor>
      <arglist>(const std::string &amp;sub_conn_uri, const std::string &amp;push_conn_uri, double timeout=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ControllerClient</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a2cd360c85e2aa389a1935cb4888e3eaa</anchor>
      <arglist>(const ControllerClient &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>ControllerClient &amp;</type>
      <name>operator=</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a074db2a5771b6afe795da5d04967254c</anchor>
      <arglist>(const ControllerClient &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ControllerClient</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a560565455af1e13bdfb19d01b3945b51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send_request</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>ade72000ce29ac5d99b1420ebdaa778e4</anchor>
      <arglist>(const ElementId &amp;id, const mc_rtc::Configuration &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send_request</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a3ecf129fcdb4a209f2e952f2fb5b40ba</anchor>
      <arglist>(const ElementId &amp;id, const T &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send_request</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>aae5889005ac498f95d2517bafbecff0e</anchor>
      <arglist>(const ElementId &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeout</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>acfbf74c5219464896a5645a8a9c71418</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>timeout</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>abd6834ef752be33759988b9b204fccc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>start</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a813107a59769a9f711468e4e9111a0ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reconnect</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>abdbe8eadba9fe6727e1e546f5ade5b72</anchor>
      <arglist>(const std::string &amp;sub_conn_uri, const std::string &amp;push_conn_uri)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>stop</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>ad1e94bd058041de68feb4a88606c7331</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handle_gui_state</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a07e30567d1215c01296475921c86bea4</anchor>
      <arglist>(mc_rtc::Configuration state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handle_category</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a28e0acd47648df1d519b666153a91d6f</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;parent, const std::string &amp;category, const mc_rtc::Configuration &amp;data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handle_widget</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a11c2557bb1e901704673e8f183b7d836</anchor>
      <arglist>(const ElementId &amp;id, const mc_rtc::Configuration &amp;data)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>started</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a5a8c9fb90474687ba5ec42ae0dc5e4a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>stopped</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a54a149a6c1469d1450f5ed6603579cd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>category</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>ac3abb32d07e376cfcd13159a972d377f</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;parent, const std::string &amp;category)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>label</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a9665c7fab4bf12b87bc772c8e48b6276</anchor>
      <arglist>(const ElementId &amp;id, const std::string &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>array_label</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a327ade0fbd27527c4d83f885fc744ef4</anchor>
      <arglist>(const ElementId &amp;id, const std::vector&lt; std::string &gt; &amp;, const Eigen::VectorXd &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>button</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>ac6d9b4568ab2dfeebbb5e19c78306326</anchor>
      <arglist>(const ElementId &amp;id)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>checkbox</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a3ebc35a5a17725ef5bfed9968b83f106</anchor>
      <arglist>(const ElementId &amp;id, bool)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>string_input</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a3a8f08dc27a724236d70fb3de14254a2</anchor>
      <arglist>(const ElementId &amp;id, const std::string &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>integer_input</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a8143ce2b279040226ec45c089f87503b</anchor>
      <arglist>(const ElementId &amp;id, int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>number_input</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a58745bfe86ed5c1a3cfdbc96592db6f2</anchor>
      <arglist>(const ElementId &amp;id, double)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>number_slider</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>ad4561530dd4b6a383c89aeca8bf858e7</anchor>
      <arglist>(const ElementId &amp;id, double, double, double)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>array_input</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a8c364a5ff385ecef3e8e7ffd55eb37e7</anchor>
      <arglist>(const ElementId &amp;id, const std::vector&lt; std::string &gt; &amp;, const Eigen::VectorXd &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>combo_input</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a6ba87fb7ef3a74ae9a27a0f30e6840a6</anchor>
      <arglist>(const ElementId &amp;id, const std::vector&lt; std::string &gt; &amp;, const std::string &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>data_combo_input</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a28e94c8580fc611677912166d5f8bdaa</anchor>
      <arglist>(const ElementId &amp;id, const std::vector&lt; std::string &gt; &amp;, const std::string &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>point3d</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a97764f539b0c5aa4a668304a2d86f83c</anchor>
      <arglist>(const ElementId &amp;id, const ElementId &amp;, bool, const Eigen::Vector3d &amp;, const mc_rtc::gui::PointConfig &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>trajectory</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>ae3ab0954180e484c37db80654c2b1d5c</anchor>
      <arglist>(const ElementId &amp;id, const std::vector&lt; Eigen::Vector3d &gt; &amp;, const mc_rtc::gui::LineConfig &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>trajectory</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a69e95ea4eb46b0a82b6c28bb966a6be1</anchor>
      <arglist>(const ElementId &amp;id, const std::vector&lt; sva::PTransformd &gt; &amp;, const mc_rtc::gui::LineConfig &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>trajectory</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>ad809e856748eb8b70110bf2e2ffb3e6a</anchor>
      <arglist>(const ElementId &amp;id, const Eigen::Vector3d &amp;, const mc_rtc::gui::LineConfig &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>trajectory</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a0f4d3238fdc79a6dabd460ce6fbdb217</anchor>
      <arglist>(const ElementId &amp;id, const sva::PTransformd &amp;, const mc_rtc::gui::LineConfig &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>polygon</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a9b237bbf2c2441f2d80e9c2b825dcb1b</anchor>
      <arglist>(const ElementId &amp;id, const std::vector&lt; std::vector&lt; Eigen::Vector3d &gt;&gt; &amp;, const mc_rtc::gui::Color &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>force</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a6ffb3069d9cae0537836e2aa88de1929</anchor>
      <arglist>(const ElementId &amp;id, const ElementId &amp;, const sva::ForceVecd &amp;, const sva::PTransformd &amp;, const mc_rtc::gui::ForceConfig &amp;, bool)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>arrow</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a092462de7c07034906cc44ad38f112af</anchor>
      <arglist>(const ElementId &amp;id, const ElementId &amp;, const Eigen::Vector3d &amp;, const Eigen::Vector3d &amp;, const mc_rtc::gui::ArrowConfig &amp;, bool)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>rotation</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a323427c958144adfc5a1593775566f36</anchor>
      <arglist>(const ElementId &amp;id, const ElementId &amp;, bool, const sva::PTransformd &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>transform</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>ae0c7c17c332c1d82f8dae1db99d587bb</anchor>
      <arglist>(const ElementId &amp;id, const ElementId &amp;, bool, const sva::PTransformd &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>xytheta</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a16b34b76a04260ab27ba965dbd6af346</anchor>
      <arglist>(const ElementId &amp;id, const ElementId &amp;, bool, const Eigen::Vector3d &amp;, double)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>schema</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>ad39ed0c2af0c45bc2a1f7f931e0ed360</anchor>
      <arglist>(const ElementId &amp;id, const std::string &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>form</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a58439f0f063f69e3fce020002e56e93c</anchor>
      <arglist>(const ElementId &amp;id)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>form_checkbox</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>ae3244e80dcf44ec423924b09a6b39095</anchor>
      <arglist>(const ElementId &amp;, const std::string &amp;, bool, bool)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>form_integer_input</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>aa9a4c2dc5ad1bd01264a7f7a206273de</anchor>
      <arglist>(const ElementId &amp;, const std::string &amp;, bool, int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>form_number_input</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>ae5d35906c488252e7ddd9efb814ce112</anchor>
      <arglist>(const ElementId &amp;, const std::string &amp;, bool, double)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>form_string_input</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>ab0dd6c14e71101fda3c7cfaf169424d7</anchor>
      <arglist>(const ElementId &amp;, const std::string &amp;, bool, const std::string &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>form_array_input</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>acfa7906e586edddddcdf3603a2904c70</anchor>
      <arglist>(const ElementId &amp;, const std::string &amp;, bool, const Eigen::VectorXd &amp;, bool)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>form_combo_input</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>aaf37cf840f4ecec192fb6fdfe02ed017</anchor>
      <arglist>(const ElementId &amp;, const std::string &amp;, bool, const std::vector&lt; std::string &gt; &amp;, bool)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>form_data_combo_input</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a10ed23f9fa2c7a960a36178b64d83ac6</anchor>
      <arglist>(const ElementId &amp;, const std::string &amp;, bool, const std::vector&lt; std::string &gt; &amp;, bool)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>start_plot</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a3fb1503ce946c0835a3d9514f5337f05</anchor>
      <arglist>(uint64_t, const std::string &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>plot_setup_xaxis</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>ae7d1fd65a91be05ac94dd3553756672d</anchor>
      <arglist>(uint64_t, const std::string &amp;, const mc_rtc::gui::plot::Range &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>plot_setup_yaxis_left</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a46be1683943027f7ac3411d0f9e42b11</anchor>
      <arglist>(uint64_t, const std::string &amp;, const mc_rtc::gui::plot::Range &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>plot_setup_yaxis_right</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>aaf45cba73871dd0a268e73569db3230d</anchor>
      <arglist>(uint64_t, const std::string &amp;, const mc_rtc::gui::plot::Range &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>plot_point</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a81f6f9b3b11314b1d2d14a32b31d2c9e</anchor>
      <arglist>(uint64_t, uint64_t, const std::string &amp;, double, double, mc_rtc::gui::Color, mc_rtc::gui::plot::Style, mc_rtc::gui::plot::Side)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>plot_polygon</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a54324c45dd27937e1964844808f7befd</anchor>
      <arglist>(uint64_t, uint64_t, const std::string &amp;, const mc_rtc::gui::plot::PolygonDescription &amp;, mc_rtc::gui::plot::Side)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>plot_polygons</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a66ecd2aa8e9e4fa3c1215f887c04323a</anchor>
      <arglist>(uint64_t, uint64_t, const std::string &amp;, const std::vector&lt; mc_rtc::gui::plot::PolygonDescription &gt; &amp;, mc_rtc::gui::plot::Side)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>end_plot</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>ad6a96de214fd727f64042a190fcfa281</anchor>
      <arglist>(uint64_t)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>run_</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>aebaab2ca01fe90e61c5902a94bbf99fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>sub_socket_</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>ae3cb858a8d61b53bb9acadcf0f967972</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::thread</type>
      <name>sub_th_</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>aae3f415ab7a4cd6bfdd69ecfb2d78833</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>push_socket_</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a5b263154cbd2d5fc7ccd281c86935af2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>timeout_</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a13ae5d70177dd8a762cbd416cfff0f74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rtc::Configuration</type>
      <name>data_</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a881be407dfadc093f9ad1dd638922688</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_control::ControllerResetData</name>
    <filename>a01505.html</filename>
    <member kind="variable">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>q</name>
      <anchorfile>a01505.html</anchorfile>
      <anchor>ac3dbbf827ccf63e00f0f7c7be7f32539</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_control::ControllerServer</name>
    <filename>a01385.html</filename>
    <member kind="function">
      <type></type>
      <name>ControllerServer</name>
      <anchorfile>a01385.html</anchorfile>
      <anchor>ac13be9e36cf38cb6bdde4cc8b4b19250</anchor>
      <arglist>(double dt, double server_dt, const std::vector&lt; std::string &gt; &amp;pub_bind_uri, const std::vector&lt; std::string &gt; &amp;pull_bind_uri)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ControllerServer</name>
      <anchorfile>a01385.html</anchorfile>
      <anchor>aa4ef79cfb9afe739ee67b64b66969f97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handle_requests</name>
      <anchorfile>a01385.html</anchorfile>
      <anchor>a734ffb48f73a37374b9b51c4c7655507</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;gui_builder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>publish</name>
      <anchorfile>a01385.html</anchorfile>
      <anchor>a38c2d4255f3f4db5c9315f3c7468b87f</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;gui_builder)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::force::CoPTask</name>
    <filename>a02361.html</filename>
    <base>mc_tasks::force::DampingTask</base>
    <member kind="function">
      <type>EIGEN_MAKE_ALIGNED_OPERATOR_NEW</type>
      <name>CoPTask</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>a3dedcf002fe1b00d9245ebfa8991e203</anchor>
      <arglist>(const std::string &amp;robotSurface, const mc_rbdyn::Robots &amp;robots, unsigned robotIndex, double stiffness=5.0, double weight=1000.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>a08e79c703fb2f70db56a7c64e27acd02</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::function&lt; bool(const mc_tasks::MetaTask &amp;, std::string &amp;)&gt;</type>
      <name>buildCompletionCriteria</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>a7467766fa42546e99c0d253aac7af98d</anchor>
      <arglist>(double dt, const mc_rtc::Configuration &amp;config) const override</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector2d</type>
      <name>measuredCoP</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>acf756c0e7e6aa1fbb60feb6491427411</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>measuredCoPW</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>a16f95e7ea6a037950ea6b8eb5e57b58d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZeroTargetWrench</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>ae95ca91c45eb45a1946e84377ddffa8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector2d &amp;</type>
      <name>targetCoP</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>a4ace3b81e36d8ac60271b68b78c4f58a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>targetCoPW</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>a62f7869ba91d79176a54e1c8a8cf5aaf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>targetCoP</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>ac56ea4b1b75de8e99ed5e51bf919c7fb</anchor>
      <arglist>(const Eigen::Vector2d &amp;targetCoP)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>targetForce</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>aa452d416c7f6df4f3b5ddc511db246a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>targetForce</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>af250603b7c162ce5dd654825dea2af7e</anchor>
      <arglist>(const Eigen::Vector3d &amp;targetForce)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>targetForceW</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>a9f7344de19e35fda42d0dc3c493b8f11</anchor>
      <arglist>(const Eigen::Vector3d &amp;targetForceW)</arglist>
    </member>
    <member kind="function">
      <type>const sva::ForceVecd &amp;</type>
      <name>targetWrench</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>a58ef8d30ea6ea9f78d7d36340975d985</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToLogger</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>a88921c026455b21462952325fe1a0737</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeFromLogger</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>ae2ff4b29d342493a03388741d940106b</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>a29acffdd2df70a8ec753054414951586</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;gui) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_planning::motion_interpolator::CubicSplineBase</name>
    <filename>a01565.html</filename>
    <templarg></templarg>
    <base>mc_planning::motion_interpolator::InterpolatorBase</base>
    <member kind="function">
      <type></type>
      <name>CubicSplineBase</name>
      <anchorfile>a01565.html</anchorfile>
      <anchor>a8d77b611ab8762abafca94c7ba42fff8</anchor>
      <arglist>(const double &amp;scale=1.0, const double &amp;eps=1.0e-3, interpolator_type ip_type_=NOT_SELECTED)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get</name>
      <anchorfile>a01565.html</anchorfile>
      <anchor>a3c171b0fe3bdc65958cba40290672ac6</anchor>
      <arglist>(T t_, double &amp;p, double &amp;v, double &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01565.html</anchorfile>
      <anchor>af8c10d56ce280630e14d0c26b318e80a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01565.html</anchorfile>
      <anchor>a2b994349e4696644bfcb424260da0719</anchor>
      <arglist>(T t_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01565.html</anchorfile>
      <anchor>a75f710b6bdffac4b4d64250b64096da8</anchor>
      <arglist>(T t_from, T t_to)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getPointToPoint</name>
      <anchorfile>a01565.html</anchorfile>
      <anchor>aca6a6f2b0334ece0286d4aaa8f2920db</anchor>
      <arglist>(T t_, double &amp;p, double &amp;v, double &amp;a, unsigned int n_segment)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>makeSplineTable</name>
      <anchorfile>a01565.html</anchorfile>
      <anchor>a2f4e8f51d5de3453ab788db83f594a6c</anchor>
      <arglist>(unsigned int n_base, unsigned int n_segment, unsigned int n_offset, const double &amp;qn, const double &amp;un)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>setSplineCoeff</name>
      <anchorfile>a01565.html</anchorfile>
      <anchor>adb12d2afaa46efc1c008feb194f3ac5d</anchor>
      <arglist>(unsigned int n_base, unsigned int n_segment, unsigned int n_offset)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>coeff</name>
      <anchorfile>a01565.html</anchorfile>
      <anchor>ade0b6d36ebca0b30aa4e003724813ab4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::CylindricalSurface</name>
    <filename>a01665.html</filename>
    <base>mc_rbdyn::Surface</base>
    <member kind="function">
      <type></type>
      <name>CylindricalSurface</name>
      <anchorfile>a01665.html</anchorfile>
      <anchor>ac3eef75ab4cf0a7808e37ce6bd60e171</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;bodyName, const sva::PTransformd &amp;X_b_s, const std::string &amp;materialName, const double &amp;radius, const double &amp;width)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CylindricalSurface</name>
      <anchorfile>a01665.html</anchorfile>
      <anchor>a94041ce7602917987e5829eff07f5ad4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computePoints</name>
      <anchorfile>a01665.html</anchorfile>
      <anchor>a0c548d2b3f2f16066e260b9e0a89d56c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>radius</name>
      <anchorfile>a01665.html</anchorfile>
      <anchor>abd86a4d9aef83ff0a5fd7a9540d81a8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>width</name>
      <anchorfile>a01665.html</anchorfile>
      <anchor>ad4b8a89811ebfc71a3793db69282626a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>width</name>
      <anchorfile>a01665.html</anchorfile>
      <anchor>ae129c776f6d6bdc8b84151121747a46f</anchor>
      <arglist>(const double &amp;width)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Surface &gt;</type>
      <name>copy</name>
      <anchorfile>a01665.html</anchorfile>
      <anchor>af7ea1fd2bee8c3d0dacbae34d5242422</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>type</name>
      <anchorfile>a01665.html</anchorfile>
      <anchor>a221eebcca494033504b7898f95396b73</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::force::DampingTask</name>
    <filename>a02365.html</filename>
    <base>mc_tasks::force::AdmittanceTask</base>
    <member kind="function">
      <type>EIGEN_MAKE_ALIGNED_OPERATOR_NEW</type>
      <name>DampingTask</name>
      <anchorfile>a02365.html</anchorfile>
      <anchor>a2c1e4bcf5659f1aa07ed16afb7df9110</anchor>
      <arglist>(const std::string &amp;robotSurface, const mc_rbdyn::Robots &amp;robots, unsigned robotIndex, double stiffness=5.0, double weight=1000.0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02365.html</anchorfile>
      <anchor>aa65d048edcb0c01c8863f7da13750f8a</anchor>
      <arglist>(mc_solver::QPSolver &amp;) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::DataComboInputImpl</name>
    <filename>a01893.html</filename>
    <templarg>GetT</templarg>
    <templarg>SetT</templarg>
    <base>mc_rtc::gui::CommonInputImpl</base>
    <member kind="function">
      <type></type>
      <name>DataComboInputImpl</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a571856b4ac446cb847df167cca1bb5ae</anchor>
      <arglist>(const std::string &amp;name, const std::vector&lt; std::string &gt; &amp;data_ref, GetT get_fn, SetT set_fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ad79979e960ca7b50f5f9b2d0cf94d90d</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DataComboInputImpl</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a5316b6d565ef6e59a40f112d3682ea74</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a439d4fefa96b4619041a43f8b2109255</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a066cabfbd0d24dcb5981be55147377a7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::DataElement</name>
    <filename>a01917.html</filename>
    <templarg></templarg>
    <base>mc_rtc::gui::Element</base>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a9f5405a5613389910551ed9e86e35b9b</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DataElement</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a65d486d790fd684f1fdd422a36a4b662</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DataElement</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a16c128617f3f6e4bc2257f811721e92d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>af0401db3e91435848055af583ec602f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GetT</type>
      <name>get_fn_</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a8a959ac2e5e7551b29b81b77034ea255</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::DataStore</name>
    <filename>a01853.html</filename>
    <member kind="function">
      <type></type>
      <name>DataStore</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a278c3edc06f9833dce8bde478bfc543c</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DataStore</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a51d68205f21783cddb1c6c64610ae1b1</anchor>
      <arglist>(const DataStore &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>DataStore &amp;</type>
      <name>operator=</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a0add9317df9a0f9617a17b935f9032dd</anchor>
      <arglist>(const DataStore &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DataStore</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>aa744afa8f6adbd65e50e659d123c48e2</anchor>
      <arglist>(DataStore &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>DataStore &amp;</type>
      <name>operator=</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a94325df0f7486855ea330997a0bba562</anchor>
      <arglist>(DataStore &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>aa4bc5b9b1a870160b05a322809fa75ee</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>get</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>af3fe621267da647c0691c444571b555a</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>get</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a7a8ea0e8bcf03d8bf3e8526613649449</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a75f4f16b910f82c1d574bddc045f0e0f</anchor>
      <arglist>(const std::string &amp;name, T &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>get</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a84af319d5fbe601a45916587a650cbcb</anchor>
      <arglist>(const std::string &amp;name, const T &amp;defaultValue) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a66db8387d05a3f515e22ccdfe86c7b0d</anchor>
      <arglist>(const std::string &amp;name, const T &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>make</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a96e901b0b2a651aec1c6ffda2948a422</anchor>
      <arglist>(const std::string &amp;name, Args &amp;&amp;... args)</arglist>
      <docanchor file="a01853">make</docanchor>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>make_call</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>acad8593d08b3abccddafadb6fe588645</anchor>
      <arglist>(const std::string &amp;name, T fn) -&gt; typename internal::lambda_traits&lt; T &gt;::fn_t &amp;</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>make_initializer</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>ac02a9ef47c3c352094d032f0fc487a81</anchor>
      <arglist>(const std::string &amp;name, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>RetT</type>
      <name>call</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a82a98fff5bbd7050f611f7168b24c1eb</anchor>
      <arglist>(const std::string &amp;name, ArgsT &amp;&amp;... args) const</arglist>
    </member>
    <member kind="function">
      <type>RetT</type>
      <name>call</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>aa8ecee836cc65a28b11f9b83da651e6e</anchor>
      <arglist>(const std::string &amp;name, ArgsT &amp;&amp;... args) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>af447ebb9444a9a82c0ee95f115eb480c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>name</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>acb052be963744c09faf14aa2b85bf2dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>name</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>ad1fe100eb7cb874c226ff76ed64f3cfe</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_control::fsm::ParallelState::DelayedState</name>
    <filename>a01453.html</filename>
    <member kind="function">
      <type></type>
      <name>DelayedState</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>a217adbd0ad2da8c746df98646c67ffcb</anchor>
      <arglist>(Controller &amp;ctl, const std::string &amp;name, double delay, mc_rtc::Configuration config)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>a0069412544d7a76f5c724b570342918b</anchor>
      <arglist>(Controller &amp;ctl, double time)</arglist>
    </member>
    <member kind="function">
      <type>StatePtr &amp;</type>
      <name>state</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>a4fcc3ba3af0b760e0a62253e625ec3b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>name</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>a73fc5ce2daf4b44468e4138e9b637df8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::Device</name>
    <filename>a01669.html</filename>
    <member kind="function">
      <type></type>
      <name>Device</name>
      <anchorfile>a01669.html</anchorfile>
      <anchor>ab03a19828b8a5e670beb832a18e42281</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;parent, const sva::PTransformd &amp;X_p_s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Device</name>
      <anchorfile>a01669.html</anchorfile>
      <anchor>a9ef17bdaf954ee5a88ea1673ef94a625</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>name</name>
      <anchorfile>a01669.html</anchorfile>
      <anchor>ac7f03a01fbf81e9e65c595e06c8db3a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>type</name>
      <anchorfile>a01669.html</anchorfile>
      <anchor>a5f2b9cec0aafca49e350696f9fcc2cf5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>parent</name>
      <anchorfile>a01669.html</anchorfile>
      <anchor>aa4fa7c2fd9c533abc6e1bd965f128650</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>X_p_s</name>
      <anchorfile>a01669.html</anchorfile>
      <anchor>a018981488a410e62be4605726f953507</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sva::PTransformd</type>
      <name>X_0_s</name>
      <anchorfile>a01669.html</anchorfile>
      <anchor>a89cf1a897146d487c4f2c9c915ff3ec5</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;robot) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DevicePtr</type>
      <name>clone</name>
      <anchorfile>a01669.html</anchorfile>
      <anchor>a836b2415a1379592403363bdc2dda8b0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>type_</name>
      <anchorfile>a01669.html</anchorfile>
      <anchor>a3b2069f13010466c01739606cd39d1a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>name_</name>
      <anchorfile>a01669.html</anchorfile>
      <anchor>abf31b34d57b3746dd96a745d67b5dbde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>parent_</name>
      <anchorfile>a01669.html</anchorfile>
      <anchor>aa24ec57cfee577ff0e85317ff4588c98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::PTransformd</type>
      <name>X_p_s_</name>
      <anchorfile>a01669.html</anchorfile>
      <anchor>a6a5a93f9a1e463e41da680695aca29c7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::DevicePtrVector</name>
    <filename>a01753.html</filename>
    <member kind="function">
      <type></type>
      <name>DevicePtrVector</name>
      <anchorfile>a01753.html</anchorfile>
      <anchor>a39850850b50df785442c15d242d815f3</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI</type>
      <name>DevicePtrVector</name>
      <anchorfile>a01753.html</anchorfile>
      <anchor>a5f5834c7848c1593e4dda8556731c172</anchor>
      <arglist>(const DevicePtrVector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI DevicePtrVector &amp;</type>
      <name>operator=</name>
      <anchorfile>a01753.html</anchorfile>
      <anchor>af28db08209588618e620a65c4187f34b</anchor>
      <arglist>(const DevicePtrVector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DevicePtrVector</name>
      <anchorfile>a01753.html</anchorfile>
      <anchor>a4190aad2585fa49da5d130316a163741</anchor>
      <arglist>(DevicePtrVector &amp;&amp;v)=default</arglist>
    </member>
    <member kind="function">
      <type>DevicePtrVector &amp;</type>
      <name>operator=</name>
      <anchorfile>a01753.html</anchorfile>
      <anchor>a13610008605e9a409dc6b3c7efa4ec66</anchor>
      <arglist>(DevicePtrVector &amp;&amp;v)=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_solver::DynamicsConstraint</name>
    <filename>a02213.html</filename>
    <base>mc_solver::KinematicsConstraint</base>
    <member kind="function">
      <type></type>
      <name>DynamicsConstraint</name>
      <anchorfile>a02213.html</anchorfile>
      <anchor>a0f1097a536c65e610735d3314e86a4e3</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, double timeStep, bool infTorque=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynamicsConstraint</name>
      <anchorfile>a02213.html</anchorfile>
      <anchor>a330391bd86278523ae70830fc2d7e9f9</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, double timeStep, const std::array&lt; double, 3 &gt; &amp;damper, double velocityPercent=1.0, bool infTorque=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addToSolver</name>
      <anchorfile>a02213.html</anchorfile>
      <anchor>a08413ca37fc394ed2b3f692f2bcc8e44</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, tasks::qp::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeFromSolver</name>
      <anchorfile>a02213.html</anchorfile>
      <anchor>ac37f401f997c13db2b3a3cf080f0bd4b</anchor>
      <arglist>(tasks::qp::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inSolver</name>
      <anchorfile>a02213.html</anchorfile>
      <anchor>ad1eea623f5d96d9d75043108d4251911</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>robotIndex</name>
      <anchorfile>a02213.html</anchorfile>
      <anchor>af226f3dc547957b5700408bcc6688f7a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynamicsConstraint</name>
      <anchorfile>a02213.html</anchorfile>
      <anchor>a2adb5f59889ad682361cbdd940e7d527</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; tasks::qp::MotionConstr &gt;</type>
      <name>motionConstr</name>
      <anchorfile>a02213.html</anchorfile>
      <anchor>a888094b65574aed3b2bb86a67a744a44</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::Element</name>
    <filename>a01913.html</filename>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>name</name>
      <anchorfile>a01913.html</anchorfile>
      <anchor>a4f1f84cbf9bafb94cd41824712565f5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>id</name>
      <anchorfile>a01913.html</anchorfile>
      <anchor>ad2e559a17ad52901a5e726ca03f300c6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>id</name>
      <anchorfile>a01913.html</anchorfile>
      <anchor>a000ffd25b2fe0b3b36ad02b44cd190c3</anchor>
      <arglist>(int idIn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a01913.html</anchorfile>
      <anchor>ab8e71ecce7dab695777a1a11faf119f7</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>handleRequest</name>
      <anchorfile>a01913.html</anchorfile>
      <anchor>a00f7fa6be59c8cc61304d35e7dd2a914</anchor>
      <arglist>(const mc_rtc::Configuration &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Element</name>
      <anchorfile>a01913.html</anchorfile>
      <anchor>a086e5b72ef29fb83ebba494135f0f579</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>a01913.html</anchorfile>
      <anchor>adb2f99cc312bfc645254b2cecd9f9c27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Element</name>
      <anchorfile>a01913.html</anchorfile>
      <anchor>a6fcb5cd1168ebfd6b9dc8830df21956f</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>name_</name>
      <anchorfile>a01913.html</anchorfile>
      <anchor>a7b365cbe4764d76aafa03495be0ecd5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>id_</name>
      <anchorfile>a01913.html</anchorfile>
      <anchor>a208ba439700a31e9ff94abc76a466472</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_control::ElementId</name>
    <filename>a01377.html</filename>
    <member kind="function">
      <type></type>
      <name>ElementId</name>
      <anchorfile>a01377.html</anchorfile>
      <anchor>a17c9c3f1700bd2f02814ca219844c934</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ElementId</name>
      <anchorfile>a01377.html</anchorfile>
      <anchor>a84ad794dcfc845476f05d2cb1c283351</anchor>
      <arglist>(const ElementId &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ElementId</name>
      <anchorfile>a01377.html</anchorfile>
      <anchor>a566ba8033fa8a7f50b016947ac5002d3</anchor>
      <arglist>(ElementId &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>ElementId &amp;</type>
      <name>operator=</name>
      <anchorfile>a01377.html</anchorfile>
      <anchor>a781c1eac4041ede096f3fae9b0c775b2</anchor>
      <arglist>(const ElementId &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>ElementId &amp;</type>
      <name>operator=</name>
      <anchorfile>a01377.html</anchorfile>
      <anchor>a24f027cf01658b8e6c701bab7d33f728</anchor>
      <arglist>(ElementId &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ElementId</name>
      <anchorfile>a01377.html</anchorfile>
      <anchor>a232678c79a8f6faa8923330bd50ec053</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;category, const std::string &amp;name, int sid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ElementId</name>
      <anchorfile>a01377.html</anchorfile>
      <anchor>a200df31dd4025e687962b95ec3f7810d</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;category, const std::string &amp;name)</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>category</name>
      <anchorfile>a01377.html</anchorfile>
      <anchor>a72f672dd6379b02c13838974b2b04f50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>a01377.html</anchorfile>
      <anchor>afa0ea7e8ec08b383d992e9a8b408a879</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>sid</name>
      <anchorfile>a01377.html</anchorfile>
      <anchor>a5753e9c679e8109c6bce7c9a02dd5c37</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_observers::EncoderObserver</name>
    <filename>a01541.html</filename>
    <base>mc_observers::Observer</base>
    <member kind="function">
      <type></type>
      <name>EncoderObserver</name>
      <anchorfile>a01541.html</anchorfile>
      <anchor>ae041a35fb0a73ebdbe7bbea9e1346155</anchor>
      <arglist>(const std::string &amp;name, double dt, const mc_rtc::Configuration &amp;config={})</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a01541.html</anchorfile>
      <anchor>a2934c6f44a6b49aae0e8e412b04d37c1</anchor>
      <arglist>(const mc_control::MCController &amp;ctl) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a01541.html</anchorfile>
      <anchor>ad65144731e89fc2d6ba40c39e9d5b691</anchor>
      <arglist>(const mc_control::MCController &amp;ctl) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateRobots</name>
      <anchorfile>a01541.html</anchorfile>
      <anchor>af72093790abd36ada558ed00cb0414a0</anchor>
      <arglist>(const mc_control::MCController &amp;ctl, mc_rbdyn::Robots &amp;realRobots) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToLogger</name>
      <anchorfile>a01541.html</anchorfile>
      <anchor>a2a2f2d12d8ea8643e3a2ad1e910aa892</anchor>
      <arglist>(const mc_control::MCController &amp;ctl, mc_rtc::Logger &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromLogger</name>
      <anchorfile>a01541.html</anchorfile>
      <anchor>af71d87a052f0e72a00198643ab760a11</anchor>
      <arglist>(mc_rtc::Logger &amp;) override</arglist>
    </member>
    <member kind="enumeration" protection="protected">
      <type></type>
      <name>Update</name>
      <anchorfile>a01541.html</anchorfile>
      <anchor>ab23dff7bf325e5a4a3fcf84d13fa62b2</anchor>
      <arglist></arglist>
      <enumvalue file="a01541.html" anchor="ab23dff7bf325e5a4a3fcf84d13fa62b2aa1595abbb4c3a326636dd178757cd6c1">Control</enumvalue>
      <enumvalue file="a01541.html" anchor="ab23dff7bf325e5a4a3fcf84d13fa62b2ada2a1b654dd8965375b17b81a0874e1d">Estimator</enumvalue>
      <enumvalue file="a01541.html" anchor="ab23dff7bf325e5a4a3fcf84d13fa62b2a6adf97f83acf6453d4a6a4b1070f3754">None</enumvalue>
    </member>
    <member kind="variable" protection="protected">
      <type>Update</type>
      <name>posUpdate_</name>
      <anchorfile>a01541.html</anchorfile>
      <anchor>a8b1666591ee20b8a1f45f7766b5ec694</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Update</type>
      <name>velUpdate_</name>
      <anchorfile>a01541.html</anchorfile>
      <anchor>a6da1c395f9ebe746776910c6713c21d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>logEstimation_</name>
      <anchorfile>a01541.html</anchorfile>
      <anchor>a53abfb8ea362389b0a08a268bc9ac268</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>prevEncoders_</name>
      <anchorfile>a01541.html</anchorfile>
      <anchor>a81e5682d74e14df7b3b65c6344b49cb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>encodersVelocity_</name>
      <anchorfile>a01541.html</anchorfile>
      <anchor>a836476dda18a176da54e14ede5f0eabd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::EndEffectorTask</name>
    <filename>a02369.html</filename>
    <base>mc_tasks::MetaTask</base>
    <member kind="function">
      <type></type>
      <name>EndEffectorTask</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>a10e9ffa606532e24dc2be4c5561abfeb</anchor>
      <arglist>(const std::string &amp;bodyName, const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, double stiffness=2.0, double weight=1000.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EndEffectorTask</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>a972b369490a2a1ded5f627ee669e255b</anchor>
      <arglist>(const std::string &amp;bodyName, const Eigen::Vector3d &amp;bodyPoint, const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, double stiffness=2.0, double weight=1000.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>a9b093324425bd5b4719dc04f1c4e5648</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add_ef_pose</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>a01f1c5053c8e6a7b8fa1cbd30936bd3b</anchor>
      <arglist>(const sva::PTransformd &amp;dtr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>set_ef_pose</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>a943ad2fc928accf735ce459f57b7c122</anchor>
      <arglist>(const sva::PTransformd &amp;tf)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual sva::PTransformd</type>
      <name>get_ef_pose</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>a849f1bb907b638b0a2d3513630095155</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dimWeight</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>a009ffe2f7a31408e70cff8b86d446caa</anchor>
      <arglist>(const Eigen::VectorXd &amp;dimW) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Eigen::VectorXd</type>
      <name>dimWeight</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>ad7483b3be8095c29724a934471ac558e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>selectActiveJoints</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>a36c784af07924cdb90969b93a859fcfd</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const std::vector&lt; std::string &gt; &amp;activeJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;activeDofs={}) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>selectUnactiveJoints</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>a5798ae85c5b6dbebabd268e3a33b93e2</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const std::vector&lt; std::string &gt; &amp;unactiveJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;unactiveDofs={}) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetJointsSelector</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>a65456b7b90d53cbf097f88d546bda7fb</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Eigen::VectorXd</type>
      <name>eval</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>a37e497c45f98e4f5e14bc8b7ac0c2305</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Eigen::VectorXd</type>
      <name>speed</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>a151ebbc4eef8b54a6dc00d10d642f7cb</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>ad54a271a90a4ac60b338e5f50d24b743</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const mc_rtc::Configuration &amp;config) override</arglist>
    </member>
    <member kind="variable">
      <type>const mc_rbdyn::Robots &amp;</type>
      <name>robots</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>a5faa0d85f0343702e3917d74b831dad7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>robotIndex</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>a0e692c5560525128f88961376cc6272f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>bodyIndex</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>aab6f5903d901833f87f887c1285e7f98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; mc_tasks::PositionTask &gt;</type>
      <name>positionTask</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>a9d4cf0afca9af76d232b408275e3b9b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; mc_tasks::OrientationTask &gt;</type>
      <name>orientationTask</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>ac426513e9c556336e75a09cd690ee30a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>bodyName</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>af41ef875b2819415282f6e416345e992</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sva::PTransformd</type>
      <name>curTransform</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>a0df1bdc1275d182569ec4e306ba6c395</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>removeFromSolver</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>a22bbf5a8ccec9b59a470638a3043492d</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>addToSolver</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>a507e5d683a144133d6de86699a909a67</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>af4fae4001f175768e25f77903af44ecc</anchor>
      <arglist>(mc_solver::QPSolver &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>addToLogger</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>a6a2d0705092f1f53d78b2e1993771fc9</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>removeFromLogger</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>a169354fc16eb7b727164aa3c0cdb08aa</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>a445bf38376823f52f538c7dcce64fb98</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;gui) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::log::FlatLog::entry</name>
    <filename>a02133.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>a02133.html</anchorfile>
      <anchor>a67fbc08c9538e65ac214472f795e8dc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; record &gt;</type>
      <name>records</name>
      <anchorfile>a02133.html</anchorfile>
      <anchor>abf3c8af81db34096910a6167aa54266c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::lipm_stabilizer::StabilizerTask::EnumClassHash</name>
    <filename>a02397.html</filename>
    <member kind="function">
      <type>std::size_t</type>
      <name>operator()</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>a57c9597cece19ebcc216b9ae532000a7</anchor>
      <arglist>(T t) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_solver::utils::EqualityConstraint</name>
    <filename>a02217.html</filename>
    <templarg>UpdateT</templarg>
    <base>Constraint&lt; tasks::qp::Equality, UpdateT &gt;</base>
    <member kind="typedef">
      <type>Constraint&lt; tasks::qp::Equality, UpdateT &gt;</type>
      <name>Base</name>
      <anchorfile>a02217.html</anchorfile>
      <anchor>a30e140ba79389f855367792961934326</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EqualityConstraint</name>
      <anchorfile>a02217.html</anchorfile>
      <anchor>afac8d98cb261408cd57f582fe581d425</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EqualityConstraint</name>
      <anchorfile>a02217.html</anchorfile>
      <anchor>ac9c31eab66ce20859ff84a59e1689f67</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EqualityConstraint</name>
      <anchorfile>a02217.html</anchorfile>
      <anchor>a3cac80832dee69a3d8449bdcf37c8b19</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>AEq</name>
      <anchorfile>a02217.html</anchorfile>
      <anchor>ae98f12b4064111652efd273fe72e4352</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>descEq</name>
      <anchorfile>a02217.html</anchorfile>
      <anchor>a48e36fd2b8881ffa1e7ba7a5b885f51d</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;, int i) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EqualityConstraint&lt; utils::UpdateForce &gt;</name>
    <filename>a02217.html</filename>
    <base>Constraint&lt; tasks::qp::Equality, utils::UpdateForce &gt;</base>
    <member kind="typedef">
      <type>Constraint&lt; tasks::qp::Equality, utils::UpdateForce &gt;</type>
      <name>Base</name>
      <anchorfile>a02217.html</anchorfile>
      <anchor>a30e140ba79389f855367792961934326</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EqualityConstraint</name>
      <anchorfile>a02217.html</anchorfile>
      <anchor>afac8d98cb261408cd57f582fe581d425</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EqualityConstraint</name>
      <anchorfile>a02217.html</anchorfile>
      <anchor>ac9c31eab66ce20859ff84a59e1689f67</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EqualityConstraint</name>
      <anchorfile>a02217.html</anchorfile>
      <anchor>a3cac80832dee69a3d8449bdcf37c8b19</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>AEq</name>
      <anchorfile>a02217.html</anchorfile>
      <anchor>ae98f12b4064111652efd273fe72e4352</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>descEq</name>
      <anchorfile>a02217.html</anchorfile>
      <anchor>a48e36fd2b8881ffa1e7ba7a5b885f51d</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;, int i) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EqualityConstraint&lt; utils::UpdateLambda &gt;</name>
    <filename>a02217.html</filename>
    <base>Constraint&lt; tasks::qp::Equality, utils::UpdateLambda &gt;</base>
    <member kind="typedef">
      <type>Constraint&lt; tasks::qp::Equality, utils::UpdateLambda &gt;</type>
      <name>Base</name>
      <anchorfile>a02217.html</anchorfile>
      <anchor>a30e140ba79389f855367792961934326</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EqualityConstraint</name>
      <anchorfile>a02217.html</anchorfile>
      <anchor>afac8d98cb261408cd57f582fe581d425</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EqualityConstraint</name>
      <anchorfile>a02217.html</anchorfile>
      <anchor>ac9c31eab66ce20859ff84a59e1689f67</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EqualityConstraint</name>
      <anchorfile>a02217.html</anchorfile>
      <anchor>a3cac80832dee69a3d8449bdcf37c8b19</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>AEq</name>
      <anchorfile>a02217.html</anchorfile>
      <anchor>ae98f12b4064111652efd273fe72e4352</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>descEq</name>
      <anchorfile>a02217.html</anchorfile>
      <anchor>a48e36fd2b8881ffa1e7ba7a5b885f51d</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;, int i) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EqualityConstraint&lt; utils::UpdateRobot &gt;</name>
    <filename>a02217.html</filename>
    <base>Constraint&lt; tasks::qp::Equality, utils::UpdateRobot &gt;</base>
    <member kind="typedef">
      <type>Constraint&lt; tasks::qp::Equality, utils::UpdateRobot &gt;</type>
      <name>Base</name>
      <anchorfile>a02217.html</anchorfile>
      <anchor>a30e140ba79389f855367792961934326</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EqualityConstraint</name>
      <anchorfile>a02217.html</anchorfile>
      <anchor>afac8d98cb261408cd57f582fe581d425</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EqualityConstraint</name>
      <anchorfile>a02217.html</anchorfile>
      <anchor>ac9c31eab66ce20859ff84a59e1689f67</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EqualityConstraint</name>
      <anchorfile>a02217.html</anchorfile>
      <anchor>a3cac80832dee69a3d8449bdcf37c8b19</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>AEq</name>
      <anchorfile>a02217.html</anchorfile>
      <anchor>ae98f12b4064111652efd273fe72e4352</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>descEq</name>
      <anchorfile>a02217.html</anchorfile>
      <anchor>a48e36fd2b8881ffa1e7ba7a5b885f51d</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;, int i) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_solver::EqualityConstraintForce</name>
    <filename>a02229.html</filename>
    <base>EqualityConstraint&lt; utils::UpdateForce &gt;</base>
    <member kind="function">
      <type></type>
      <name>EqualityConstraintForce</name>
      <anchorfile>a02229.html</anchorfile>
      <anchor>a252d0cb3773296939c4fabf8802ee6ee</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_solver::EqualityConstraintLambda</name>
    <filename>a02225.html</filename>
    <base>EqualityConstraint&lt; utils::UpdateLambda &gt;</base>
    <member kind="function">
      <type></type>
      <name>EqualityConstraintLambda</name>
      <anchorfile>a02225.html</anchorfile>
      <anchor>ad47fb029ea828403ea18f1d7d68bca15</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_solver::EqualityConstraintRobot</name>
    <filename>a02221.html</filename>
    <base>EqualityConstraint&lt; utils::UpdateRobot &gt;</base>
    <member kind="function">
      <type></type>
      <name>EqualityConstraintRobot</name>
      <anchorfile>a02221.html</anchorfile>
      <anchor>a8f57f09de172e6a12c7d29717f6e6066</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_trajectory::ExactCubic</name>
    <filename>a02469.html</filename>
    <base>Spline&lt; Eigen::Vector3d, std::vector&lt; std::pair&lt; double, Eigen::Vector3d &gt; &gt; &gt;</base>
    <member kind="typedef">
      <type>Eigen::Vector3d</type>
      <name>point_t</name>
      <anchorfile>a02469.html</anchorfile>
      <anchor>a696e4cd6c5ac9fda37888ac9b2c7a955</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; double, point_t &gt;</type>
      <name>waypoint_t</name>
      <anchorfile>a02469.html</anchorfile>
      <anchor>a5e665c15b2b296658f1ec80caf0499e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>spline::exact_cubic&lt; double, double, 3, false, point_t &gt;</type>
      <name>exact_cubic_t</name>
      <anchorfile>a02469.html</anchorfile>
      <anchor>aa722aab6305bf5e4f1ae6f0007202f48</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>spline::spline_deriv_constraint&lt; double, double, 3, false, point_t &gt;</type>
      <name>spline_deriv_constraint_t</name>
      <anchorfile>a02469.html</anchorfile>
      <anchor>a1fffcee3002474517dd513904de9ea77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>spline_deriv_constraint_t::spline_constraints</type>
      <name>spline_constraints_t</name>
      <anchorfile>a02469.html</anchorfile>
      <anchor>af3fc53f8154ef0226149e69b9bfd8485</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExactCubic</name>
      <anchorfile>a02469.html</anchorfile>
      <anchor>a1c4b7078a6df6537dc27a7b678d254c2</anchor>
      <arglist>(double duration, const point_t &amp;start, const point_t &amp;target, const std::vector&lt; waypoint_t &gt; &amp;waypoints={}, const point_t &amp;init_vel={}, const point_t &amp;init_acc={}, const point_t &amp;end_vel={}, const point_t &amp;end_acc={})</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02469.html</anchorfile>
      <anchor>a22a9af98b0a796589d8c25037b7cdb60</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>waypoint</name>
      <anchorfile>a02469.html</anchorfile>
      <anchor>aec46e0e93dfe6c8483cd4ab96ec133ae</anchor>
      <arglist>(size_t idx, const point_t &amp;waypoint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>waypoint</name>
      <anchorfile>a02469.html</anchorfile>
      <anchor>a012346ad965151024073f23d6261d977</anchor>
      <arglist>(size_t idx, const double t)</arglist>
    </member>
    <member kind="function">
      <type>const waypoint_t &amp;</type>
      <name>waypoint</name>
      <anchorfile>a02469.html</anchorfile>
      <anchor>a83a0733b114960743205b1b3a390ca6e</anchor>
      <arglist>(size_t idx) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>waypointTime</name>
      <anchorfile>a02469.html</anchorfile>
      <anchor>a48ee7c7819f41e00f485f3565d990106</anchor>
      <arglist>(size_t idx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constraints</name>
      <anchorfile>a02469.html</anchorfile>
      <anchor>af0dd28bb9136823399f3d85d5512bc33</anchor>
      <arglist>(const point_t &amp;init_vel, const point_t &amp;init_acc, const point_t &amp;end_vel, const point_t &amp;end_acc)</arglist>
    </member>
    <member kind="function">
      <type>const point_t &amp;</type>
      <name>init_vel</name>
      <anchorfile>a02469.html</anchorfile>
      <anchor>a342e98f2928656490fbcb12bf7d8bee3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const point_t &amp;</type>
      <name>init_acc</name>
      <anchorfile>a02469.html</anchorfile>
      <anchor>af47e1c92e5824f345b1616aacbd1891c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const point_t &amp;</type>
      <name>end_vel</name>
      <anchorfile>a02469.html</anchorfile>
      <anchor>a39c91f03c69b47e26871602fecb5dc09</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const point_t &amp;</type>
      <name>end_acc</name>
      <anchorfile>a02469.html</anchorfile>
      <anchor>a36540b993aa3ca5af2f656335726b454</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Eigen::Vector3d &gt;</type>
      <name>splev</name>
      <anchorfile>a02469.html</anchorfile>
      <anchor>a3df92dec43977efee8f5f4a8cc83ae87</anchor>
      <arglist>(double t, unsigned int der=0)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Eigen::Vector3d &gt;</type>
      <name>sampleTrajectory</name>
      <anchorfile>a02469.html</anchorfile>
      <anchor>ab73c2c2f06d04ee301e8ec0d1a15b831</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>a02469.html</anchorfile>
      <anchor>ae734960f82442e523fe5fa1077588e75</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;gui, const std::vector&lt; std::string &gt; &amp;category)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::ExactCubicTrajectoryTask</name>
    <filename>a02373.html</filename>
    <base>SplineTrajectoryTask&lt; ExactCubicTrajectoryTask &gt;</base>
    <member kind="function">
      <type></type>
      <name>ExactCubicTrajectoryTask</name>
      <anchorfile>a02373.html</anchorfile>
      <anchor>ad27477a0f30c373765213f5e8288963e</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, const std::string &amp;surfaceName, double duration, double stiffness, double weight, const sva::PTransformd &amp;target, const std::vector&lt; std::pair&lt; double, Eigen::Vector3d &gt;&gt; &amp;posWp={}, const Eigen::Vector3d &amp;init_vel=Eigen::Vector3d::Zero(), const Eigen::Vector3d &amp;init_acc=Eigen::Vector3d::Zero(), const Eigen::Vector3d &amp;end_vel=Eigen::Vector3d::Zero(), const Eigen::Vector3d &amp;end_acc=Eigen::Vector3d::Zero(), const std::vector&lt; std::pair&lt; double, Eigen::Matrix3d &gt;&gt; &amp;oriWp={})</arglist>
    </member>
    <member kind="function">
      <type>const mc_trajectory::ExactCubic &amp;</type>
      <name>spline</name>
      <anchorfile>a02373.html</anchorfile>
      <anchor>a9e72a177388b55ed2773d1906bd28f9e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>mc_trajectory::ExactCubic &amp;</type>
      <name>spline</name>
      <anchorfile>a02373.html</anchorfile>
      <anchor>a1aa0b41fae9369d28c6d1b7240a5df6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>a02373.html</anchorfile>
      <anchor>a1f68add7b8b70b9b6878bb0d72c0c6e7</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;gui) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>posWaypoints</name>
      <anchorfile>a02373.html</anchorfile>
      <anchor>ad8ed139887005e36a8ae46295ebecf60</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; double, Eigen::Vector3d &gt;&gt; &amp;posWp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constraints</name>
      <anchorfile>a02373.html</anchorfile>
      <anchor>a14e12359f28675ec224ec009ae75b174</anchor>
      <arglist>(const Eigen::Vector3d &amp;init_vel, const Eigen::Vector3d &amp;init_acc, const Eigen::Vector3d &amp;end_vel, const Eigen::Vector3d &amp;end_acc)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>targetPos</name>
      <anchorfile>a02373.html</anchorfile>
      <anchor>a80741d234899b3571a97e48ac9fb2407</anchor>
      <arglist>(const Eigen::Vector3d &amp;target)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Eigen::Vector3d &amp;</type>
      <name>targetPos</name>
      <anchorfile>a02373.html</anchorfile>
      <anchor>a8d6562ff64706e5957627bf66e7c8b44</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_trajectory::ExactCubic</type>
      <name>bspline</name>
      <anchorfile>a02373.html</anchorfile>
      <anchor>a825212a1055ad43955b8284562905f13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::PTransformd</type>
      <name>initialPose_</name>
      <anchorfile>a02373.html</anchorfile>
      <anchor>a7468619f2b047add1ee8a018daafb4f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>SplineTrajectoryTask&lt; ExactCubicTrajectoryTask &gt;</name>
      <anchorfile>a02373.html</anchorfile>
      <anchor>a9bf87cb2f5679ce3181d696adad0a9d6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::Configuration::Exception</name>
    <filename>a01813.html</filename>
    <member kind="function">
      <type></type>
      <name>Exception</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a5fbc7e52e1f5e239e11916b19378c146</anchor>
      <arglist>(const std::string &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Exception</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a262aab07d1d6f5b9b121e5af5fddfc11</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a02a511274c6edbdfcf14ecc723a495c5</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>silence</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>ab026ea13c4e83beee1d4ee93da90eb1c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>msg</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>ace2b3bb5680e1528a1ebe8da64a409e0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_control::fsm::Executor</name>
    <filename>a01405.html</filename>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a87b8dd1aa78d6d57ece49c9f0782a07f</anchor>
      <arglist>(Controller &amp;ctl, const mc_rtc::Configuration &amp;config, const std::string &amp;name=&quot;&quot;, const std::vector&lt; std::string &gt; &amp;category={})</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ac2002091bc35441bfbacbd3b4cbf3631</anchor>
      <arglist>(Controller &amp;ctl, bool keep_state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ade28e68814e850c8a9dc8028b36d1fdd</anchor>
      <arglist>(Controller &amp;ctl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>teardown</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a6418feaa36246f3f192b6d358b8f1f7e</anchor>
      <arglist>(Controller &amp;ctl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interrupt</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aadfab91a3042bf4f737c0089e51c86d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>running</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>af860589b02d979cbaf762b9e266790eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ready</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a6fa9ca4d2397e28f48175b815a4cb2a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>complete</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aa0151d38264e4c6536c37d1d8164ae11</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>resume</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>acb08422ac00c95dee1d5296eb386d71d</anchor>
      <arglist>(const std::string &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>next</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a75548e1c101ea1bb41fa7c9a2d7e7fc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>state</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ac630ca09d2a1aa216f840e6f9a9bf10c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>output</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ab6b37334d736a1b7fdec12bc2fbad29c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>next_state</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aaf24cd63af49e17bfb957bf8c45a8372</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read_msg</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a314a27acff2ed21f0dad648c51f459ac</anchor>
      <arglist>(std::string &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read_write_msg</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a4ec5fe1a873d140b6ceb633ce4ae911e</anchor>
      <arglist>(std::string &amp;msg, std::string &amp;out)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_filter::ExponentialMovingAverage</name>
    <filename>a01517.html</filename>
    <templarg>VectorT</templarg>
    <member kind="function">
      <type></type>
      <name>ExponentialMovingAverage</name>
      <anchorfile>a01517.html</anchorfile>
      <anchor>a156a26de235d293b4e94cb1f269dd16c</anchor>
      <arglist>(double dt, double timeConstant, const VectorT &amp;initValue=VectorT::Zero())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>a01517.html</anchorfile>
      <anchor>afc5e32731c162cecc484c71b1cd6680f</anchor>
      <arglist>(const VectorT &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const VectorT &amp;</type>
      <name>eval</name>
      <anchorfile>a01517.html</anchorfile>
      <anchor>a59a37436a454f4caa5d9ba49ab85b2e8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saturation</name>
      <anchorfile>a01517.html</anchorfile>
      <anchor>abc199c7a1935a35f01882c9ce6f355e4</anchor>
      <arglist>(double limit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a01517.html</anchorfile>
      <anchor>a4fe8efb515654281aa77b87296449f89</anchor>
      <arglist>(const VectorT &amp;initVal)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>timeConstant</name>
      <anchorfile>a01517.html</anchorfile>
      <anchor>a25e06aceff6cb86deaba24edc060ef8f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeConstant</name>
      <anchorfile>a01517.html</anchorfile>
      <anchor>a5e116fb401af8c027896173066d8b8ed</anchor>
      <arglist>(double T)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VectorT</type>
      <name>average_</name>
      <anchorfile>a01517.html</anchorfile>
      <anchor>adaad48a146f8e945da36b18c0e9c4f8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>alpha_</name>
      <anchorfile>a01517.html</anchorfile>
      <anchor>accd3db44b24084922b2d1915e378b2fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>dt_</name>
      <anchorfile>a01517.html</anchorfile>
      <anchor>a6a235570200c501307ebc666fcd81e20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>timeConstant_</name>
      <anchorfile>a01517.html</anchorfile>
      <anchor>a08b8eaf1a64cf2abc37a27311db4923e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>saturation_</name>
      <anchorfile>a01517.html</anchorfile>
      <anchor>aa39c03dbafb64fa46f4be54499b3ed48</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ExponentialMovingAverage&lt; Eigen::Vector3d &gt;</name>
    <filename>a01517.html</filename>
    <member kind="function">
      <type></type>
      <name>ExponentialMovingAverage</name>
      <anchorfile>a01517.html</anchorfile>
      <anchor>a156a26de235d293b4e94cb1f269dd16c</anchor>
      <arglist>(double dt, double timeConstant, const Eigen::Vector3d &amp;initValue=Eigen::Vector3d ::Zero())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>a01517.html</anchorfile>
      <anchor>afc5e32731c162cecc484c71b1cd6680f</anchor>
      <arglist>(const Eigen::Vector3d &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>eval</name>
      <anchorfile>a01517.html</anchorfile>
      <anchor>a59a37436a454f4caa5d9ba49ab85b2e8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saturation</name>
      <anchorfile>a01517.html</anchorfile>
      <anchor>abc199c7a1935a35f01882c9ce6f355e4</anchor>
      <arglist>(double limit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a01517.html</anchorfile>
      <anchor>a4fe8efb515654281aa77b87296449f89</anchor>
      <arglist>(const Eigen::Vector3d &amp;initVal)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>timeConstant</name>
      <anchorfile>a01517.html</anchorfile>
      <anchor>a25e06aceff6cb86deaba24edc060ef8f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeConstant</name>
      <anchorfile>a01517.html</anchorfile>
      <anchor>a5e116fb401af8c027896173066d8b8ed</anchor>
      <arglist>(double T)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>average_</name>
      <anchorfile>a01517.html</anchorfile>
      <anchor>adaad48a146f8e945da36b18c0e9c4f8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>alpha_</name>
      <anchorfile>a01517.html</anchorfile>
      <anchor>accd3db44b24084922b2d1915e378b2fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>dt_</name>
      <anchorfile>a01517.html</anchorfile>
      <anchor>a6a235570200c501307ebc666fcd81e20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>timeConstant_</name>
      <anchorfile>a01517.html</anchorfile>
      <anchor>a08b8eaf1a64cf2abc37a27311db4923e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>saturation_</name>
      <anchorfile>a01517.html</anchorfile>
      <anchor>aa39c03dbafb64fa46f4be54499b3ed48</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::lipm_stabilizer::FDQPWeights</name>
    <filename>a01685.html</filename>
    <member kind="function">
      <type></type>
      <name>FDQPWeights</name>
      <anchorfile>a01685.html</anchorfile>
      <anchor>aba4a576e4d7853321ccf5890465a1b89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FDQPWeights</name>
      <anchorfile>a01685.html</anchorfile>
      <anchor>a6d926ba6ea4f799ff815395dca3d9912</anchor>
      <arglist>(double netWrench, double ankleTorque, double pressure)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>ankleTorqueSqrt</name>
      <anchorfile>a01685.html</anchorfile>
      <anchor>afb817ae2c1c643510fdaf15dc911cdd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>netWrenchSqrt</name>
      <anchorfile>a01685.html</anchorfile>
      <anchor>a982bc88cbf52ea49e182df9a81a6eb00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>pressureSqrt</name>
      <anchorfile>a01685.html</anchorfile>
      <anchor>a2faca452947045f6c8f40e1947ac86a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::log::FlatLog</name>
    <filename>a02125.html</filename>
    <class kind="struct">mc_rtc::log::FlatLog::entry</class>
    <class kind="struct">mc_rtc::log::FlatLog::record</class>
    <member kind="function">
      <type></type>
      <name>FlatLog</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a904ba6cf9174416a99863f91d6e221df</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FlatLog</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a16c024635d4ff9c7a817ace5507a75d4</anchor>
      <arglist>(const std::string &amp;fpath)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FlatLog</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>ac636557632a2142945a24f276b179162</anchor>
      <arglist>(const FlatLog &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>FlatLog &amp;</type>
      <name>operator=</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a6ce88d6a3e1430c270cef304996f6a30</anchor>
      <arglist>(const FlatLog &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>aaab239b6569c991b55472d3811e2360b</anchor>
      <arglist>(const std::string &amp;fpath)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a712bdde57ac85de8725792a6040bd9e9</anchor>
      <arglist>(const std::string &amp;fpath)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>aff1cabef4b8d49e0c8736aa3985ea458</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::set&lt; std::string &gt;</type>
      <name>entries</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a97f532a89ddd0bf098b8aac153109c7d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a92e0893128fd656707b37b31c26dd9e9</anchor>
      <arglist>(const std::string &amp;entry) const</arglist>
    </member>
    <member kind="function">
      <type>std::set&lt; LogType &gt;</type>
      <name>types</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a92db42485fe91e0df8355298a344280d</anchor>
      <arglist>(const std::string &amp;entry) const</arglist>
    </member>
    <member kind="function">
      <type>LogType</type>
      <name>type</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>adce27a288263487f7d87a6ed76db3f48</anchor>
      <arglist>(const std::string &amp;entry) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; const T * &gt;</type>
      <name>getRaw</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a13a0da9b94bfeffbdd9f4966a0a38697</anchor>
      <arglist>(const std::string &amp;entry) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; T &gt;</type>
      <name>get</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a2916d448d9bf2a1369b20cbc5566375e</anchor>
      <arglist>(const std::string &amp;entry, const T &amp;def) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; T &gt;</type>
      <name>get</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a84715eb2284b398ea0fbe5de1b919179</anchor>
      <arglist>(const std::string &amp;entry) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>af5fdf4f990d3bb351252dc0bcbe5cd5d</anchor>
      <arglist>(const std::string &amp;entry, size_t i, const T &amp;def) const</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>getRaw</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a956945a4e75e5814a1910b5b560e9283</anchor>
      <arglist>(const std::string &amp;entry, size_t i) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::Flexibility</name>
    <filename>a01673.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>jointName</name>
      <anchorfile>a01673.html</anchorfile>
      <anchor>aae8d1a8eaa685b5efc3eb22b95fbb892</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>K</name>
      <anchorfile>a01673.html</anchorfile>
      <anchor>ad9fa8b3ad657cbfd784a906f80e2a493</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>C</name>
      <anchorfile>a01673.html</anchorfile>
      <anchor>a6937033e6a1e29165b7a1f9b2005232a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>O</name>
      <anchorfile>a01673.html</anchorfile>
      <anchor>aea9ed4cd59fb673fdac0d4f252d90987</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::ForceConfig</name>
    <filename>a02085.html</filename>
    <base>mc_rtc::gui::ArrowConfig</base>
    <member kind="function">
      <type></type>
      <name>ForceConfig</name>
      <anchorfile>a02085.html</anchorfile>
      <anchor>aa43d330299a7e98bf4f71bb41203ef82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ForceConfig</name>
      <anchorfile>a02085.html</anchorfile>
      <anchor>a2d88ac62138a8f3a15a0c48468ec2d51</anchor>
      <arglist>(const Color &amp;color)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ForceConfig</name>
      <anchorfile>a02085.html</anchorfile>
      <anchor>a9a4b2dd24ef25e1505a01f37a899349c</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>a02085.html</anchorfile>
      <anchor>a8fffaa27fe7b876e7dd342dc519b3ebf</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02085.html</anchorfile>
      <anchor>a172deb6bbb037afc2955e6ce0495a1cd</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;out) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>a02085.html</anchorfile>
      <anchor>a3c32ba4f04a0903e09314c4fce866254</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>force_scale</name>
      <anchorfile>a02085.html</anchorfile>
      <anchor>a5b196a2d50081a662c2765c283a6d6b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::ForceImpl</name>
    <filename>a01937.html</filename>
    <templarg>GetForce</templarg>
    <templarg>GetSurface</templarg>
    <templarg>SetForce</templarg>
    <base>mc_rtc::gui::ForceROImpl</base>
    <member kind="typedef">
      <type>ForceROImpl&lt; GetForce, GetSurface &gt;</type>
      <name>ForceRO</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a2ea650ce54d73f9bb231f2cce99163ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ForceImpl</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a7c1e5d0c24fad518cbb13c6949dba69e</anchor>
      <arglist>(const std::string &amp;name, const ForceConfig &amp;config, GetForce get_force_fn, SetForce set_force_fn, GetSurface get_surface_fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a19167cf6d2a2c0f0f14195e94098a11f</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>handleRequest</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a5a2a4971fe40e6b8805eb914392fb508</anchor>
      <arglist>(const mc_rtc::Configuration &amp;data)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a797c984faf37cff730edb2391a106968</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::ForceROImpl</name>
    <filename>a01933.html</filename>
    <templarg>GetForce</templarg>
    <templarg>GetSurface</templarg>
    <base>mc_rtc::gui::Element</base>
    <member kind="function">
      <type></type>
      <name>ForceROImpl</name>
      <anchorfile>a01933.html</anchorfile>
      <anchor>afdf45b2767925077d95a3ef1bd372864</anchor>
      <arglist>(const std::string &amp;name, const ForceConfig &amp;config, GetForce get_force_fn, GetSurface get_surface_fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a01933.html</anchorfile>
      <anchor>a57c555bb17d91446dfa6fc4b3c3721f1</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder, bool ro=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>a01933.html</anchorfile>
      <anchor>a482f092b89cba7f1e6441d796104d013</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>a01933.html</anchorfile>
      <anchor>abb6a80d44f1efee54399c80f0486615c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::ForceSensor</name>
    <filename>a01677.html</filename>
    <base>mc_rbdyn::Device</base>
    <member kind="function">
      <type></type>
      <name>ForceSensor</name>
      <anchorfile>a01677.html</anchorfile>
      <anchor>ae828d09148f8c17e1e1381055ab04a11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ForceSensor</name>
      <anchorfile>a01677.html</anchorfile>
      <anchor>aa6327851fadc1e203db65471072aa3a5</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;parentBodyName, const sva::PTransformd &amp;X_p_f)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ForceSensor</name>
      <anchorfile>a01677.html</anchorfile>
      <anchor>a6b1376cf071908ece67005fdef95ea40</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>parentBody</name>
      <anchorfile>a01677.html</anchorfile>
      <anchor>a6629c5e91037493e31492c2ee4c88ffb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>X_p_f</name>
      <anchorfile>a01677.html</anchorfile>
      <anchor>a707f4a4c8178f9a626cdf802f744cd5e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sva::PTransformd</type>
      <name>X_0_f</name>
      <anchorfile>a01677.html</anchorfile>
      <anchor>aa573d1f10146ae3a17209b404cade3aa</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;robot) const</arglist>
    </member>
    <member kind="function">
      <type>const sva::ForceVecd &amp;</type>
      <name>wrench</name>
      <anchorfile>a01677.html</anchorfile>
      <anchor>adea09dd3f17b8dd76849cfedb48fda90</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>force</name>
      <anchorfile>a01677.html</anchorfile>
      <anchor>ab2f342cd1d41306f103b913de674d5bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>couple</name>
      <anchorfile>a01677.html</anchorfile>
      <anchor>af437477c82db35d456f99ebef763b8a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wrench</name>
      <anchorfile>a01677.html</anchorfile>
      <anchor>a60f9066555e70f594f40c2cf1f009061</anchor>
      <arglist>(const sva::ForceVecd &amp;wrench)</arglist>
    </member>
    <member kind="function">
      <type>sva::ForceVecd</type>
      <name>wrenchWithoutGravity</name>
      <anchorfile>a01677.html</anchorfile>
      <anchor>ae32de74ac1608ecf37ed8c29f7c8bc14</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;robot) const</arglist>
    </member>
    <member kind="function">
      <type>sva::ForceVecd</type>
      <name>worldWrench</name>
      <anchorfile>a01677.html</anchorfile>
      <anchor>a0d803a62cce404fbb74677f26a104fee</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;robot) const</arglist>
    </member>
    <member kind="function">
      <type>sva::ForceVecd</type>
      <name>worldWrenchWithoutGravity</name>
      <anchorfile>a01677.html</anchorfile>
      <anchor>aabd485bbaae60105f88cd5e6590dc06d</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;robot) const</arglist>
    </member>
    <member kind="function">
      <type>DevicePtr</type>
      <name>clone</name>
      <anchorfile>a01677.html</anchorfile>
      <anchor>ab419d0879fbcd5e3b88b57a30070f55b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadCalibrator</name>
      <anchorfile>a01677.html</anchorfile>
      <anchor>a0d51317c69787f6c822a77e0c2a9c2b6</anchor>
      <arglist>(const std::string &amp;calib_file, const Eigen::Vector3d &amp;gravity={0., 0., 9.81})</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>X_fsmodel_fsactual</name>
      <anchorfile>a01677.html</anchorfile>
      <anchor>a95d5b7f0eb0f2eea86ff77013df65787</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd</type>
      <name>X_fsactual_parent</name>
      <anchorfile>a01677.html</anchorfile>
      <anchor>a9c831a9aa004b7f583de71ab26b8e5f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>mass</name>
      <anchorfile>a01677.html</anchorfile>
      <anchor>ae8a09d7e1c2a1989c205d8a589c4aa59</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sva::ForceVecd &amp;</type>
      <name>offset</name>
      <anchorfile>a01677.html</anchorfile>
      <anchor>ab4a0bd19850840f9cd46301553b4d7a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadCalibrator</name>
      <anchorfile>a01677.html</anchorfile>
      <anchor>a0d51317c69787f6c822a77e0c2a9c2b6</anchor>
      <arglist>(const std::string &amp;calib_file, const Eigen::Vector3d &amp;gravity={0., 0., 9.81})</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>X_fsmodel_fsactual</name>
      <anchorfile>a01677.html</anchorfile>
      <anchor>a95d5b7f0eb0f2eea86ff77013df65787</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd</type>
      <name>X_fsactual_parent</name>
      <anchorfile>a01677.html</anchorfile>
      <anchor>a9c831a9aa004b7f583de71ab26b8e5f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>mass</name>
      <anchorfile>a01677.html</anchorfile>
      <anchor>ae8a09d7e1c2a1989c205d8a589c4aa59</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sva::ForceVecd &amp;</type>
      <name>offset</name>
      <anchorfile>a01677.html</anchorfile>
      <anchor>ab4a0bd19850840f9cd46301553b4d7a2</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::FormArrayInput</name>
    <filename>a01953.html</filename>
    <templarg></templarg>
    <base>FormElement&lt; FormArrayInput&lt; T &gt;, Elements::ArrayInput &gt;</base>
    <member kind="function">
      <type></type>
      <name>FormArrayInput</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>ac44ff19657b3b081eeca2d0d26d86de8</anchor>
      <arglist>(const std::string &amp;name, bool required, const T &amp;def, bool fixed_size=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FormArrayInput</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>ab1cac61405d81079609b79e20b161e84</anchor>
      <arglist>(const std::string &amp;name, bool required, bool fixed_size=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a8d28567b0f786205b0c8576bbe3e6fbe</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FormArrayInput</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a8135cc835db7f0042986ebdffdf1dcb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size_</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a01110150f9466130d28ba25ef10c9db2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fmt::formatter&lt; mc_rtc::Configuration &gt;</name>
    <filename>a01825.html</filename>
    <member kind="function">
      <type>auto</type>
      <name>format</name>
      <anchorfile>a01825.html</anchorfile>
      <anchor>a4c98c9eb5c4adf4c8485ef306bc24c77</anchor>
      <arglist>(const mc_rtc::Configuration &amp;c, FormatContext &amp;ctx) -&gt; decltype(ctx.out())</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::FormComboInput</name>
    <filename>a01957.html</filename>
    <base>FormElement&lt; FormComboInput, Elements::ComboInput &gt;</base>
    <member kind="function">
      <type></type>
      <name>FormComboInput</name>
      <anchorfile>a01957.html</anchorfile>
      <anchor>afbedbea2356966c5929c16f6405886c3</anchor>
      <arglist>(const std::string &amp;name, bool required, const std::vector&lt; std::string &gt; &amp;values, bool send_index=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_</name>
      <anchorfile>a01957.html</anchorfile>
      <anchor>ade120c97d849d5c36e15391f84a24422</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FormComboInput</name>
      <anchorfile>a01957.html</anchorfile>
      <anchor>a072a747dd87980f5fc0d65fb401ddd90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size_</name>
      <anchorfile>a01957.html</anchorfile>
      <anchor>ae1372753a57496a61314d8eb0a9e4434</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::FormDataComboInput</name>
    <filename>a01961.html</filename>
    <base>FormElement&lt; FormDataComboInput, Elements::DataComboInput &gt;</base>
    <member kind="function">
      <type></type>
      <name>FormDataComboInput</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>af453833d5d01430f2ce9674c26998b43</anchor>
      <arglist>(const std::string &amp;name, bool required, const std::vector&lt; std::string &gt; &amp;ref, bool send_index=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>a1b608ec12ddf49804eca58c3ba9445b7</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FormDataComboInput</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>afb3b67d526995fced7d01603d2efe213</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size_</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>a9ec93215a0779c5bbad3bc1b4a720b3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>abbcd49d3548e91a2dd518ffca7b4b34f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::FormDataInput</name>
    <filename>a01949.html</filename>
    <templarg></templarg>
    <templarg>element</templarg>
    <base>FormElement&lt; FormDataInput&lt; T, element &gt;, element &gt;</base>
    <member kind="function">
      <type></type>
      <name>FormDataInput</name>
      <anchorfile>a01949.html</anchorfile>
      <anchor>a45792576086cfc726477211c689f91fe</anchor>
      <arglist>(const std::string &amp;name, bool required, const T &amp;def)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FormDataInput</name>
      <anchorfile>a01949.html</anchorfile>
      <anchor>a21fef6dc43743e2ee23e4f7f9c17748c</anchor>
      <arglist>(const std::string &amp;name, bool required)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_</name>
      <anchorfile>a01949.html</anchorfile>
      <anchor>a7099d1ab42cc99fe4f460b48d4750688</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FormDataInput</name>
      <anchorfile>a01949.html</anchorfile>
      <anchor>ae4775746b3e202b49af5f020f1a82fc6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size_</name>
      <anchorfile>a01949.html</anchorfile>
      <anchor>a42ef72cfde36a03cbd221f6372b6dfe9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::FormElement</name>
    <filename>a01945.html</filename>
    <templarg>Derived</templarg>
    <templarg>element</templarg>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a01945.html</anchorfile>
      <anchor>a9b887e1e07e7a194efa05748f8ec289c</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FormElement</name>
      <anchorfile>a01945.html</anchorfile>
      <anchor>a7693f90aa4b16085614fd58412854a5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>a01945.html</anchorfile>
      <anchor>a3bdb8faf108f06a63ad4f93508d9b1be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>a01945.html</anchorfile>
      <anchor>ade13348bddc71392abcb6b200c9c3954</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FormElement</name>
      <anchorfile>a01945.html</anchorfile>
      <anchor>a74409bc2c3a03d397379e2abc11721f1</anchor>
      <arglist>(const std::string &amp;name, bool required)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>name_</name>
      <anchorfile>a01945.html</anchorfile>
      <anchor>a7032ed321ce857727a5f067566da1355</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>required_</name>
      <anchorfile>a01945.html</anchorfile>
      <anchor>a6d6a6611a29a0e94107a8fd97706a43b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FormElement&lt; FormArrayInput&lt; T &gt;, Elements::ArrayInput &gt;</name>
    <filename>a01945.html</filename>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a01945.html</anchorfile>
      <anchor>a9b887e1e07e7a194efa05748f8ec289c</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FormElement</name>
      <anchorfile>a01945.html</anchorfile>
      <anchor>a7693f90aa4b16085614fd58412854a5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>a01945.html</anchorfile>
      <anchor>a3bdb8faf108f06a63ad4f93508d9b1be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>a01945.html</anchorfile>
      <anchor>ade13348bddc71392abcb6b200c9c3954</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FormElement</name>
      <anchorfile>a01945.html</anchorfile>
      <anchor>a74409bc2c3a03d397379e2abc11721f1</anchor>
      <arglist>(const std::string &amp;name, bool required)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>name_</name>
      <anchorfile>a01945.html</anchorfile>
      <anchor>a7032ed321ce857727a5f067566da1355</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>required_</name>
      <anchorfile>a01945.html</anchorfile>
      <anchor>a6d6a6611a29a0e94107a8fd97706a43b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FormElement&lt; FormComboInput, Elements::ComboInput &gt;</name>
    <filename>a01945.html</filename>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a01945.html</anchorfile>
      <anchor>a9b887e1e07e7a194efa05748f8ec289c</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FormElement</name>
      <anchorfile>a01945.html</anchorfile>
      <anchor>a7693f90aa4b16085614fd58412854a5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>a01945.html</anchorfile>
      <anchor>a3bdb8faf108f06a63ad4f93508d9b1be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>a01945.html</anchorfile>
      <anchor>ade13348bddc71392abcb6b200c9c3954</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FormElement</name>
      <anchorfile>a01945.html</anchorfile>
      <anchor>a74409bc2c3a03d397379e2abc11721f1</anchor>
      <arglist>(const std::string &amp;name, bool required)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>name_</name>
      <anchorfile>a01945.html</anchorfile>
      <anchor>a7032ed321ce857727a5f067566da1355</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>required_</name>
      <anchorfile>a01945.html</anchorfile>
      <anchor>a6d6a6611a29a0e94107a8fd97706a43b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FormElement&lt; FormDataComboInput, Elements::DataComboInput &gt;</name>
    <filename>a01945.html</filename>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a01945.html</anchorfile>
      <anchor>a9b887e1e07e7a194efa05748f8ec289c</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FormElement</name>
      <anchorfile>a01945.html</anchorfile>
      <anchor>a7693f90aa4b16085614fd58412854a5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>a01945.html</anchorfile>
      <anchor>a3bdb8faf108f06a63ad4f93508d9b1be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>a01945.html</anchorfile>
      <anchor>ade13348bddc71392abcb6b200c9c3954</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FormElement</name>
      <anchorfile>a01945.html</anchorfile>
      <anchor>a74409bc2c3a03d397379e2abc11721f1</anchor>
      <arglist>(const std::string &amp;name, bool required)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>name_</name>
      <anchorfile>a01945.html</anchorfile>
      <anchor>a7032ed321ce857727a5f067566da1355</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>required_</name>
      <anchorfile>a01945.html</anchorfile>
      <anchor>a6d6a6611a29a0e94107a8fd97706a43b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FormElement&lt; FormDataInput&lt; T, element &gt;, element &gt;</name>
    <filename>a01945.html</filename>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a01945.html</anchorfile>
      <anchor>a9b887e1e07e7a194efa05748f8ec289c</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FormElement</name>
      <anchorfile>a01945.html</anchorfile>
      <anchor>a7693f90aa4b16085614fd58412854a5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>a01945.html</anchorfile>
      <anchor>a3bdb8faf108f06a63ad4f93508d9b1be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>a01945.html</anchorfile>
      <anchor>ade13348bddc71392abcb6b200c9c3954</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FormElement</name>
      <anchorfile>a01945.html</anchorfile>
      <anchor>a74409bc2c3a03d397379e2abc11721f1</anchor>
      <arglist>(const std::string &amp;name, bool required)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>name_</name>
      <anchorfile>a01945.html</anchorfile>
      <anchor>a7032ed321ce857727a5f067566da1355</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>required_</name>
      <anchorfile>a01945.html</anchorfile>
      <anchor>a6d6a6611a29a0e94107a8fd97706a43b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::FormImpl</name>
    <filename>a01941.html</filename>
    <templarg>Callback</templarg>
    <base>CallbackElement&lt; Element, Callback &gt;</base>
    <member kind="function">
      <type></type>
      <name>FormImpl</name>
      <anchorfile>a01941.html</anchorfile>
      <anchor>a0a9bdbcc3e4a6c161caf9f0dbf347c32</anchor>
      <arglist>(const std::string &amp;name, Callback cb, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addElement</name>
      <anchorfile>a01941.html</anchorfile>
      <anchor>ab9e4a119c65afeb42213d0e4a6fd7019</anchor>
      <arglist>(T &amp;&amp;element)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a01941.html</anchorfile>
      <anchor>a45371b1cc879901474c65fdee5f56808</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FormImpl</name>
      <anchorfile>a01941.html</anchorfile>
      <anchor>af03aec651081a3257a860feb38246c1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>a01941.html</anchorfile>
      <anchor>acf9c033b7b7440e437a3327795424f02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>a01941.html</anchorfile>
      <anchor>a49d4514deb2452ef6908eda1daacf629</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::GazeTask</name>
    <filename>a02377.html</filename>
    <base>TrajectoryTaskGeneric&lt; tasks::qp::GazeTask &gt;</base>
    <member kind="function">
      <type></type>
      <name>GazeTask</name>
      <anchorfile>a02377.html</anchorfile>
      <anchor>a84332429e702444553058f37edcbe1d8</anchor>
      <arglist>(const std::string &amp;bodyName, const Eigen::Vector2d &amp;point2d, double depthEstimate, const sva::PTransformd &amp;X_b_gaze, const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, double stiffness=2.0, double weight=500)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GazeTask</name>
      <anchorfile>a02377.html</anchorfile>
      <anchor>abbb977995875cf7717d4ad89d78b0e12</anchor>
      <arglist>(const std::string &amp;bodyName, const Eigen::Vector3d &amp;point3d, const sva::PTransformd &amp;X_b_gaze, const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, double stiffness=2.0, double weight=500)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>a02377.html</anchorfile>
      <anchor>a0be1042d1ec91e59bb2431ba86d226fe</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>error</name>
      <anchorfile>a02377.html</anchorfile>
      <anchor>acc7bf6883b72a0d7082addb417956037</anchor>
      <arglist>(const Eigen::Vector2d &amp;point2d, const Eigen::Vector2d &amp;point2d_ref=Eigen::Vector2d::Zero())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>error</name>
      <anchorfile>a02377.html</anchorfile>
      <anchor>afeef6a71bd72087a707d60a093664d86</anchor>
      <arglist>(const Eigen::Vector3d &amp;point3d, const Eigen::Vector2d &amp;point2d_ref=Eigen::Vector2d::Zero())</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_planning::generator</name>
    <filename>a01569.html</filename>
    <member kind="function">
      <type></type>
      <name>generator</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>a3e2ccebf2866065e7ad809ef03b28471</anchor>
      <arglist>(int n_preview, double dt, double mass=60, double waist_height=0.8)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generate</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>a565933c7147f4ab0b1ce3cbf8419de3a</anchor>
      <arglist>(int n_time)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Eigen::Vector3d &gt; &amp;</type>
      <name>Steps</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>a7e818bb019e6aa806a3cc923c5d0698a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSteps</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>a8b2d43c1995b1c210c8601fdc337a460</anchor>
      <arglist>(const std::vector&lt; Eigen::Vector3d &gt; &amp;steps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>ac32216ece17ce98cbc4bf8dc5a118e69</anchor>
      <arglist>(const Eigen::Vector3d &amp;step)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>IdealCOGPosition</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>a26465fa9dd5ebe63e53208d4f15668f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>IdealCOGVelocity</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>a72016f0cdf5a726bef638801ce932cc5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>IdealCOGAcceleration</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>a154fd12b49f5c6245c02dfc4f5736971</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>CompensatedCOGPosition</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>a267fb938bba23291232bf547818033f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>CompensatedCOGVelocity</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>ab284cd9a9b6db40ecba85e74b0d421c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>CompensatedCOGAcceleration</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>a6f6b2b43da874bf1a59dfec48d37ce48</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>OutputCOGPosition</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>a4019fd7259832cb95fb7196da53c8ded</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>OutputCOGVelocity</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>a85cfea0c387b5634a04076de6598046e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>OutputCOGAcceleration</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>ac7aba7b4fbe24f1a137e2fdf89b4b4d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>IdealZMPPosition</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>aaa3404c6c270d17857c41bd5bbad6dfb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>IdealZMPVelocity</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>af814993e8d68ec59a56d48952a0b56c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>CompensatedZMPPosition</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>a3ab4439ee87384d1f04b6c2a84fb54d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>CompensatedZMPVelocity</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>a8ee90f16ff9996c83aee9b98331382d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>OutputZMPPosition</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>a27eb16418e00a24bf331c5b0c1998962</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>IdealCOGPosition</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>a26465fa9dd5ebe63e53208d4f15668f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>IdealCOGVelocity</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>a72016f0cdf5a726bef638801ce932cc5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>IdealCOGAcceleration</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>a154fd12b49f5c6245c02dfc4f5736971</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>CompensatedCOGPosition</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>a267fb938bba23291232bf547818033f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>CompensatedCOGVelocity</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>ab284cd9a9b6db40ecba85e74b0d421c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>CompensatedCOGAcceleration</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>a6f6b2b43da874bf1a59dfec48d37ce48</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>OutputCOGPosition</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>a4019fd7259832cb95fb7196da53c8ded</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>OutputCOGVelocity</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>a85cfea0c387b5634a04076de6598046e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>OutputCOGAcceleration</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>ac7aba7b4fbe24f1a137e2fdf89b4b4d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>IdealZMPPosition</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>aaa3404c6c270d17857c41bd5bbad6dfb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>IdealZMPVelocity</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>af814993e8d68ec59a56d48952a0b56c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>CompensatedZMPPosition</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>a3ab4439ee87384d1f04b6c2a84fb54d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>CompensatedZMPVelocity</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>a8ee90f16ff9996c83aee9b98331382d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>OutputZMPPosition</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>a27eb16418e00a24bf331c5b0c1998962</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_solver::GenericLoader</name>
    <filename>a02233.html</filename>
    <templarg>Derived</templarg>
    <templarg>T</templarg>
    <class kind="struct">mc_solver::GenericLoader::Handle</class>
    <member kind="typedef">
      <type>std::shared_ptr&lt; T &gt;</type>
      <name>T_ptr</name>
      <anchorfile>a02233.html</anchorfile>
      <anchor>adb735279d914086553de0a21285126e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; T_ptr(mc_solver::QPSolver &amp;, const mc_rtc::Configuration &amp;)&gt;</type>
      <name>load_fun</name>
      <anchorfile>a02233.html</anchorfile>
      <anchor>a02dbea2e4a083ed146cea53d7b648483</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, load_fun &gt;</type>
      <name>storage_t</name>
      <anchorfile>a02233.html</anchorfile>
      <anchor>afc58a28dae04a63aa3ed180a654ec223</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Handle</type>
      <name>register_load_function</name>
      <anchorfile>a02233.html</anchorfile>
      <anchor>ac24012d951d6a04490b05a64f5ccf620</anchor>
      <arglist>(const std::string &amp;type, load_fun fn)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>unregister_load_function</name>
      <anchorfile>a02233.html</anchorfile>
      <anchor>a35fcd3b9f4280a31049089aa57b54330</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T_ptr</type>
      <name>load</name>
      <anchorfile>a02233.html</anchorfile>
      <anchor>a5da6be5874e61bd328a5452dda08950c</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const std::string &amp;file)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T_ptr</type>
      <name>load</name>
      <anchorfile>a02233.html</anchorfile>
      <anchor>a13b1f947ca0b22d2985f580ec57caf85</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; U &gt;</type>
      <name>load</name>
      <anchorfile>a02233.html</anchorfile>
      <anchor>a5236104825bda3a24cc3645e0e3bf448</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const std::string &amp;file)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; U &gt;</type>
      <name>load</name>
      <anchorfile>a02233.html</anchorfile>
      <anchor>ab10c87faa2a1fb4721163c6a479fdd78</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const mc_rtc::Configuration &amp;config)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericLoader&lt; ConstraintSetLoader, ConstraintSet &gt;</name>
    <filename>a02233.html</filename>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ConstraintSet &gt;</type>
      <name>T_ptr</name>
      <anchorfile>a02233.html</anchorfile>
      <anchor>adb735279d914086553de0a21285126e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; T_ptr(mc_solver::QPSolver &amp;, const mc_rtc::Configuration &amp;)&gt;</type>
      <name>load_fun</name>
      <anchorfile>a02233.html</anchorfile>
      <anchor>a02dbea2e4a083ed146cea53d7b648483</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, load_fun &gt;</type>
      <name>storage_t</name>
      <anchorfile>a02233.html</anchorfile>
      <anchor>afc58a28dae04a63aa3ed180a654ec223</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Handle</type>
      <name>register_load_function</name>
      <anchorfile>a02233.html</anchorfile>
      <anchor>ac24012d951d6a04490b05a64f5ccf620</anchor>
      <arglist>(const std::string &amp;type, load_fun fn)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>unregister_load_function</name>
      <anchorfile>a02233.html</anchorfile>
      <anchor>a35fcd3b9f4280a31049089aa57b54330</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T_ptr</type>
      <name>load</name>
      <anchorfile>a02233.html</anchorfile>
      <anchor>a5da6be5874e61bd328a5452dda08950c</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const std::string &amp;file)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T_ptr</type>
      <name>load</name>
      <anchorfile>a02233.html</anchorfile>
      <anchor>a13b1f947ca0b22d2985f580ec57caf85</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; U &gt;</type>
      <name>load</name>
      <anchorfile>a02233.html</anchorfile>
      <anchor>a5236104825bda3a24cc3645e0e3bf448</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const std::string &amp;file)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; U &gt;</type>
      <name>load</name>
      <anchorfile>a02233.html</anchorfile>
      <anchor>ab10c87faa2a1fb4721163c6a479fdd78</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const mc_rtc::Configuration &amp;config)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericLoader&lt; MetaTaskLoader, MetaTask &gt;</name>
    <filename>a02233.html</filename>
    <member kind="typedef">
      <type>std::shared_ptr&lt; MetaTask &gt;</type>
      <name>T_ptr</name>
      <anchorfile>a02233.html</anchorfile>
      <anchor>adb735279d914086553de0a21285126e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; T_ptr(mc_solver::QPSolver &amp;, const mc_rtc::Configuration &amp;)&gt;</type>
      <name>load_fun</name>
      <anchorfile>a02233.html</anchorfile>
      <anchor>a02dbea2e4a083ed146cea53d7b648483</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, load_fun &gt;</type>
      <name>storage_t</name>
      <anchorfile>a02233.html</anchorfile>
      <anchor>afc58a28dae04a63aa3ed180a654ec223</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Handle</type>
      <name>register_load_function</name>
      <anchorfile>a02233.html</anchorfile>
      <anchor>ac24012d951d6a04490b05a64f5ccf620</anchor>
      <arglist>(const std::string &amp;type, load_fun fn)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>unregister_load_function</name>
      <anchorfile>a02233.html</anchorfile>
      <anchor>a35fcd3b9f4280a31049089aa57b54330</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T_ptr</type>
      <name>load</name>
      <anchorfile>a02233.html</anchorfile>
      <anchor>a5da6be5874e61bd328a5452dda08950c</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const std::string &amp;file)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T_ptr</type>
      <name>load</name>
      <anchorfile>a02233.html</anchorfile>
      <anchor>a13b1f947ca0b22d2985f580ec57caf85</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; U &gt;</type>
      <name>load</name>
      <anchorfile>a02233.html</anchorfile>
      <anchor>a5236104825bda3a24cc3645e0e3bf448</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const std::string &amp;file)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; U &gt;</type>
      <name>load</name>
      <anchorfile>a02233.html</anchorfile>
      <anchor>ab10c87faa2a1fb4721163c6a479fdd78</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const mc_rtc::Configuration &amp;config)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_solver::utils::GenInequalityConstraint</name>
    <filename>a02241.html</filename>
    <templarg>UpdateT</templarg>
    <base>Constraint&lt; tasks::qp::GenInequality, UpdateT &gt;</base>
    <member kind="typedef">
      <type>Constraint&lt; tasks::qp::GenInequality, UpdateT &gt;</type>
      <name>Base</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>a647a3478f1ace415da2dfe9cbd9705e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenInequalityConstraint</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>ac5df683b56271a2bdbdd26487b6cc026</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenInequalityConstraint</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>a7d193fcd6f294807a5e1182f223304a6</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenInequalityConstraint</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>ab606fd78c1a99c26a63a78f41519bb89</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>AGenInEq</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>a72ffdce8cb16cfd75fb337488cc44160</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>descGenInEq</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>ac87906b16a1bdd6be59c7d630461a2b4</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;, int i) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenInequalityConstraint&lt; utils::UpdateForce &gt;</name>
    <filename>a02241.html</filename>
    <base>Constraint&lt; tasks::qp::GenInequality, utils::UpdateForce &gt;</base>
    <member kind="typedef">
      <type>Constraint&lt; tasks::qp::GenInequality, utils::UpdateForce &gt;</type>
      <name>Base</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>a647a3478f1ace415da2dfe9cbd9705e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenInequalityConstraint</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>ac5df683b56271a2bdbdd26487b6cc026</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenInequalityConstraint</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>a7d193fcd6f294807a5e1182f223304a6</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenInequalityConstraint</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>ab606fd78c1a99c26a63a78f41519bb89</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>AGenInEq</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>a72ffdce8cb16cfd75fb337488cc44160</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>descGenInEq</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>ac87906b16a1bdd6be59c7d630461a2b4</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;, int i) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenInequalityConstraint&lt; utils::UpdateLambda &gt;</name>
    <filename>a02241.html</filename>
    <base>Constraint&lt; tasks::qp::GenInequality, utils::UpdateLambda &gt;</base>
    <member kind="typedef">
      <type>Constraint&lt; tasks::qp::GenInequality, utils::UpdateLambda &gt;</type>
      <name>Base</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>a647a3478f1ace415da2dfe9cbd9705e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenInequalityConstraint</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>ac5df683b56271a2bdbdd26487b6cc026</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenInequalityConstraint</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>a7d193fcd6f294807a5e1182f223304a6</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenInequalityConstraint</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>ab606fd78c1a99c26a63a78f41519bb89</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>AGenInEq</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>a72ffdce8cb16cfd75fb337488cc44160</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>descGenInEq</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>ac87906b16a1bdd6be59c7d630461a2b4</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;, int i) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenInequalityConstraint&lt; utils::UpdateRobot &gt;</name>
    <filename>a02241.html</filename>
    <base>Constraint&lt; tasks::qp::GenInequality, utils::UpdateRobot &gt;</base>
    <member kind="typedef">
      <type>Constraint&lt; tasks::qp::GenInequality, utils::UpdateRobot &gt;</type>
      <name>Base</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>a647a3478f1ace415da2dfe9cbd9705e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenInequalityConstraint</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>ac5df683b56271a2bdbdd26487b6cc026</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenInequalityConstraint</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>a7d193fcd6f294807a5e1182f223304a6</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenInequalityConstraint</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>ab606fd78c1a99c26a63a78f41519bb89</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>AGenInEq</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>a72ffdce8cb16cfd75fb337488cc44160</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>descGenInEq</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>ac87906b16a1bdd6be59c7d630461a2b4</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;, int i) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_solver::GenInequalityConstraintForce</name>
    <filename>a02253.html</filename>
    <base>GenInequalityConstraint&lt; utils::UpdateForce &gt;</base>
    <member kind="function">
      <type></type>
      <name>GenInequalityConstraintForce</name>
      <anchorfile>a02253.html</anchorfile>
      <anchor>a65c6b5724f5c8a839dc5cfd4170ac3ce</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_solver::GenInequalityConstraintLambda</name>
    <filename>a02249.html</filename>
    <base>GenInequalityConstraint&lt; utils::UpdateLambda &gt;</base>
    <member kind="function">
      <type></type>
      <name>GenInequalityConstraintLambda</name>
      <anchorfile>a02249.html</anchorfile>
      <anchor>a42ad6d2e1a60aadcd98ee19529d68f17</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_solver::GenInequalityConstraintRobot</name>
    <filename>a02245.html</filename>
    <base>GenInequalityConstraint&lt; utils::UpdateRobot &gt;</base>
    <member kind="function">
      <type></type>
      <name>GenInequalityConstraintRobot</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>a389cffd5e1cba80d9636658f3c887a4a</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::log::GetLogType</name>
    <filename>a02141.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static constexpr mc_rtc::log::LogType</type>
      <name>type</name>
      <anchorfile>a02141.html</anchorfile>
      <anchor>a7b718d634332b545266bbe2298a624d4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::log::GetLogType&lt; std::vector&lt; double, A &gt; &gt;</name>
    <filename>a02145.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static constexpr mc_rtc::log::LogType</type>
      <name>type</name>
      <anchorfile>a02145.html</anchorfile>
      <anchor>af37730234c3db7fedadf42ef4699c090</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Global</name>
    <filename>a02481.html</filename>
  </compound>
  <compound kind="struct">
    <name>mc_control::MCGlobalController::GlobalConfiguration</name>
    <filename>a01489.html</filename>
    <member kind="function">
      <type></type>
      <name>GlobalConfiguration</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>aca1189c364441ad5d5fa5a1f7b53a4bd</anchor>
      <arglist>(const std::string &amp;conf, std::shared_ptr&lt; mc_rbdyn::RobotModule &gt; rm)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>enabled</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>ac2d357671c1f2ba1c316a128a6bf6549</anchor>
      <arglist>(const std::string &amp;ctrl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load_controllers_configs</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>a25be914af3f8f7543109624e44f820f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load_plugin_configs</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>a4a03b269639f6f50e2b43ecfb7434c6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>use_sandbox</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>a5832a5143cdcc747a8936a509d04113f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>verbose_loader</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>a02a37bf8e560cc576b7fd7579aeeaf64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>robot_module_paths</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>ac21e4689082d5955c94ec95eadfc9479</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; mc_rbdyn::RobotModule &gt;</type>
      <name>main_robot_module</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>a0f8466a2f2e104ed4fd266c5d50a1390</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>observer_module_paths</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>aa294a1ad2731835821d3669f7bd770ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>enabled_observers</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>a152f6370edf16234c20d0331612da476</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::unordered_map&lt; std::string, mc_rtc::Configuration &gt;</type>
      <name>observer_configs</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>afc2d75f57779ba23d2c7d3522a38ca6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>global_plugin_paths</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>a66adac4c10fc9599308e15741a15f0a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>global_plugins</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>a9b7cb460139df0aa576f76bfb45e4bc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::unordered_map&lt; std::string, mc_rtc::Configuration &gt;</type>
      <name>global_plugin_configs</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>a71b30a62cbfd288deb840dd294a181ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>controller_module_paths</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>afe307dbd38d3487b7ef154f35333cb5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>enabled_controllers</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>a6e0f82cdd3da14f8caf29a201d4f7d71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>initial_controller</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>a160c16f13781fc249731c80cb25b9dad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::unordered_map&lt; std::string, mc_rtc::Configuration &gt;</type>
      <name>controllers_configs</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>a59375fa06c589ffb9616139fbecd9426</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>timestep</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>a570a304a795594860cfd5733a04588c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>log_real</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>a7594f385b7a26375665cfe2b4b7624c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enable_log</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>a1fa58d70b7f6aea1d24376d1e2263adc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mc_rtc::Logger::Policy</type>
      <name>log_policy</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>acbde34fb861228455a925e57f38b2e6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>log_directory</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>a8eedde988acfcfba5942a52d69f2b1b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>log_template</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>a0ca07c26b98991be2e1036a78c5f9702</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enable_gui_server</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>a10a18732116f39ff9f8bce06edf764a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>gui_timestep</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>aefc4cb0145c34e7595b346186ed8a2d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>gui_server_pub_uris</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>a669bd8f5926553a0091c2f2118d5d5cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>gui_server_rep_uris</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>a86b0d00d5943bf98a345f513b03f5388</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Configuration</type>
      <name>config</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>aa22943a039c650dcc7f6b338506380a7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_control::GlobalPlugin</name>
    <filename>a01481.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GlobalPlugin</name>
      <anchorfile>a01481.html</anchorfile>
      <anchor>ae68386345dfc2a1820747a566d37c4af</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>a01481.html</anchorfile>
      <anchor>acd8832c0335bbf2493bd04697b721bd7</anchor>
      <arglist>(mc_control::MCGlobalController &amp;controller, const mc_rtc::Configuration &amp;config)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>a01481.html</anchorfile>
      <anchor>a034ddfcb8958c36c5812cdb7e0a2e9ca</anchor>
      <arglist>(mc_control::MCGlobalController &amp;controller)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>before</name>
      <anchorfile>a01481.html</anchorfile>
      <anchor>a83ce36f99de7b4a3e7af152ed88e0f5b</anchor>
      <arglist>(mc_control::MCGlobalController &amp;controller)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>after</name>
      <anchorfile>a01481.html</anchorfile>
      <anchor>ab661e381f418ad5f9afa4adf25b4f282</anchor>
      <arglist>(mc_control::MCGlobalController &amp;controller)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_control::Gripper</name>
    <filename>a01477.html</filename>
    <member kind="function">
      <type></type>
      <name>Gripper</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>a8d7b0576bb756c6936732170f6075c56</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;robot, const std::vector&lt; std::string &gt; &amp;jointNames, const std::string &amp;robot_urdf, bool reverseLimits, const mc_rbdyn::RobotModule::Gripper::Safety &amp;safety)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Gripper</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>a483d47181d0cfa400b038a69b4a55a77</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;robot, const std::vector&lt; std::string &gt; &amp;jointNames, const std::vector&lt; mc_rbdyn::Mimic &gt; &amp;mimics, bool reverseLimits, const mc_rbdyn::RobotModule::Gripper::Safety &amp;safety)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetDefaults</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>a5a1af6322efc9a5896b0c18890e27231</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveConfig</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>a14de4e5ac7668163dd07358caa1ead4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restoreConfig</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>ada9148786b02947b3db21cec72ff81bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>ada608acad76122b69018232d54480801</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;currentQ)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>af8d2812249f9a609ed32cb1a43ac45fc</anchor>
      <arglist>(const Gripper &amp;gripper)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>af6a69ed1632b542cf0c2c62d9a201aa3</anchor>
      <arglist>(double timeStep, mc_rbdyn::Robot &amp;robot, std::map&lt; std::string, std::vector&lt; double &gt;&gt; &amp;qOut)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTargetQ</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>a1e92af3c043c39987da91fb4f53d708e</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;targetQ)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTargetOpening</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>a1627ecadc67cc990de55e11283f2da8b</anchor>
      <arglist>(double targetOpening)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>curPosition</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>ad0e50e298dbf9b0a2be480a40a207c83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>joints</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>aa789942e53cc165d37e40819a233ddbf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>activeJoints</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>a6acabadc915ad853670a65f5a83697e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>q</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>a942af31983cf3ee9caecd5fff237258b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>opening</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>a7095762206c00c3b8a3de9d54a981a2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>percentVMAX</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>aad4ca73d511751dca580ea0f372780e1</anchor>
      <arglist>(double percent)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>percentVMAX</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>a255e63b9cd2411c182b63f7d645414ad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>actualCommandDiffTrigger</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>a9021dad5d917b8bc8d27b786a3f619ff</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>actualCommandDiffTrigger</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>a7b3b7316af2e3f34f89da026e04c5c67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>overCommandLimitIterN</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>a852a2f31c98679c44ab5548976412a65</anchor>
      <arglist>(unsigned int N)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>overCommandLimitIterN</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>a6e41d5e49c7dd4eb8e72abea2897eb58</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>releaseSafetyOffset</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>ad808c7685be58f6523c38284b642e101</anchor>
      <arglist>(double offset)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>releaseSafetyOffset</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>af91c5965773d7b9f0d70d807c9a78c71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>complete</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>a1f9ced059d4998dab6150b7796e974af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>mc_rbdyn::RobotModule::Gripper::Safety</type>
      <name>Config</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>ab343f75540cb23dadf80172b9b5e1e79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>names</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>a256da9263781bdd51abeeea862c5e7f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>active_joints</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>a22fa930ce8c386d8ccae3bd2664cdad2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; size_t &gt;</type>
      <name>active_joints_idx</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>a0f87c5c3ff7cd5ffb5219add516b2c3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>joints_mbc_idx</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>a30fe14a15d20853d1d0ddd2c3cedcb14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>closeP</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>a5eb0a94fccb4aa671546b6c635e7bb6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>openP</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>aa6a495f7018cd71dcc4d366df8807cf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>vmax</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>a35f8adae647723d47d34a4f1037e3fb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::pair&lt; size_t, double &gt; &gt;</type>
      <name>mult</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>a6fe10788bcdbf6760ab2d6aabe8afdad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>offset</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>a3d7cfa4cecffe109ec06217fa5e7ad8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>_q</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>aa662e2af56018d19e5655934616d8943</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>targetQIn</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>a673081ad7c193519c89a22eba4119840</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt; *</type>
      <name>targetQ</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>a95690e9746ea4f736d5cae7372e20f01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>actualQ</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>aceef1a71c3113b84067decf4ba37ed66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Config</type>
      <name>config_</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>ab388cbc7157fea187e7398746b37e436</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Config</type>
      <name>savedConfig_</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>a6d32efc8e91965c32c9429c4610f7e94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Config</type>
      <name>defaultConfig_</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>adfb9313e52dfae85bf657914fd45b5cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>percentOpen</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>a8d40258cf16f5f0f65e938a5aaac330d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; bool &gt;</type>
      <name>overCommandLimit</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>aff69bd84c7afd52a4633b5dd49d70170</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; unsigned int &gt;</type>
      <name>overCommandLimitIter</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>acd2dade357fca9fa8f2261a8f29fc6b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>reversed</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>a7a77897e0cadfd9a41ec5a3500f77140</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::RobotModule::Gripper</name>
    <filename>a01765.html</filename>
    <class kind="struct">mc_rbdyn::RobotModule::Gripper::Safety</class>
    <member kind="function">
      <type></type>
      <name>Gripper</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>a095ecf4ebd9b675117bf1c5b45f093ca</anchor>
      <arglist>(const std::string &amp;name, const std::vector&lt; std::string &gt; &amp;joints, bool reverse_limits)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Gripper</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>a3fa8ce090be890c8fd518592fe65b25e</anchor>
      <arglist>(const std::string &amp;name, const std::vector&lt; std::string &gt; &amp;joints, bool reverse_limits, const Safety &amp;safety)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Gripper</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>acbbf290bba17b0b3becaf8c84da9c066</anchor>
      <arglist>(const std::string &amp;name, const std::vector&lt; std::string &gt; &amp;joints, bool reverse_limits, const Safety &amp;safety, const std::vector&lt; Mimic &gt; &amp;mimics)</arglist>
    </member>
    <member kind="function">
      <type>const Safety *</type>
      <name>safety</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>ae5dccc3ca07db76cec2cd0e70cc0bff5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Mimic &gt; *</type>
      <name>mimics</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>ada9b553ac4484e6920c981bf71a92368</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>a4c63d69cf61ff0c5ae634a549eadecd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>joints</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>a8ed52bd8f3d7ce552f62843c352b3d9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>reverse_limits</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>a61df660109da82ecf0cb5cb476525045</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_control::fsm::Grippers</name>
    <filename>a01425.html</filename>
    <base>mc_control::fsm::State</base>
    <member kind="function">
      <type>void</type>
      <name>configure</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a6feb7d14cdd9ac944f2311e83a786cbc</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a6ba0f75a698bceabed668835046d382f</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a62babf4e58b81ce358e6cb43779c564b</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>teardown</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ae05d422fa90c06b058c890323d792581</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rtc::Configuration</type>
      <name>config_</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ab4479382513e35667a4c0e3fd6d08d5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; mc_control::GripperRef &gt;</type>
      <name>grippers_</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>abd9bd9863a30fad30f940c0a6baeecab</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::GripperSurface</name>
    <filename>a01681.html</filename>
    <base>mc_rbdyn::Surface</base>
    <member kind="function">
      <type></type>
      <name>GripperSurface</name>
      <anchorfile>a01681.html</anchorfile>
      <anchor>acee39c73b63b2e7f72ae116002bb42ad</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;bodyName, const sva::PTransformd &amp;X_b_s, const std::string &amp;materialName, const std::vector&lt; sva::PTransformd &gt; &amp;pointsFromOrigin, const sva::PTransformd &amp;X_b_motor, const double &amp;motorMaxTorque)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GripperSurface</name>
      <anchorfile>a01681.html</anchorfile>
      <anchor>aeae1f456b4be7ed9cce2cda368f01ed8</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computePoints</name>
      <anchorfile>a01681.html</anchorfile>
      <anchor>a1b4a58b8831e412fdc7b7cd31fcf94dc</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>originTransform</name>
      <anchorfile>a01681.html</anchorfile>
      <anchor>a8df89e1076a2b0962ea1892b5db0070e</anchor>
      <arglist>(const sva::PTransformd &amp;X_s_sp)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Surface &gt;</type>
      <name>copy</name>
      <anchorfile>a01681.html</anchorfile>
      <anchor>aa40c47e1fd7799f7dec70ad283f1bc5e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>type</name>
      <anchorfile>a01681.html</anchorfile>
      <anchor>a8c620aadf02e4692a512bc250643df80</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; sva::PTransformd &gt; &amp;</type>
      <name>pointsFromOrigin</name>
      <anchorfile>a01681.html</anchorfile>
      <anchor>a027aa5e8df99bc421791c350e2793213</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>X_b_motor</name>
      <anchorfile>a01681.html</anchorfile>
      <anchor>a754909a2d87e053e76c070df2f5c876b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>motorMaxTorque</name>
      <anchorfile>a01681.html</anchorfile>
      <anchor>a88a3339b86716f672000736fefbb267a</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_control::fsm::HalfSittingState</name>
    <filename>a01429.html</filename>
    <base>mc_control::fsm::State</base>
    <member kind="function">
      <type>void</type>
      <name>configure</name>
      <anchorfile>a01429.html</anchorfile>
      <anchor>a2ff194443c33a0194c2235726eb91624</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a01429.html</anchorfile>
      <anchor>abde9259e5f3759b0266294abbad8c40b</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a01429.html</anchorfile>
      <anchor>a8a8b45fdafd6e8b70d81a48ec20357c0</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>teardown</name>
      <anchorfile>a01429.html</anchorfile>
      <anchor>a653b1d0395c408a264a954a4d8ba77be</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>has_stiffness_</name>
      <anchorfile>a01429.html</anchorfile>
      <anchor>a51cc3872c0fa57d4f65d0e3b2dc45687</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>stiffness_</name>
      <anchorfile>a01429.html</anchorfile>
      <anchor>abb6c686695985c1e5d79e8c966d33b0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>eval_threshold_</name>
      <anchorfile>a01429.html</anchorfile>
      <anchor>a93bf204a6601aa3294f2759817dc71e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>has_eval_</name>
      <anchorfile>a01429.html</anchorfile>
      <anchor>a02976f70bd545c5e8a2a461f854fd616</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>default_stiffness_</name>
      <anchorfile>a01429.html</anchorfile>
      <anchor>a84f53c91784c88fd59a7863dba0c2a30</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_solver::GenericLoader::Handle</name>
    <filename>a02237.html</filename>
    <member kind="function">
      <type></type>
      <name>Handle</name>
      <anchorfile>a02237.html</anchorfile>
      <anchor>a38ff1a03e3d23844851fbb6945052b6e</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Handle</name>
      <anchorfile>a02237.html</anchorfile>
      <anchor>a3abf3568270608f66c2f3d8f42b158c5</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Handle</name>
      <anchorfile>a02237.html</anchorfile>
      <anchor>acb9b93dfdd948310129a694363b1d018</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Handle</name>
      <anchorfile>a02237.html</anchorfile>
      <anchor>ad1354d6ec1298c55743594d5f7e959d7</anchor>
      <arglist>(const Handle &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Handle &amp;</type>
      <name>operator=</name>
      <anchorfile>a02237.html</anchorfile>
      <anchor>a7bcd67bfff206e0063212e99dca891bc</anchor>
      <arglist>(const Handle &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Handle</name>
      <anchorfile>a02237.html</anchorfile>
      <anchor>a8d34eedd99c2441236c01717b2ec7291</anchor>
      <arglist>(Handle &amp;&amp;h)</arglist>
    </member>
    <member kind="function">
      <type>Handle &amp;</type>
      <name>operator=</name>
      <anchorfile>a02237.html</anchorfile>
      <anchor>a1002f0272ae3957fe636d3b06dc34148</anchor>
      <arglist>(Handle &amp;&amp;h)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::internal::has_configuration_load_object</name>
    <filename>a01797.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::internal::has_configuration_save_object</name>
    <filename>a01805.html</filename>
    <templarg></templarg>
    <templarg>Args</templarg>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; mc_control::fsm::Contact &gt;</name>
    <filename>a01393.html</filename>
    <member kind="function">
      <type>std::size_t</type>
      <name>operator()</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a89728f7933300611b7ec997e4803bb6d</anchor>
      <arglist>(const mc_control::fsm::Contact &amp;c) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_solver::utils::InequalityConstraint</name>
    <filename>a02257.html</filename>
    <templarg>UpdateT</templarg>
    <base>Constraint&lt; tasks::qp::Inequality, UpdateT &gt;</base>
    <member kind="typedef">
      <type>Constraint&lt; tasks::qp::Inequality, UpdateT &gt;</type>
      <name>Base</name>
      <anchorfile>a02257.html</anchorfile>
      <anchor>aa303f3fb9dbf88ece28ef6ee013af8a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InequalityConstraint</name>
      <anchorfile>a02257.html</anchorfile>
      <anchor>a2cc88eb4c1dbe254f3c849c0e76b0e03</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InequalityConstraint</name>
      <anchorfile>a02257.html</anchorfile>
      <anchor>a94b71fe257e26cc49bb153daa02b32d1</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InequalityConstraint</name>
      <anchorfile>a02257.html</anchorfile>
      <anchor>aa1a4f382d3a67a6c728632e4f3189cb0</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>AInEq</name>
      <anchorfile>a02257.html</anchorfile>
      <anchor>a2f8d6cb3fdbcb0dbf3a598f5db0db67d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>descInEq</name>
      <anchorfile>a02257.html</anchorfile>
      <anchor>ad32d4e6549d14ef03faa5b61294a9161</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;, int i) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InequalityConstraint&lt; utils::UpdateForce &gt;</name>
    <filename>a02257.html</filename>
    <base>Constraint&lt; tasks::qp::Inequality, utils::UpdateForce &gt;</base>
    <member kind="typedef">
      <type>Constraint&lt; tasks::qp::Inequality, utils::UpdateForce &gt;</type>
      <name>Base</name>
      <anchorfile>a02257.html</anchorfile>
      <anchor>aa303f3fb9dbf88ece28ef6ee013af8a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InequalityConstraint</name>
      <anchorfile>a02257.html</anchorfile>
      <anchor>a2cc88eb4c1dbe254f3c849c0e76b0e03</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InequalityConstraint</name>
      <anchorfile>a02257.html</anchorfile>
      <anchor>a94b71fe257e26cc49bb153daa02b32d1</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InequalityConstraint</name>
      <anchorfile>a02257.html</anchorfile>
      <anchor>aa1a4f382d3a67a6c728632e4f3189cb0</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>AInEq</name>
      <anchorfile>a02257.html</anchorfile>
      <anchor>a2f8d6cb3fdbcb0dbf3a598f5db0db67d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>descInEq</name>
      <anchorfile>a02257.html</anchorfile>
      <anchor>ad32d4e6549d14ef03faa5b61294a9161</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;, int i) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InequalityConstraint&lt; utils::UpdateLambda &gt;</name>
    <filename>a02257.html</filename>
    <base>Constraint&lt; tasks::qp::Inequality, utils::UpdateLambda &gt;</base>
    <member kind="typedef">
      <type>Constraint&lt; tasks::qp::Inequality, utils::UpdateLambda &gt;</type>
      <name>Base</name>
      <anchorfile>a02257.html</anchorfile>
      <anchor>aa303f3fb9dbf88ece28ef6ee013af8a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InequalityConstraint</name>
      <anchorfile>a02257.html</anchorfile>
      <anchor>a2cc88eb4c1dbe254f3c849c0e76b0e03</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InequalityConstraint</name>
      <anchorfile>a02257.html</anchorfile>
      <anchor>a94b71fe257e26cc49bb153daa02b32d1</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InequalityConstraint</name>
      <anchorfile>a02257.html</anchorfile>
      <anchor>aa1a4f382d3a67a6c728632e4f3189cb0</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>AInEq</name>
      <anchorfile>a02257.html</anchorfile>
      <anchor>a2f8d6cb3fdbcb0dbf3a598f5db0db67d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>descInEq</name>
      <anchorfile>a02257.html</anchorfile>
      <anchor>ad32d4e6549d14ef03faa5b61294a9161</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;, int i) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InequalityConstraint&lt; utils::UpdateRobot &gt;</name>
    <filename>a02257.html</filename>
    <base>Constraint&lt; tasks::qp::Inequality, utils::UpdateRobot &gt;</base>
    <member kind="typedef">
      <type>Constraint&lt; tasks::qp::Inequality, utils::UpdateRobot &gt;</type>
      <name>Base</name>
      <anchorfile>a02257.html</anchorfile>
      <anchor>aa303f3fb9dbf88ece28ef6ee013af8a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InequalityConstraint</name>
      <anchorfile>a02257.html</anchorfile>
      <anchor>a2cc88eb4c1dbe254f3c849c0e76b0e03</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InequalityConstraint</name>
      <anchorfile>a02257.html</anchorfile>
      <anchor>a94b71fe257e26cc49bb153daa02b32d1</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InequalityConstraint</name>
      <anchorfile>a02257.html</anchorfile>
      <anchor>aa1a4f382d3a67a6c728632e4f3189cb0</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>AInEq</name>
      <anchorfile>a02257.html</anchorfile>
      <anchor>a2f8d6cb3fdbcb0dbf3a598f5db0db67d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>descInEq</name>
      <anchorfile>a02257.html</anchorfile>
      <anchor>ad32d4e6549d14ef03faa5b61294a9161</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;, int i) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_solver::InequalityConstraintForce</name>
    <filename>a02269.html</filename>
    <base>InequalityConstraint&lt; utils::UpdateForce &gt;</base>
    <member kind="function">
      <type></type>
      <name>InequalityConstraintForce</name>
      <anchorfile>a02269.html</anchorfile>
      <anchor>aa02dd7575c860883c51f5de6bd94b677</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_solver::InequalityConstraintLambda</name>
    <filename>a02265.html</filename>
    <base>InequalityConstraint&lt; utils::UpdateLambda &gt;</base>
    <member kind="function">
      <type></type>
      <name>InequalityConstraintLambda</name>
      <anchorfile>a02265.html</anchorfile>
      <anchor>ab6d5399263c39310ea3161c429873ca5</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_solver::InequalityConstraintRobot</name>
    <filename>a02261.html</filename>
    <base>InequalityConstraint&lt; utils::UpdateRobot &gt;</base>
    <member kind="function">
      <type></type>
      <name>InequalityConstraintRobot</name>
      <anchorfile>a02261.html</anchorfile>
      <anchor>a3a76371902953809f84f92a1c642a75b</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::IntegerInputImpl</name>
    <filename>a01965.html</filename>
    <templarg>GetT</templarg>
    <templarg>SetT</templarg>
    <base>mc_rtc::gui::CommonInputImpl</base>
    <member kind="function">
      <type></type>
      <name>IntegerInputImpl</name>
      <anchorfile>a01965.html</anchorfile>
      <anchor>abb43e816875fdb07339135c65fa7982e</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, SetT set_fn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntegerInputImpl</name>
      <anchorfile>a01965.html</anchorfile>
      <anchor>a5b3e150b460bd7c5b4fc426a1d08e370</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>a01965.html</anchorfile>
      <anchor>ad03092ac48c1ea07ce3ee119e000229b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_trajectory::InterpolatedRotation</name>
    <filename>a02473.html</filename>
    <base>Spline&lt; Eigen::Matrix3d, std::vector&lt; std::pair&lt; double, Eigen::Matrix3d &gt; &gt; &gt;</base>
    <member kind="typedef">
      <type>std::pair&lt; double, Eigen::Matrix3d &gt;</type>
      <name>waypoint_t</name>
      <anchorfile>a02473.html</anchorfile>
      <anchor>acbce3f9de05b28314ad0f61bb753d940</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InterpolatedRotation</name>
      <anchorfile>a02473.html</anchorfile>
      <anchor>a35aa6707fcb6b62d7be8daa9df9991eb</anchor>
      <arglist>(double duration, const Eigen::Matrix3d &amp;start, const Eigen::Matrix3d &amp;target, const std::vector&lt; waypoint_t &gt; &amp;waypoints={})</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02473.html</anchorfile>
      <anchor>a00b27ba3e5f5c5028a5c3f1b18552617</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix3d</type>
      <name>eval</name>
      <anchorfile>a02473.html</anchorfile>
      <anchor>a3848a3c1a1d3796760025d7504c0e7a7</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>waypoint</name>
      <anchorfile>a02473.html</anchorfile>
      <anchor>aa0cdeef0cd6d5a0f7daea52f53bac171</anchor>
      <arglist>(size_t idx, const Eigen::Matrix3d &amp;ori)</arglist>
    </member>
    <member kind="function">
      <type>const waypoint_t &amp;</type>
      <name>waypoint</name>
      <anchorfile>a02473.html</anchorfile>
      <anchor>a6188c9c45b2e7b836e82d911131c6f71</anchor>
      <arglist>(size_t idx) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; waypoint_t &gt;</type>
      <name>all_waypoints_</name>
      <anchorfile>a02473.html</anchorfile>
      <anchor>a3a83a147d6040fd550d83b1fa2a5e37c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_planning::motion_interpolator::InterpolatorBase</name>
    <filename>a01577.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>InterpolatorBase</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a6ea37a95677bbf5f109e22f370fa1fa1</anchor>
      <arglist>(const double &amp;scale_=1.0, const double &amp;eps=0.001, interpolator_type ip_type=NOT_SELECTED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InterpolatorBase</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a1e5dd604c89caa48bd6101f461b879a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const interpolator_type &amp;</type>
      <name>InterpolatorType</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>aab95106e25571e9bf6fe150cb5623a9d</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a673a10f5ef22ce4728563883cea186c3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a1dd041ea1804a04bf80ac260cbeb50bf</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a3e69836f19cb6776095b17bb43dfa4fb</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a144fd360574cd865790d0c1f89c3e1fb</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>std::deque&lt; InterpolatorDataType&lt; T &gt; &gt; &amp;</type>
      <name>getData</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a2ca842ba4c9b1147acfcb31b11a47888</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>InterpolatorDataType&lt; T &gt; &amp;</type>
      <name>getData</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a494bb24841b55569aafa50220bbe9e38</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>InterpolatorDataType&lt; T &gt; &amp;</type>
      <name>front</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a47811c4065ca02e89ebcb6c2a811f0ec</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>InterpolatorDataType&lt; T &gt; &amp;</type>
      <name>back</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a9ac5eba9f2415a58a3e696af6f3b5fa3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFinish</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>aea624095ead3d99abcfc68fa05603fda</anchor>
      <arglist>(const T &amp;t_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop_front</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a55a492cab8197630f17d841af22d5f57</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop_back</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a72b943e5df6a27feb9e53fcd0d25eee8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>acb443614bf08565a7841f27d104ae082</anchor>
      <arglist>(const T &amp;t_, const double &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>af7623cfc145c9b05c3c1a14a89930d08</anchor>
      <arglist>(const T &amp;t_, const double &amp;p, const double &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a52db6bb446cd3930fd735f10fd54d2dc</anchor>
      <arglist>(const T &amp;t_, const double &amp;p, const double &amp;v, const double &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>acc18904248040883d5b31f79b5688179</anchor>
      <arglist>(const T &amp;t_, const double &amp;p, bool boundary)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>ac082cdbe9850214df2feef6b7e78d380</anchor>
      <arglist>(const T &amp;t_, const double &amp;p, const double &amp;v, bool boundary)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a10e8e0a2f0ee6c3e7cd35380ce126163</anchor>
      <arglist>(const T &amp;t_, const double &amp;p, const double &amp;v, const double &amp;a, bool boundary)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_front</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a306217ba8bb87aaddd3370e614dc63e3</anchor>
      <arglist>(const T &amp;t_, const double &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_front</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a48106a503fbde08aa145be99597e6436</anchor>
      <arglist>(const T &amp;t_, const double &amp;p, const double &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_front</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>abcef34dac2802ea51e0d6e5f79ea94b8</anchor>
      <arglist>(const T &amp;t_, const double &amp;p, const double &amp;v, const double &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_front</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a4cd5c450aa76c244813c094b2dfabef0</anchor>
      <arglist>(const T &amp;t_, const double &amp;p, bool boundary)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_front</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a8d525577cece800318eab5f3a3b95cd4</anchor>
      <arglist>(const T &amp;t_, const double &amp;p, const double &amp;v, bool boundary)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_front</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>ab9f6a3ea435b32e9b5ee0b43edc1cf2e</anchor>
      <arglist>(const T &amp;t_, const double &amp;p, const double &amp;v, const double &amp;a, bool boundary)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a13bcdd97f2f318c1713b79c5d73b8699</anchor>
      <arglist>(const int n, const T &amp;t, const double &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a5a58550bd6d8b4668c2590e936c43f2d</anchor>
      <arglist>(const int n, const T &amp;t, const double &amp;p, const double &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a7c7c8caa34e9d6f72d31b788979eaaa3</anchor>
      <arglist>(const int n, const T &amp;t, const double &amp;p, const double &amp;v, const double &amp;a)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>set</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>af143c0908924f8efcd57e8d492b1fcd6</anchor>
      <arglist>(const int n, const T &amp;t, const double &amp;p, bool boundary)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>set</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>ade903d6fcb80bece74b659cca2c7af7a</anchor>
      <arglist>(const int n, const T &amp;t, const double &amp;p, const double &amp;v, bool boundary)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>set</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a2a880e961962c42436338d43c38ce820</anchor>
      <arglist>(const int n, const T &amp;t, const double &amp;p, const double &amp;v, const double &amp;a, bool boundary)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getValue</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a7ea257f5aa75a58b842caaac8219c92c</anchor>
      <arglist>(T t_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a25fc17ccf28375bd10cba541beccf6a1</anchor>
      <arglist>(T t_, double &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a0fcc139a551ba939b7775fb729cb2928</anchor>
      <arglist>(T t_, double &amp;p, double &amp;v)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>get</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>af518e3ae68f6e87b38b632b59909779c</anchor>
      <arglist>(T t_, double &amp;p, double &amp;v, double &amp;a)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>aee0a7d9c1be357aa2f576684931daa46</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>ad005694117de077258bc06c9cfd6b726</anchor>
      <arglist>(T t_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>ae7a22f3aa90c3b76ca619f61d77296de</anchor>
      <arglist>(T t_from, T t_to)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const double</type>
      <name>scale</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a9af91cba48a4d47e150d092c2daf5ced</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const double</type>
      <name>eps</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a2a5da6948f5ad4bc671234e626a0ea03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::deque&lt; InterpolatorDataType&lt; T &gt; &gt;</type>
      <name>data</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>afaebc4a869dbdd763f917a73013514f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_planning::motion_interpolator::InterpolatorDataType</name>
    <filename>a01573.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>InterpolatorDataType</name>
      <anchorfile>a01573.html</anchorfile>
      <anchor>a997ff09c1030f784050010a87b099c47</anchor>
      <arglist>(T t_=0.0, double pos_=0.0, double vel_=0.0, double acc_=0.0, bool boundary_=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InterpolatorDataType</name>
      <anchorfile>a01573.html</anchorfile>
      <anchor>afc4fcf7ed9b94e7a1c212d7b197ec02f</anchor>
      <arglist>(const InterpolatorDataType&lt; T &gt; &amp;obj)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>boundary</name>
      <anchorfile>a01573.html</anchorfile>
      <anchor>a085bf8150e57ec845545c0f53f160bed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>t</name>
      <anchorfile>a01573.html</anchorfile>
      <anchor>a7590cc3e112ae57ca57da0065e2ffb56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>pos</name>
      <anchorfile>a01573.html</anchorfile>
      <anchor>a88bc2ae5fd443fe214a62af192c2434f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>vel</name>
      <anchorfile>a01573.html</anchorfile>
      <anchor>acdfdfbf7f334abfd1fc31bac31d3d9bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>acc</name>
      <anchorfile>a01573.html</anchorfile>
      <anchor>a74431c245af9ab445ce79f8c5fb5b844</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::internal::is_eigen_matrix</name>
    <filename>a01861.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::log::is_serializable</name>
    <filename>a02149.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>value</name>
      <anchorfile>a02149.html</anchorfile>
      <anchor>a61a101e0e713dff37bd79ec91d6581de</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_solver::utils::IsUpdate</name>
    <filename>a02313.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>mc_observers::KinematicInertialObserver</name>
    <filename>a01545.html</filename>
    <base>mc_observers::KinematicInertialPoseObserver</base>
    <member kind="function">
      <type></type>
      <name>KinematicInertialObserver</name>
      <anchorfile>a01545.html</anchorfile>
      <anchor>a165a77caf0652ffe0388127ceafe7ba6</anchor>
      <arglist>(const std::string &amp;name, double dt, const mc_rtc::Configuration &amp;config={})</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a01545.html</anchorfile>
      <anchor>ae964341c760e3f942152f39d4d596432</anchor>
      <arglist>(const mc_control::MCController &amp;ct) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a01545.html</anchorfile>
      <anchor>a218d679b8851235ad18b2a49b2c71e01</anchor>
      <arglist>(const mc_control::MCController &amp;ctl, const sva::MotionVecd &amp;velW)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a01545.html</anchorfile>
      <anchor>a2c4b4fe83ab2ad282f02ad6c093e1be6</anchor>
      <arglist>(const mc_control::MCController &amp;ctl) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateRobots</name>
      <anchorfile>a01545.html</anchorfile>
      <anchor>ae46ba5b39b85a8b8e271b8b9c63a9a3b</anchor>
      <arglist>(const mc_control::MCController &amp;ctl, mc_rbdyn::Robots &amp;realRobots) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateBodySensor</name>
      <anchorfile>a01545.html</anchorfile>
      <anchor>a70199d5e62d4869778cd91e5e1f1bdee</anchor>
      <arglist>(mc_rbdyn::Robots &amp;realRobot, const std::string &amp;sensorName=&quot;FloatingBase&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const sva::MotionVecd &amp;</type>
      <name>velW</name>
      <anchorfile>a01545.html</anchorfile>
      <anchor>a2c973c62cabf96b73042047669579a64</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToLogger</name>
      <anchorfile>a01545.html</anchorfile>
      <anchor>a70349dda9da00837225afa919fdc9ce7</anchor>
      <arglist>(const mc_control::MCController &amp;, mc_rtc::Logger &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromLogger</name>
      <anchorfile>a01545.html</anchorfile>
      <anchor>ab7a34a69d1337573093b19cce5f4442e</anchor>
      <arglist>(mc_rtc::Logger &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>a01545.html</anchorfile>
      <anchor>a8d79052ede7702b4e1271aa45f8c17e4</anchor>
      <arglist>(const mc_control::MCController &amp;, mc_rtc::gui::StateBuilder &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromGUI</name>
      <anchorfile>a01545.html</anchorfile>
      <anchor>aee19bc2e4f9457e9df7e60fa5f562769</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_observers::KinematicInertialPoseObserver</name>
    <filename>a01549.html</filename>
    <base>mc_observers::Observer</base>
    <member kind="function">
      <type></type>
      <name>KinematicInertialPoseObserver</name>
      <anchorfile>a01549.html</anchorfile>
      <anchor>a0fe74faab4da1913b5e271bbf6a7d1ed</anchor>
      <arglist>(const std::string &amp;name, double dt, const mc_rtc::Configuration &amp;config={})</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a01549.html</anchorfile>
      <anchor>a5564591fc150e119fbfe35991031c7da</anchor>
      <arglist>(const mc_control::MCController &amp;ctl) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a01549.html</anchorfile>
      <anchor>a91574e17a50e7d77a05835335accc0ec</anchor>
      <arglist>(const mc_control::MCController &amp;ctl) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateRobots</name>
      <anchorfile>a01549.html</anchorfile>
      <anchor>a4c4e67e7605e46a446caaf2fd6525b7c</anchor>
      <arglist>(const mc_control::MCController &amp;ctl, mc_rbdyn::Robots &amp;realRobots) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateBodySensor</name>
      <anchorfile>a01549.html</anchorfile>
      <anchor>a143ebfe1847c460ee63c5ec2b8ec5047</anchor>
      <arglist>(mc_rbdyn::Robots &amp;robots, const std::string &amp;sensorName=&quot;FloatingBase&quot;)</arglist>
    </member>
    <member kind="function">
      <type>sva::PTransformd</type>
      <name>posW</name>
      <anchorfile>a01549.html</anchorfile>
      <anchor>ae0059d688bf9a9864199b4f8bece7e3e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToLogger</name>
      <anchorfile>a01549.html</anchorfile>
      <anchor>a2ef97a314ad3f21392694e585ff89582</anchor>
      <arglist>(const mc_control::MCController &amp;ctl, mc_rtc::Logger &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromLogger</name>
      <anchorfile>a01549.html</anchorfile>
      <anchor>adbd72a6d4f7f24086bb399c556aef15c</anchor>
      <arglist>(mc_rtc::Logger &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>estimateOrientation</name>
      <anchorfile>a01549.html</anchorfile>
      <anchor>a6b6a2d32b41691feec87fbff77276731</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;robot, const mc_rbdyn::Robot &amp;realRobot)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>estimatePosition</name>
      <anchorfile>a01549.html</anchorfile>
      <anchor>af4516c687fb2683eea570e5afc926165</anchor>
      <arglist>(const mc_control::MCController &amp;ctl)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_solver::KinematicsConstraint</name>
    <filename>a02273.html</filename>
    <base>mc_solver::ConstraintSet</base>
    <member kind="function">
      <type></type>
      <name>KinematicsConstraint</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>ae4fa119dd4f6643ea9bfd6e71d100e48</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, double timeStep)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KinematicsConstraint</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>a89801271d9d8e8288c6be32b13970f3f</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, double timeStep, const std::array&lt; double, 3 &gt; &amp;damper, double velocityPercent=1.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addToSolver</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>af5b445df5cd29d199cfda9031d5a468f</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, tasks::qp::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeFromSolver</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>a559d44b398969ebc1c69f0ffd80a3569</anchor>
      <arglist>(tasks::qp::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KinematicsConstraint</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>a9772713ef63997c2ff16a754cdf34401</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; tasks::qp::JointLimitsConstr &gt;</type>
      <name>jointLimitsConstr</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>ab113d21083add766566decba27631820</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; tasks::qp::DamperJointLimitsConstr &gt;</type>
      <name>damperJointLimitsConstr</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>a3febf798804706fce1efe1eac46c16f9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::LabelImpl</name>
    <filename>a01969.html</filename>
    <templarg>GetT</templarg>
    <base>mc_rtc::gui::DataElement</base>
    <member kind="function">
      <type></type>
      <name>LabelImpl</name>
      <anchorfile>a01969.html</anchorfile>
      <anchor>a8d875328b3e6dcc3d22287cdc7b65d9f</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LabelImpl</name>
      <anchorfile>a01969.html</anchorfile>
      <anchor>aa27962fafec53add87be74c45388891a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>a01969.html</anchorfile>
      <anchor>a4701d75e61153ae03eb9137a254e603f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::internal::lambda_traits</name>
    <filename>a01829.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::internal::lambda_traits&lt; RetT(C::*)(Args...) const &gt;</name>
    <filename>a01833.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>Args</templarg>
    <member kind="typedef">
      <type>std::function&lt; RetT(Args...)&gt;</type>
      <name>fn_t</name>
      <anchorfile>a01833.html</anchorfile>
      <anchor>ac1c1ac09e955e6e155ee38a3114908c3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::internal::lambda_traits&lt; RetT(C::*)(Args...)&gt;</name>
    <filename>a01837.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>Args</templarg>
    <member kind="typedef">
      <type>std::function&lt; RetT(Args...)&gt;</type>
      <name>fn_t</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>a41b09899ae7e27ef7427ce4b6968ea9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_filter::LeakyIntegrator</name>
    <filename>a01521.html</filename>
    <templarg>VectorT</templarg>
    <member kind="function">
      <type></type>
      <name>LeakyIntegrator</name>
      <anchorfile>a01521.html</anchorfile>
      <anchor>aa7768ba3fcbdb293ff11e389f5161826</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a01521.html</anchorfile>
      <anchor>a5d1fe6b17b1cab5807291e292f25b778</anchor>
      <arglist>(const VectorT &amp;value, double dt)</arglist>
    </member>
    <member kind="function">
      <type>const VectorT &amp;</type>
      <name>eval</name>
      <anchorfile>a01521.html</anchorfile>
      <anchor>af225809442be54a20499760103efa8a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>rate</name>
      <anchorfile>a01521.html</anchorfile>
      <anchor>aebcd30857d45fde67e66651ff62c0376</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rate</name>
      <anchorfile>a01521.html</anchorfile>
      <anchor>a1c6f1172e2ed09d564b4df366e5d7f21</anchor>
      <arglist>(double rate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saturation</name>
      <anchorfile>a01521.html</anchorfile>
      <anchor>aa8cf04d67353d666454a4e5f689ace5e</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a01521.html</anchorfile>
      <anchor>a0e45cd463d07d4659224c0c3a53be35c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LeakyIntegrator&lt; Eigen::Vector3d &gt;</name>
    <filename>a01521.html</filename>
    <member kind="function">
      <type></type>
      <name>LeakyIntegrator</name>
      <anchorfile>a01521.html</anchorfile>
      <anchor>aa7768ba3fcbdb293ff11e389f5161826</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a01521.html</anchorfile>
      <anchor>a5d1fe6b17b1cab5807291e292f25b778</anchor>
      <arglist>(const Eigen::Vector3d &amp;value, double dt)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>eval</name>
      <anchorfile>a01521.html</anchorfile>
      <anchor>af225809442be54a20499760103efa8a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>rate</name>
      <anchorfile>a01521.html</anchorfile>
      <anchor>aebcd30857d45fde67e66651ff62c0376</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rate</name>
      <anchorfile>a01521.html</anchorfile>
      <anchor>a1c6f1172e2ed09d564b4df366e5d7f21</anchor>
      <arglist>(double rate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saturation</name>
      <anchorfile>a01521.html</anchorfile>
      <anchor>aa8cf04d67353d666454a4e5f689ace5e</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a01521.html</anchorfile>
      <anchor>a0e45cd463d07d4659224c0c3a53be35c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_planning::linear_control_system::LinearControl3</name>
    <filename>a01581.html</filename>
    <member kind="function">
      <type></type>
      <name>LinearControl3</name>
      <anchorfile>a01581.html</anchorfile>
      <anchor>a3e635c551f960ab77136fecf69e6ca3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>a01581.html</anchorfile>
      <anchor>ac043f143ab288368fcf89f8c120d42e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a01581.html</anchorfile>
      <anchor>ae8b5987226c08bca4678d27ccc8f41db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a01581.html</anchorfile>
      <anchor>ac5c2982b5136e92646bda5777835cb1d</anchor>
      <arglist>(const Eigen::Vector3d &amp;x_ref_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a01581.html</anchorfile>
      <anchor>a8e0b22a3eed7ad5fded31144cc488a37</anchor>
      <arglist>(const double dt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a01581.html</anchorfile>
      <anchor>a23058726327fd745697a283e72ed91a1</anchor>
      <arglist>(const Eigen::Vector3d &amp;x_ref_, const double dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReference</name>
      <anchorfile>a01581.html</anchorfile>
      <anchor>a881fe2872b3d0f5d6d7154812c449558</anchor>
      <arglist>(const Eigen::Vector3d &amp;x_ref_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReference</name>
      <anchorfile>a01581.html</anchorfile>
      <anchor>af3595ba217d31ccbc1f02957148cacc4</anchor>
      <arglist>(double x1, double x2, double x3)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Matrix3d</type>
      <name>A</name>
      <anchorfile>a01581.html</anchorfile>
      <anchor>aa08c40454d9a32da8f7baa94e37a328a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>B</name>
      <anchorfile>a01581.html</anchorfile>
      <anchor>a4076efa8ddfd180ce1af596b8c344082</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::RowVector3d</type>
      <name>C</name>
      <anchorfile>a01581.html</anchorfile>
      <anchor>affbe3fa8cc873595708abf23a68f5d26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>K</name>
      <anchorfile>a01581.html</anchorfile>
      <anchor>aaf70b5212a2490fb3e936e118fdcef7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>x</name>
      <anchorfile>a01581.html</anchorfile>
      <anchor>a10d0ddf7511d63bf1518659575eb8e14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>x_ref</name>
      <anchorfile>a01581.html</anchorfile>
      <anchor>aa87d52cacafeead8f57171b083141fc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>y</name>
      <anchorfile>a01581.html</anchorfile>
      <anchor>a5fd879ecd439b64460e5c7cb88452ff2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>u</name>
      <anchorfile>a01581.html</anchorfile>
      <anchor>a7ec5cc68fc6d18ccdab495aa9afd200a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_planning::linear_control_system::LinearTimeVariantInvertedPendulum</name>
    <filename>a01585.html</filename>
    <class kind="struct">mc_planning::linear_control_system::LinearTimeVariantInvertedPendulum::State</class>
    <member kind="function">
      <type>EIGEN_MAKE_ALIGNED_OPERATOR_NEW</type>
      <name>LinearTimeVariantInvertedPendulum</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>a9ff8694223841eb44de2058bdc8e07be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearTimeVariantInvertedPendulum</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>a4a047d06a6a02227dab3c0778c4ec738</anchor>
      <arglist>(double dt, unsigned n_preview=0, unsigned weight_resolution=20000, double minHeight=0.01, double maxHeight=2.5)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LinearTimeVariantInvertedPendulum</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>a45a506558787353a67a900c6518f894c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>a3e8f7c6aea4f0ad0627cad4598d1de85</anchor>
      <arglist>(double dt, unsigned n_preview=0, unsigned weight_resolution=20000, double minHeight=0.01, double maxHeight=2.5)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initMatrices</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>a47aa3c6c55b0d2e3452175ad1127c460</anchor>
      <arglist>(double waist_height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>a5d2fc8bd8439d82b712f56fd0e1848c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>State</type>
      <name>getState</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>ab84d807b96e903d5be87c6042c265979</anchor>
      <arglist>(int n_time) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getState</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>ac90eeaee06cf9c343222eb7eb8b6a43a</anchor>
      <arglist>(int n_time, double &amp;cog_pos, double &amp;cog_vel, double &amp;cog_acc, double &amp;p, double &amp;pdot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generate</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>a5d3ebd9ea8d67d62d539e1452d4506ab</anchor>
      <arglist>(Eigen::VectorXd &amp;cog_pos, Eigen::VectorXd &amp;cog_vel, Eigen::VectorXd &amp;cog_acc, Eigen::VectorXd &amp;p_ref)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd &amp;</type>
      <name>p_ref</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>aaaa9229d0d48a4ce5b3298da9199d4bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>p_ref</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>a805b02627f193b596d43c6de3420d196</anchor>
      <arglist>(unsigned k)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd &amp;</type>
      <name>w2</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>a32e54cb2b655774f117c7a35ce65424a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>w2</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>a74e38a54de2bb643ff4b0eb1caee9326</anchor>
      <arglist>(unsigned k)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>w</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>ae1deee5bc5016ab978874dd423968c39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>w</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>a4aefe020440bec23336b24e632a0830f</anchor>
      <arglist>(unsigned k) const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Eigen::Matrix&lt; double, 2, 2 &gt;</type>
      <name>Matrix22</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>af8f721030036eaf37bda9d2116f0a08d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Eigen::Matrix&lt; double, 2, 1 &gt;</type>
      <name>Vector2</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>a3f685436fab11fa264d9444a25b4fdcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_dt</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>a0d7d6b065bfa69d029309b718d985ee2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>m_n_current</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>a2d895679ff0471b72e15524364322a40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>m_n_preview2</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>ad727890e6903bf8c6aab5873a6afb17c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::circular_buffer&lt; Matrix22, Eigen::aligned_allocator&lt; Matrix22 &gt; &gt;</type>
      <name>m_A</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>a2b01bb5cafce26b7596ef97b36584233</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::circular_buffer&lt; Vector2, Eigen::aligned_allocator&lt; Vector2 &gt; &gt;</type>
      <name>m_B</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>ac8121e1be72344e73db0512b7331a321</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Matrix22, Eigen::aligned_allocator&lt; Matrix22 &gt; &gt;</type>
      <name>m_An</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>ac9ea04485d7ee4ce45999a165c2dee06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Vector2, Eigen::aligned_allocator&lt; Vector2 &gt; &gt;</type>
      <name>m_Bn</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>a60ecd7d928ffc1ce55390aa33d076577</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Vector2, Eigen::aligned_allocator&lt; Vector2 &gt; &gt;</type>
      <name>m_X</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>a46540fb3f78da79ec55b2bc96eba147e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>m_p_ref</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>ad6982c89d9f0e353c99e579b25098bb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>m_w2</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>a8d3112ea6d7338498af37ca939d19180</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>m_w</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>a8664017837658b6e0f759cf44bfd9030</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LookupTable&lt; double &gt;</type>
      <name>wTable_</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>a1302ee5580c5e867ed2b5a9b8ee3e483</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LookupTable&lt; double &gt;</type>
      <name>chkTable_</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>a124e7cb9ae69c984acf3b79c13737ea8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LookupTable&lt; double &gt;</type>
      <name>shkTable_</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>af8453bfc9d84353dbcd078938fe8d6c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LookupTable&lt; double &gt;</type>
      <name>wTable_</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>a1302ee5580c5e867ed2b5a9b8ee3e483</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LookupTable&lt; double &gt;</type>
      <name>chkTable_</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>a124e7cb9ae69c984acf3b79c13737ea8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LookupTable&lt; double &gt;</type>
      <name>shkTable_</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>af8453bfc9d84353dbcd078938fe8d6c0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::LineConfig</name>
    <filename>a02077.html</filename>
    <member kind="function">
      <type></type>
      <name>LineConfig</name>
      <anchorfile>a02077.html</anchorfile>
      <anchor>a15dd7cd44bf0edc5b475448de6e26451</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LineConfig</name>
      <anchorfile>a02077.html</anchorfile>
      <anchor>a0ba859719a9ff99290fec7b8e8add72b</anchor>
      <arglist>(const Color &amp;color, double width=0.01, const LineStyle &amp;style=LineStyle::Solid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LineConfig</name>
      <anchorfile>a02077.html</anchorfile>
      <anchor>a05fe24ecd21753185e6da09151f35ce2</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>a02077.html</anchorfile>
      <anchor>ac77f299a585b18903c8628590b8f6a00</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02077.html</anchorfile>
      <anchor>a2845b8dfdbdaeb72cb473086c6bdf8a7</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;out) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>a02077.html</anchorfile>
      <anchor>a76ab2e9dcb6923c3877c2822dec478dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>Color</type>
      <name>color</name>
      <anchorfile>a02077.html</anchorfile>
      <anchor>a4f88bdc8e23bf720a90553abaca4d6ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>width</name>
      <anchorfile>a02077.html</anchorfile>
      <anchor>a57cd8fdd493c21993724fe26828cf47c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LineStyle</type>
      <name>style</name>
      <anchorfile>a02077.html</anchorfile>
      <anchor>a2678eadbdc5908c80e0dcc9c39941a14</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_planning::linear_control_system::LIPMControlByPoleAssign</name>
    <filename>a01593.html</filename>
    <base>mc_planning::linear_control_system::LinearControl3</base>
    <member kind="function">
      <type>void</type>
      <name>setStateVariables</name>
      <anchorfile>a01593.html</anchorfile>
      <anchor>a898c40918887eded9b7991fa40139c9e</anchor>
      <arglist>(double x_, double v_, double p_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getStateVariables</name>
      <anchorfile>a01593.html</anchorfile>
      <anchor>aa4cb81ed0249295e8251571490b9839f</anchor>
      <arglist>(double &amp;x_, double &amp;v_, double &amp;p_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getStateVariables</name>
      <anchorfile>a01593.html</anchorfile>
      <anchor>a57825d58d2cade3ecfef25c21a232a1c</anchor>
      <arglist>(double &amp;x_, double &amp;v_, double &amp;p_, double &amp;pdot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSystemMatrices</name>
      <anchorfile>a01593.html</anchorfile>
      <anchor>adb736d55c0373914a86b96967863eeb2</anchor>
      <arglist>(const double alpha, const double beta, const double gamma, const double cog_height)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_planning::linear_control_system::LIPMControlByPoleAssignWithExternalForce</name>
    <filename>a01597.html</filename>
    <base>mc_planning::linear_control_system::LIPMControlByPoleAssign</base>
    <member kind="function">
      <type></type>
      <name>LIPMControlByPoleAssignWithExternalForce</name>
      <anchorfile>a01597.html</anchorfile>
      <anchor>a3705e1b46ae8a939c97596ebf73b9814</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>a01597.html</anchorfile>
      <anchor>a9cb015b5940ed334fdcbee7d835f407e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01597.html</anchorfile>
      <anchor>ad7d3726191f79318d8eab512173c17a5</anchor>
      <arglist>(const double Fext, const double dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01597.html</anchorfile>
      <anchor>a4aa000e191c8507e96a22bcfb2ebf6bc</anchor>
      <arglist>(const Eigen::Vector3d &amp;x_ref, const double Fext, const double dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSystemMatrices</name>
      <anchorfile>a01597.html</anchorfile>
      <anchor>a080c185b30cbaf73911773e161d62728</anchor>
      <arglist>(const double alpha, const double beta, const double gamma, const double omega, const double total_mass)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_rtc::Loader</name>
    <filename>a02113.html</filename>
    <member kind="typedef">
      <type>std::map&lt; std::string, LTDLHandlePtr &gt;</type>
      <name>handle_map_t</name>
      <anchorfile>a02113.html</anchorfile>
      <anchor>a9c2401890571dbbde00eda2fb1e87710</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(const std::string &amp;, LTDLHandle &amp;)&gt;</type>
      <name>callback_t</name>
      <anchorfile>a02113.html</anchorfile>
      <anchor>ae88a2f28e5fa458257316949fd08a539</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static callback_t</type>
      <name>default_cb</name>
      <anchorfile>a02113.html</anchorfile>
      <anchor>a2569410b656743e1d955a9aafc7ee793</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static bool</type>
      <name>init</name>
      <anchorfile>a02113.html</anchorfile>
      <anchor>a2d478e04efaa0d71d340ed45577b478a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static bool</type>
      <name>close</name>
      <anchorfile>a02113.html</anchorfile>
      <anchor>a63ca4850e72fbb0ea10d1362c5402a51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>load_libraries</name>
      <anchorfile>a02113.html</anchorfile>
      <anchor>a9611f8c05257ffd4651e68ea2f4f7e68</anchor>
      <arglist>(const std::string &amp;class_name, const std::vector&lt; std::string &gt; &amp;paths, handle_map_t &amp;out, bool verbose, callback_t cb)</arglist>
      <docanchor file="a02113">loader_load_libraries_doc</docanchor>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>ObjectLoader</name>
      <anchorfile>a02113.html</anchorfile>
      <anchor>a0b9f840f1f1352debe8e77115e2454b1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_rtc::LoaderException</name>
    <filename>a02105.html</filename>
    <member kind="function">
      <type></type>
      <name>LoaderException</name>
      <anchorfile>a02105.html</anchorfile>
      <anchor>a52e22f0a82bd6634d02ca30961643c25</anchor>
      <arglist>(const std::string &amp;what)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>a02105.html</anchorfile>
      <anchor>a2db77040caace4fc6f15e231a328a608</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::LoaderSandboxData</name>
    <filename>a02121.html</filename>
    <templarg>T</templarg>
    <member kind="variable">
      <type>std::function&lt; T *(void)&gt;</type>
      <name>fn</name>
      <anchorfile>a02121.html</anchorfile>
      <anchor>adf4719d80846e018c3de0290164048ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T *</type>
      <name>ret</name>
      <anchorfile>a02121.html</anchorfile>
      <anchor>a0bd1edac4d08d70b609b18efb6942d44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>complete</name>
      <anchorfile>a02121.html</anchorfile>
      <anchor>aecb02006f5f0cd5aeabf7965973d3542</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::Logger</name>
    <filename>a02137.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Policy</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a0fefb36635930cf5a9db966442756b9b</anchor>
      <arglist></arglist>
      <enumvalue file="a02137.html" anchor="a0fefb36635930cf5a9db966442756b9ba1515271d5edd3952e5aa146109a98e78">NON_THREADED</enumvalue>
      <enumvalue file="a02137.html" anchor="a0fefb36635930cf5a9db966442756b9ba1ba1ba2bd2141794d82c4363b7e533f7">THREADED</enumvalue>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(mc_rtc::MessagePackBuilder &amp;)&gt;</type>
      <name>serialize_fn</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a6fd0d1237a81647e462f7af2b4225d5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Logger</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a18ce85d2d7612f7029b47a3931c72316</anchor>
      <arglist>(const Policy &amp;policy, const std::string &amp;directory, const std::string &amp;tmpl)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Logger</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a7692f0ca12a02805cba83a9422de5a4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a986b2719c1337aa9d1e84e2b0b34481c</anchor>
      <arglist>(const Policy &amp;policy, const std::string &amp;directory, const std::string &amp;tmpl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a7a6f0685999b14f4bf67cd30dce03413</anchor>
      <arglist>(const std::string &amp;ctl_name, double timestep, bool resume=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>log</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>aec88caf27ebb9c9615ed4fd51d9ccd98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLogEntry</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a1fe9ebf879c471ae7741170c9e0d6933</anchor>
      <arglist>(const std::string &amp;name, T get_fn, typename std::enable_if&lt; mc_rtc::log::callback_is_serializable&lt; T &gt;::value &gt;::type *=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeLogEntry</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a2b1427e1251ebbd90947468fc4bdf964</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>t</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>aeb0d9597ada6a67eb2a89fcda8c74e7d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>magic</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>ae70a958cf17138f9b726740deab0d34c</anchor>
      <arglist>[4]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::log::LogWriter</name>
    <filename>a02157.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>write</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>ac76dfb54b68fb04d65d6fcb1cb6e061d</anchor>
      <arglist>(const T &amp;data, mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::LookAtSurfaceTask</name>
    <filename>a02405.html</filename>
    <base>mc_tasks::LookAtTask</base>
    <member kind="function">
      <type></type>
      <name>LookAtSurfaceTask</name>
      <anchorfile>a02405.html</anchorfile>
      <anchor>af114f86e50d42bb8f1cdae2e5dd8a593</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, const std::string &amp;bodyName, const Eigen::Vector3d &amp;bodyVector, unsigned int surfaceRobotIndex, const std::string &amp;surfaceName, double stiffness=0.5, double weight=200)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02405.html</anchorfile>
      <anchor>a324669541d4f3abee475ec9a6a04ec0e</anchor>
      <arglist>(mc_solver::QPSolver &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>offset</name>
      <anchorfile>a02405.html</anchorfile>
      <anchor>a7210671b2e64840382d3ed5116b41481</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>offset</name>
      <anchorfile>a02405.html</anchorfile>
      <anchor>a37c95499a045a9425193a72aa57ddba4</anchor>
      <arglist>(const sva::PTransformd &amp;off)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::LookAtTask</name>
    <filename>a02409.html</filename>
    <base>mc_tasks::VectorOrientationTask</base>
    <member kind="function">
      <type></type>
      <name>LookAtTask</name>
      <anchorfile>a02409.html</anchorfile>
      <anchor>aa8ac514e5194309507f7032f47c0cbd4</anchor>
      <arglist>(const std::string &amp;bodyName, const Eigen::Vector3d &amp;bodyVector, const Eigen::Vector3d &amp;targetPos, const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, double stiffness=2.0, double weight=500)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LookAtTask</name>
      <anchorfile>a02409.html</anchorfile>
      <anchor>a6ab5055c130fd2813d825c7bcd508fb9</anchor>
      <arglist>(const std::string &amp;bodyName, const Eigen::Vector3d &amp;bodyVector, const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, double stiffness=2.0, double weight=500)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a02409.html</anchorfile>
      <anchor>abe25dfb65d85b23932ca41150a9f97a6</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>target</name>
      <anchorfile>a02409.html</anchorfile>
      <anchor>a99e4cc8d6d381936d58bc7675dea901a</anchor>
      <arglist>(const Eigen::Vector3d &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>target</name>
      <anchorfile>a02409.html</anchorfile>
      <anchor>acdb7b5c10685b0a725af082547b473c9</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_planning::LookupTable</name>
    <filename>a01601.html</filename>
    <templarg>T</templarg>
    <templarg>CheckBounds</templarg>
    <member kind="function">
      <type></type>
      <name>LookupTable</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>aaf0da92f66df6937b3f0ca99d1afc014</anchor>
      <arglist>(size_t resolution, const T &amp;min, const T &amp;max, MappingFunction f)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LookupTable</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a0dbd0da74223935e374837cf8d30d6c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>af2caa643935c89698646ba838ae97f27</anchor>
      <arglist>(size_t resolution, const T &amp;min, const T &amp;max, MappingFunction f)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator()</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>aa19f81cb48a4dae9d4fa77d7db0be7fa</anchor>
      <arglist>(const T &amp;x) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; T &gt;</type>
      <name>table_</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a550ea6b2ae6ebb7759a354bfb2aa4699</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>min_</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a190b191931f620a55ed546f53cdf6270</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>max_</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a031bc53759e204dc4cc09e5acf15ad69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>rangeConversion_</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a4d4e10442fb8cf3dbcd6c622749d8e18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>maxIndex_</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a264ae83b91dc5cab6cb03af2f0b22a4e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LookupTable&lt; double &gt;</name>
    <filename>a01601.html</filename>
    <member kind="function">
      <type></type>
      <name>LookupTable</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>aaf0da92f66df6937b3f0ca99d1afc014</anchor>
      <arglist>(size_t resolution, const double &amp;min, const double &amp;max, MappingFunction f)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LookupTable</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a0dbd0da74223935e374837cf8d30d6c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>af2caa643935c89698646ba838ae97f27</anchor>
      <arglist>(size_t resolution, const double &amp;min, const double &amp;max, MappingFunction f)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>operator()</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>aa19f81cb48a4dae9d4fa77d7db0be7fa</anchor>
      <arglist>(const double &amp;x) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>table_</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a550ea6b2ae6ebb7759a354bfb2aa4699</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>min_</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a190b191931f620a55ed546f53cdf6270</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>max_</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a031bc53759e204dc4cc09e5acf15ad69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>rangeConversion_</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a4d4e10442fb8cf3dbcd6c622749d8e18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>maxIndex_</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a264ae83b91dc5cab6cb03af2f0b22a4e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_filter::LowPass</name>
    <filename>a01525.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>LowPass</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>ae3ddcbbc84aae62aad621a14a91c39bf</anchor>
      <arglist>(double dt, double period=0)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cutoffPeriod</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>ac48741a383af10509d4678c5a0673f3a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cutoffPeriod</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>ac3c92851291e84d2347271125877dc0c</anchor>
      <arglist>(double period)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>af9ccdd55e5d7f3beabcf4c26bcea9620</anchor>
      <arglist>(const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a03ab891a2b1f5cd2fd2398b7016ba633</anchor>
      <arglist>(const T &amp;newValue)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>eval</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a543781fd1c5ec7b653de6e2189de8fdb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dt</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a41bcea9e9de194a6816f03cacbd534dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>dt_</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a54232494fa4fa74a08d85acf3f95ab7a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LowPass&lt; sva::MotionVecd &gt;</name>
    <filename>a01525.html</filename>
    <member kind="function">
      <type></type>
      <name>LowPass</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>ae3ddcbbc84aae62aad621a14a91c39bf</anchor>
      <arglist>(double dt, double period=0)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cutoffPeriod</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>ac48741a383af10509d4678c5a0673f3a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cutoffPeriod</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>ac3c92851291e84d2347271125877dc0c</anchor>
      <arglist>(double period)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>af9ccdd55e5d7f3beabcf4c26bcea9620</anchor>
      <arglist>(const sva::MotionVecd &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a03ab891a2b1f5cd2fd2398b7016ba633</anchor>
      <arglist>(const sva::MotionVecd &amp;newValue)</arglist>
    </member>
    <member kind="function">
      <type>const sva::MotionVecd &amp;</type>
      <name>eval</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a543781fd1c5ec7b653de6e2189de8fdb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dt</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a41bcea9e9de194a6816f03cacbd534dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>dt_</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a54232494fa4fa74a08d85acf3f95ab7a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_filter::LowPassFiniteDifferences</name>
    <filename>a01529.html</filename>
    <templarg></templarg>
    <base>mc_filter::LowPass</base>
    <member kind="typedef">
      <type>LowPass&lt; T &gt;</type>
      <name>LowPassT</name>
      <anchorfile>a01529.html</anchorfile>
      <anchor>aaac75c58b8f9680abe5bd377c9701253</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LowPassFiniteDifferences</name>
      <anchorfile>a01529.html</anchorfile>
      <anchor>a6b34f60855856174042323741e8ca777</anchor>
      <arglist>(double dt, double period)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a01529.html</anchorfile>
      <anchor>a2e407b95655d11d8cc0e07b127670771</anchor>
      <arglist>(const T &amp;pos, const T &amp;vel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01529.html</anchorfile>
      <anchor>a48566df5537776a9c6fa06de4181fada</anchor>
      <arglist>(const T &amp;newPos)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>prevValue</name>
      <anchorfile>a01529.html</anchorfile>
      <anchor>a8f494156496ade7966576d36e01da12d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>prevValue_</name>
      <anchorfile>a01529.html</anchorfile>
      <anchor>a04124d30b5fc9745746a89f4dcad802e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_rtc::LTDLHandle</name>
    <filename>a02109.html</filename>
    <member kind="function">
      <type></type>
      <name>LTDLHandle</name>
      <anchorfile>a02109.html</anchorfile>
      <anchor>a1d2ebbcff7e52decbb18a9dc96b7671b</anchor>
      <arglist>(const std::string &amp;class_name, const std::string &amp;path, const std::string &amp;rpath, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LTDLHandle</name>
      <anchorfile>a02109.html</anchorfile>
      <anchor>ac3f676e1ef23ac13767069ebf1018af7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LTDLHandle</name>
      <anchorfile>a02109.html</anchorfile>
      <anchor>aeb254d88dad0c357ba003eb2ef458556</anchor>
      <arglist>(const LTDLHandle &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>LTDLHandle &amp;</type>
      <name>operator=</name>
      <anchorfile>a02109.html</anchorfile>
      <anchor>ab5ad49d16629787bd61589dbf4924c4e</anchor>
      <arglist>(const LTDLHandle &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>SymT</type>
      <name>get_symbol</name>
      <anchorfile>a02109.html</anchorfile>
      <anchor>ac9e807398c51fe641aa12610ee1d35fc</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>a02109.html</anchorfile>
      <anchor>aad84c0ae1a67095338adf0205ee6cbfe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>classes</name>
      <anchorfile>a02109.html</anchorfile>
      <anchor>a5027f7059635b26c598d8547787c70da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>path</name>
      <anchorfile>a02109.html</anchorfile>
      <anchor>aab506987ae59f5623e4875126b3ad06b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_control::MCController</name>
    <filename>a01509.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MCController</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>adbb448aeae9565e56d32cf50067dc9ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>run</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>a9fcbf5dd454a9300a4d16e75549e22b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>runObservers</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>afb7a2057852e29a82fa8c2a6a2d5df0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>resetObservers</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>aac5a69bf551c7acc2230058c6929b0b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>anchorFrame</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>add975f1d97594fd8b85d9ba49ab8fad4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>anchorFrame</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>a8c2810fd99da6bafc8c82d946a9f60e5</anchor>
      <arglist>(const sva::PTransformd &amp;anchor)</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>anchorFrameReal</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>a919b06efb009d290381fff69bdd04995</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>anchorFrameReal</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>a83a923627684cc278f6f9952b285655a</anchor>
      <arglist>(const sva::PTransformd &amp;anchor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>runClosedLoop</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>a2e823bc69796964a6868ee5c30f0e382</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>a7d9a2ee7d9c553bc3ced736b7ee9a3e7</anchor>
      <arglist>(mc_solver::FeedbackType fType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>stop</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>a94ad5bc971729e691d57c711f6fac88f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const mc_solver::QPResultMsg &amp;</type>
      <name>send</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>a18dee7f61bad6646fe684c0e4ae424cb</anchor>
      <arglist>(const double &amp;t)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>a3c4ebbba1c40f48c3e9f3d35e2f7e432</anchor>
      <arglist>(const ControllerResetData &amp;reset_data)</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::Robot &amp;</type>
      <name>robot</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>a3d0a5351228f1b62ad1268339020d230</anchor>
      <arglist>() const</arglist>
      <docanchor file="a01509">mc_controller_robot_const_doc</docanchor>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::Robot &amp;</type>
      <name>env</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>a94eed9012e3dab581b9ad63a4e525343</anchor>
      <arglist>() const</arglist>
      <docanchor file="a01509">mc_controller_env_const_doc</docanchor>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::Robots &amp;</type>
      <name>robots</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>adc557ecb7d64eb2d8be551f7cf6678cd</anchor>
      <arglist>() const</arglist>
      <docanchor file="a01509">mc_controller_robots_const_doc</docanchor>
    </member>
    <member kind="function">
      <type>mc_rbdyn::Robots &amp;</type>
      <name>robots</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>aef59bf32cd83b177201962e7a7325928</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mc_rbdyn::Robot &amp;</type>
      <name>robot</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>a01afa1d8da9cc41b34f8119023102f65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mc_rbdyn::Robot &amp;</type>
      <name>env</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>a589dbcbbd52d3218012802800834926d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const mc_solver::QPSolver &amp;</type>
      <name>solver</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>aa6a9b2cd350ec94a1f1bda12c3133c28</anchor>
      <arglist>() const</arglist>
      <docanchor file="a01509">mc_controller_qpsolver_const_doc</docanchor>
    </member>
    <member kind="function">
      <type>mc_solver::QPSolver &amp;</type>
      <name>solver</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>abc7651033ec24b18d662797fc3bb48fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mc_rtc::Logger &amp;</type>
      <name>logger</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>ac9542a86bbb7baaf4d40c879b01a4073</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; mc_rtc::gui::StateBuilder &gt;</type>
      <name>gui</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>abb942edc92a7d47993ea5d1ad78e58e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mc_rtc::DataStore &amp;</type>
      <name>datastore</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>a5d814ae6c6c4d33fd9601c80ef74ccd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const mc_rtc::DataStore &amp;</type>
      <name>datastore</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>a03fa7c2dd20fecd96b0b92f1ea2977d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::Robots &amp;</type>
      <name>realRobots</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>a1443aed08b26c319294465b1caa1e221</anchor>
      <arglist>() const</arglist>
      <docanchor file="a01509">mc_controller_real_robots_const_doc</docanchor>
    </member>
    <member kind="function">
      <type>mc_rbdyn::Robots &amp;</type>
      <name>realRobots</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>a47636696fa5be9a4e8c0d10d6dae1a20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::Robot &amp;</type>
      <name>realRobot</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>ab491ba1a03ccfd4b3fe37079ed4f03b1</anchor>
      <arglist>() const</arglist>
      <docanchor file="a01509">mc_controller_real_robot_const_doc</docanchor>
    </member>
    <member kind="function">
      <type>mc_rbdyn::Robot &amp;</type>
      <name>realRobot</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>a545cbd53e4486c535a4e4ffcd2ad0d6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>supported_robots</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>ab071255e2e17b62e05aec6f67d88ce44</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>mc_rbdyn::Robot &amp;</type>
      <name>loadRobot</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>a3110512ea26812d8a58d3945e739c751</anchor>
      <arglist>(mc_rbdyn::RobotModulePtr rm, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeRobot</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>aea29ca137334fbf6d9aefdc426ad1184</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>mc_rtc::Configuration &amp;</type>
      <name>config</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>aca6f0bb79c273474a9e6ed524ff4d33c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const mc_rtc::Configuration &amp;</type>
      <name>config</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>a7d12aa9497219df451e115d53e62bcd8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Gripper &amp;</type>
      <name>gripper</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>a64c51eba81ba10f77a9281041b706fac</anchor>
      <arglist>(const std::string &amp;robot, const std::string &amp;gripper)</arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>timeStep</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>ae5f48849d9e4d7ed3a1f02a1380a7fee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mc_solver::ContactConstraint</type>
      <name>contactConstraint</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>a765929daba315c7ec7d455486f2817b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mc_solver::DynamicsConstraint</type>
      <name>dynamicsConstraint</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>a828b8724c182053e6d0aed8a28f368bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mc_solver::KinematicsConstraint</type>
      <name>kinematicsConstraint</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>af77baae76ef5af0d4ca6bec07172a3a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mc_solver::CollisionsConstraint</type>
      <name>selfCollisionConstraint</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>ad67e0621398628a6b8f4f700a7455b67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::unique_ptr&lt; mc_solver::CompoundJointConstraint &gt;</type>
      <name>compoundJointConstraint</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>af4240035b16cca7624e712eb86795951</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; mc_tasks::PostureTask &gt;</type>
      <name>postureTask</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>a3d17bb7e20af4d312617d7d5f6288889</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MCController</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>a0a5a9b4670e467fa2eabd8f2342e0846</anchor>
      <arglist>(std::shared_ptr&lt; mc_rbdyn::RobotModule &gt; robot, double dt)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MCController</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>a5908d94ed55dc5a858e156d63e8513e7</anchor>
      <arglist>(std::shared_ptr&lt; mc_rbdyn::RobotModule &gt; robot, double dt, const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MCController</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>a1ac3cbc244e98473e90b06e4c187aec0</anchor>
      <arglist>(const std::vector&lt; std::shared_ptr&lt; mc_rbdyn::RobotModule &gt;&gt; &amp;robot_modules, double dt)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MCController</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>a0788cb5ea805128e4825e14f52122b5d</anchor>
      <arglist>(const std::vector&lt; std::shared_ptr&lt; mc_rbdyn::RobotModule &gt;&gt; &amp;robot_modules, double dt, const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>realRobots</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>aee84dbf2540fda3182f7eb8ef31b89fa</anchor>
      <arglist>(std::shared_ptr&lt; mc_rbdyn::Robots &gt; realRobots)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; mc_solver::QPSolver &gt;</type>
      <name>qpsolver</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>a4523facc71906c6622227d0fa2597963</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; mc_rbdyn::Robots &gt;</type>
      <name>real_robots</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>ada71de0674724e0136ec360054d3b702</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; mc_observers::ObserverPtr &gt;</type>
      <name>observers_</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>ac131a31714e368146f4d9f1e04d7fdf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::pair&lt; mc_observers::ObserverPtr, bool &gt; &gt;</type>
      <name>pipelineObservers_</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>aa863c3c2ff400e0e0a4de1c9a1568d57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::PTransformd</type>
      <name>anchorFrame_</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>a37153bb1201c0a4f703cccc2a9c614b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::PTransformd</type>
      <name>anchorFrameReal_</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>a2f23380680eb2069f82ac2f4b58d75c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; mc_rtc::Logger &gt;</type>
      <name>logger_</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>a5de6a08cbbe04ccc032bc4ebbd2773dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; mc_rtc::gui::StateBuilder &gt;</type>
      <name>gui_</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>a5761e783caf225454e03628b2533fc13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rtc::Configuration</type>
      <name>config_</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>adbb3001e8874fedbdc2b71a0db93965c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rtc::DataStore</type>
      <name>datastore_</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>a40233bd6dab6721085d266e1dc306de2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>MCGlobalController</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>a3e2b38b036ecf0354d551a491d342a85</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_control::MCGlobalController</name>
    <filename>a01485.html</filename>
    <class kind="struct">mc_control::MCGlobalController::GlobalConfiguration</class>
    <member kind="function">
      <type></type>
      <name>MCGlobalController</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>ada6a6704926ff4a94138f54d8bd27180</anchor>
      <arglist>(const std::string &amp;conf=&quot;&quot;, std::shared_ptr&lt; mc_rbdyn::RobotModule &gt; rm=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MCGlobalController</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>af45e74287a7013436ac01f3f20aed010</anchor>
      <arglist>(const GlobalConfiguration &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MCGlobalController</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a00228c857f39700abeb100a5ae744390</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>enabled_controllers</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a9c5570ffc5e37e8f7160ec0defbc091e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>loaded_controllers</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>ade9a721cc73a024b045e4f439a6f2cad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>loaded_robots</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a4c165732f9165c80c79e9d77a918dcc7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; mc_rbdyn::RobotModule &gt;</type>
      <name>get_robot_module</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a2cb9a1a94b61fdaf3369f06b5f4aabd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>current_controller</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a5beed5b1e8d4aa37b58c03f510420283</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>ac49cb563047d30361c781b96ec2a8e5d</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;initq)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>ad09a57645d0f72046484da7bfb4592c1</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;initq, const std::array&lt; double, 7 &gt; &amp;initAttitude)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a153432b8c6ebfc4f9484deb1439ca3ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const mc_solver::QPResultMsg &amp;</type>
      <name>send</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a2d8ba93ec28be3eed4d6d8bfa58c80cf</anchor>
      <arglist>(const double &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>MCController &amp;</type>
      <name>controller</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a9874f934eb7c0408a19eb50e673b8d52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const MCController &amp;</type>
      <name>controller</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>aa118bd65716debe35ce485130da8a99f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>mc_rbdyn::Robot &amp;</type>
      <name>robot</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a42001babd4517419e96376bffccf20e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::Robot &amp;</type>
      <name>robot</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>afc42120f3cbed546bd2a52b93bf08794</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>timestep</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a81d56d40787c8ecff59283a9c85109ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>ref_joint_order</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a79771a3802850528a20d4d35f1d5f271</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GlobalConfiguration &amp;</type>
      <name>configuration</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a0fff6472a1d77b4b4866ff7cad1149a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_controller_module_paths</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>ae39ca0ba2da5ea1302ba620208a625eb</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;paths)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AddController</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a6d37998fc235be910210d1fb643402df</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AddController</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>ae523aecb2481a8721dac8bf08780fd75</anchor>
      <arglist>(const std::string &amp;name, std::shared_ptr&lt; mc_control::MCController &gt; controller)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>EnableController</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a4a46a8f41797fa4b79632ab4fc24afbd</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refreshLog</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a07310532c70c9cb3087cbbec3a2f14e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mc_rbdyn::Robots &amp;</type>
      <name>realRobots</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>afd88894202e0d03669627e4e049d6927</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mc_rbdyn::Robot &amp;</type>
      <name>realRobot</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a447bdf10bea46610b6ab74bc669d9c53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorPosition</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>abb317d4970e11c3a477f7eed5522c6e0</anchor>
      <arglist>(const Eigen::Vector3d &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorPositions</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a1c98e6515e4c33ddaf4f0ef1a1724ef5</anchor>
      <arglist>(const std::map&lt; std::string, Eigen::Vector3d &gt; &amp;poses)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorPositions</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>aad49afd7a0cf9bf3ffe1471f02ef6d31</anchor>
      <arglist>(mc_rbdyn::Robot &amp;robot, const std::map&lt; std::string, Eigen::Vector3d &gt; &amp;poses)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorOrientation</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>ad47e3a62e047053d0f69bf05b5f91b1a</anchor>
      <arglist>(const Eigen::Quaterniond &amp;ori)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorOrientations</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>ae0587cdd53765826379669b2d879db1c</anchor>
      <arglist>(const std::map&lt; std::string, Eigen::Quaterniond &gt; &amp;oris)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorOrientations</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a4ea4699a4661e92790fb486eeb64e460</anchor>
      <arglist>(mc_rbdyn::Robot &amp;robot, const std::map&lt; std::string, Eigen::Quaterniond &gt; &amp;oris)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorLinearVelocity</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a40cbc0fdf54504a920b737dd373c2a88</anchor>
      <arglist>(const Eigen::Vector3d &amp;vel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorLinearVelocities</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a3ae21b22df5dc2185d3b4f6197f9b887</anchor>
      <arglist>(const std::map&lt; std::string, Eigen::Vector3d &gt; &amp;linearVels)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorLinearVelocities</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a4cfb5f45bc1157af17254918935a462c</anchor>
      <arglist>(mc_rbdyn::Robot &amp;robot, const std::map&lt; std::string, Eigen::Vector3d &gt; &amp;linearVels)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorAngularVelocity</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a16dd35dd0e4ecc22c1fd04ee4a09f7d5</anchor>
      <arglist>(const Eigen::Vector3d &amp;vel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorAngularVelocities</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>aee1e0c31b2a18df3d803a7befe7c4f1a</anchor>
      <arglist>(const std::map&lt; std::string, Eigen::Vector3d &gt; &amp;angularVels)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorAngularVelocities</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a68e21ec603b1a212cf4e4c2fc2cf704d</anchor>
      <arglist>(mc_rbdyn::Robot &amp;robot, const std::map&lt; std::string, Eigen::Vector3d &gt; &amp;angularVels)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorAcceleration</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a05067699f8e0061d13b91d527e7de1c2</anchor>
      <arglist>(const Eigen::Vector3d &amp;acc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorAccelerations</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a50cb74592e0d3c5c08ce56099e590f46</anchor>
      <arglist>(const std::map&lt; std::string, Eigen::Vector3d &gt; &amp;accels)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorAccelerations</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a5665024d74349a98e23c0d27ae495f38</anchor>
      <arglist>(mc_rbdyn::Robot &amp;robot, const std::map&lt; std::string, Eigen::Vector3d &gt; &amp;accels)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEncoderValues</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a2703ab87cc9556a1f18cc883113da33c</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;eValues)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEncoderVelocities</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a0dca39c45c9a87e08d48b6d34c75c44a</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;eVelocities)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFlexibilityValues</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>ac2125f658eb07e8b7a24ad0ee82d352f</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;fValues)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointTorques</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a893f4ffae6fbc419efff45b53ef6ffd2</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;tValues)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWrenches</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a501402db79c4bc10aeb0b6e6afbb70d8</anchor>
      <arglist>(const std::map&lt; std::string, sva::ForceVecd &gt; &amp;wrenches)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWrenches</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>ad270845f34088f5ec8d92ac1897503d5</anchor>
      <arglist>(unsigned int robotIndex, const std::map&lt; std::string, sva::ForceVecd &gt; &amp;wrenches)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGripperTargetQ</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>af318a5f7b3b092cc3b3627b4d5c7d1c2</anchor>
      <arglist>(const std::string &amp;robot, const std::string &amp;name, const std::vector&lt; double &gt; &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGripperOpenPercent</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a5c275034fb2272a81725d93e6fd07d0c</anchor>
      <arglist>(const std::string &amp;robot, double pOpen)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGripperOpenPercent</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a5633e9a932dae96b0cfbbaec6d372f86</anchor>
      <arglist>(const std::string &amp;robot, const std::string &amp;name, double pOpen)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GoToHalfSitPose_service</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a2d40bcee8da26d53936db099e15771a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GoToHalfSitPose</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>aa704071d4f01e635a389e50f01463a23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>running</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>aab73d3fc95c0d7d61dd7b22d5ef72849</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorPosition</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>abb317d4970e11c3a477f7eed5522c6e0</anchor>
      <arglist>(const Eigen::Vector3d &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorPositions</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a1c98e6515e4c33ddaf4f0ef1a1724ef5</anchor>
      <arglist>(const std::map&lt; std::string, Eigen::Vector3d &gt; &amp;poses)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorPositions</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>aad49afd7a0cf9bf3ffe1471f02ef6d31</anchor>
      <arglist>(mc_rbdyn::Robot &amp;robot, const std::map&lt; std::string, Eigen::Vector3d &gt; &amp;poses)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorOrientation</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>ad47e3a62e047053d0f69bf05b5f91b1a</anchor>
      <arglist>(const Eigen::Quaterniond &amp;ori)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorOrientations</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>ae0587cdd53765826379669b2d879db1c</anchor>
      <arglist>(const std::map&lt; std::string, Eigen::Quaterniond &gt; &amp;oris)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorOrientations</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a4ea4699a4661e92790fb486eeb64e460</anchor>
      <arglist>(mc_rbdyn::Robot &amp;robot, const std::map&lt; std::string, Eigen::Quaterniond &gt; &amp;oris)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorLinearVelocity</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a40cbc0fdf54504a920b737dd373c2a88</anchor>
      <arglist>(const Eigen::Vector3d &amp;vel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorLinearVelocities</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a3ae21b22df5dc2185d3b4f6197f9b887</anchor>
      <arglist>(const std::map&lt; std::string, Eigen::Vector3d &gt; &amp;linearVels)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorLinearVelocities</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a4cfb5f45bc1157af17254918935a462c</anchor>
      <arglist>(mc_rbdyn::Robot &amp;robot, const std::map&lt; std::string, Eigen::Vector3d &gt; &amp;linearVels)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorAngularVelocity</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a16dd35dd0e4ecc22c1fd04ee4a09f7d5</anchor>
      <arglist>(const Eigen::Vector3d &amp;vel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorAngularVelocities</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>aee1e0c31b2a18df3d803a7befe7c4f1a</anchor>
      <arglist>(const std::map&lt; std::string, Eigen::Vector3d &gt; &amp;angularVels)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorAngularVelocities</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a68e21ec603b1a212cf4e4c2fc2cf704d</anchor>
      <arglist>(mc_rbdyn::Robot &amp;robot, const std::map&lt; std::string, Eigen::Vector3d &gt; &amp;angularVels)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorAcceleration</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a05067699f8e0061d13b91d527e7de1c2</anchor>
      <arglist>(const Eigen::Vector3d &amp;acc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorAccelerations</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a50cb74592e0d3c5c08ce56099e590f46</anchor>
      <arglist>(const std::map&lt; std::string, Eigen::Vector3d &gt; &amp;accels)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensorAccelerations</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a5665024d74349a98e23c0d27ae495f38</anchor>
      <arglist>(mc_rbdyn::Robot &amp;robot, const std::map&lt; std::string, Eigen::Vector3d &gt; &amp;accels)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEncoderValues</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a2703ab87cc9556a1f18cc883113da33c</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;eValues)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEncoderVelocities</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a0dca39c45c9a87e08d48b6d34c75c44a</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;eVelocities)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFlexibilityValues</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>ac2125f658eb07e8b7a24ad0ee82d352f</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;fValues)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointTorques</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a893f4ffae6fbc419efff45b53ef6ffd2</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;tValues)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWrenches</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a501402db79c4bc10aeb0b6e6afbb70d8</anchor>
      <arglist>(const std::map&lt; std::string, sva::ForceVecd &gt; &amp;wrenches)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWrenches</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>ad270845f34088f5ec8d92ac1897503d5</anchor>
      <arglist>(unsigned int robotIndex, const std::map&lt; std::string, sva::ForceVecd &gt; &amp;wrenches)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGripperTargetQ</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>af318a5f7b3b092cc3b3627b4d5c7d1c2</anchor>
      <arglist>(const std::string &amp;robot, const std::string &amp;name, const std::vector&lt; double &gt; &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGripperOpenPercent</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a5c275034fb2272a81725d93e6fd07d0c</anchor>
      <arglist>(const std::string &amp;robot, double pOpen)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGripperOpenPercent</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a5633e9a932dae96b0cfbbaec6d372f86</anchor>
      <arglist>(const std::string &amp;robot, const std::string &amp;name, double pOpen)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GoToHalfSitPose_service</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a2d40bcee8da26d53936db099e15771a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GoToHalfSitPose</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>aa704071d4f01e635a389e50f01463a23</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_control::MCPythonController</name>
    <filename>a01501.html</filename>
    <base>mc_control::MCController</base>
    <member kind="function">
      <type></type>
      <name>MCPythonController</name>
      <anchorfile>a01501.html</anchorfile>
      <anchor>a032e887f83331f4138a8b4125010930a</anchor>
      <arglist>(const std::vector&lt; std::shared_ptr&lt; mc_rbdyn::RobotModule &gt;&gt; &amp;robots, double dt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>a01501.html</anchorfile>
      <anchor>a9f6c69c9b96a4fadd5f94d7500d633d7</anchor>
      <arglist>(const ControllerResetData &amp;reset_data) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>run</name>
      <anchorfile>a01501.html</anchorfile>
      <anchor>a3700ef59c7492c0be19158e991ccf6e6</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="variable">
      <type>std::function&lt; bool()&gt;</type>
      <name>run_callback</name>
      <anchorfile>a01501.html</anchorfile>
      <anchor>ac76e53f48809f9cede138425a0b7aac9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::function&lt; void(const ControllerResetData &amp;)&gt;</type>
      <name>reset_callback</name>
      <anchorfile>a01501.html</anchorfile>
      <anchor>a912a0dc9659948113b9eca0605c2cd12</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::measure</name>
    <filename>a02165.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static TimeT::rep</type>
      <name>execution</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>a0c90f94bade696ada1861258e9b4e050</anchor>
      <arglist>(F &amp;&amp;func, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TimeT</type>
      <name>duration</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>a9c5330dbd192b5db76e2c42f4c6761f2</anchor>
      <arglist>(F &amp;&amp;func, Args &amp;&amp;... args)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::MessagePackBuilder</name>
    <filename>a02161.html</filename>
    <member kind="function">
      <type></type>
      <name>MessagePackBuilder</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a8a18d3d529d183d8ebc255f750bd2785</anchor>
      <arglist>(std::vector&lt; char &gt; &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MessagePackBuilder</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>aedcb04e783e5da81ad1e6cf82219ecf6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start_array</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a1251bf6d65a490f2e149f2edfb2a956f</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish_array</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a296dff689d0fe65aa0925fce937d25c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start_map</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a9e1def0478eb0254194498a59409ab34</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish_map</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a276abd82bca94ec432b2cf95a4ba1d3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_object</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a791ef2952ffb1a6f8b4db3118b8d9e35</anchor>
      <arglist>(const char *data, size_t s)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>finish</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>af622ee7709cb33c22d6d40cb34ba71d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>ab7c6cb64330027b2fec8e69d218a866d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a5a743846c35147473814f1df27223be4</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>ae3980d77ade44ab490ea9d4ca75ec164</anchor>
      <arglist>(int8_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>ab76daa4136aa82a8b07f46bc11de04ab</anchor>
      <arglist>(int16_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a42536e87c8671025ab1220d069c83b74</anchor>
      <arglist>(int32_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>af8b75017d8de6dd590cbd5257413e244</anchor>
      <arglist>(int64_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a7c94452f85aaaae78212cc764546f907</anchor>
      <arglist>(uint8_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>ac0c7a9a19f16c58f512e500d89a9ab22</anchor>
      <arglist>(uint16_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>ad77f11c5d489b292fd00d97b62ce3d4d</anchor>
      <arglist>(uint32_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a9aa97f6d95239884929625a08e0cac35</anchor>
      <arglist>(uint64_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a6d56aa3b133f26426361556823abdf80</anchor>
      <arglist>(float f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a92e09fbed9161cea08676d368e27d0fa</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a01c67ae50c59f128747e4b94ffaa5a5f</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a5250cc8a284bafa0ce519a99916281f4</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a9e723757f1b9e4baf971d8212b60666a</anchor>
      <arglist>(const char *s, size_t len)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>ac438d3ed0ab1cec9477dfe63e9bb0299</anchor>
      <arglist>(const Eigen::Vector2d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a2c8ad12c224ebf3a1b58ed54c66b6354</anchor>
      <arglist>(const Eigen::Vector3d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>af2131c707b052d666de663c56ebc4203</anchor>
      <arglist>(const Eigen::Vector6d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>afeb27a7c5296c14410a786a17694dd90</anchor>
      <arglist>(const Eigen::VectorXd &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a74da4251765d4fc62aafac0fab05519e</anchor>
      <arglist>(const Eigen::Quaterniond &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>aa9b29c6e647ca8cae9b77d2a9a9cf422</anchor>
      <arglist>(const Eigen::Matrix3d &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a5106a9ce75422dc91abac33bd4c4f8e9</anchor>
      <arglist>(const sva::PTransformd &amp;pt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a4943a63bcfbaeddca62d209dcd08e885</anchor>
      <arglist>(const sva::ForceVecd &amp;fv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a83480f7381e658b282b0132b5b495ce7</anchor>
      <arglist>(const sva::MotionVecd &amp;mv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a8ecdea776e00c52344616ef74040065a</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a4cf78dd3a81d2c0d3fb848ae892f8e12</anchor>
      <arglist>(const std::vector&lt; T, A &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a90dd5ca64d759e4cbe4b7616e5e08b81</anchor>
      <arglist>(const std::array&lt; T, N &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>af402f0657bfdd62c221c3c6f987f418f</anchor>
      <arglist>(const std::pair&lt; T1, T2 &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a766e1234e36e2068ee419b6d5aef8083</anchor>
      <arglist>(const std::map&lt; KeyT, T, C, A &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a1e1b7151bf1db5da13fae7bcadf04d4d</anchor>
      <arglist>(const std::set&lt; T, C, A &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>ab7c6cb64330027b2fec8e69d218a866d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a5a743846c35147473814f1df27223be4</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>ae3980d77ade44ab490ea9d4ca75ec164</anchor>
      <arglist>(int8_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>ab76daa4136aa82a8b07f46bc11de04ab</anchor>
      <arglist>(int16_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a42536e87c8671025ab1220d069c83b74</anchor>
      <arglist>(int32_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>af8b75017d8de6dd590cbd5257413e244</anchor>
      <arglist>(int64_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a7c94452f85aaaae78212cc764546f907</anchor>
      <arglist>(uint8_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>ac0c7a9a19f16c58f512e500d89a9ab22</anchor>
      <arglist>(uint16_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>ad77f11c5d489b292fd00d97b62ce3d4d</anchor>
      <arglist>(uint32_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a9aa97f6d95239884929625a08e0cac35</anchor>
      <arglist>(uint64_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a6d56aa3b133f26426361556823abdf80</anchor>
      <arglist>(float f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a92e09fbed9161cea08676d368e27d0fa</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a01c67ae50c59f128747e4b94ffaa5a5f</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a5250cc8a284bafa0ce519a99916281f4</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a9e723757f1b9e4baf971d8212b60666a</anchor>
      <arglist>(const char *s, size_t len)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>ac438d3ed0ab1cec9477dfe63e9bb0299</anchor>
      <arglist>(const Eigen::Vector2d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a2c8ad12c224ebf3a1b58ed54c66b6354</anchor>
      <arglist>(const Eigen::Vector3d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>af2131c707b052d666de663c56ebc4203</anchor>
      <arglist>(const Eigen::Vector6d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>afeb27a7c5296c14410a786a17694dd90</anchor>
      <arglist>(const Eigen::VectorXd &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a74da4251765d4fc62aafac0fab05519e</anchor>
      <arglist>(const Eigen::Quaterniond &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>aa9b29c6e647ca8cae9b77d2a9a9cf422</anchor>
      <arglist>(const Eigen::Matrix3d &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a5106a9ce75422dc91abac33bd4c4f8e9</anchor>
      <arglist>(const sva::PTransformd &amp;pt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a4943a63bcfbaeddca62d209dcd08e885</anchor>
      <arglist>(const sva::ForceVecd &amp;fv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a83480f7381e658b282b0132b5b495ce7</anchor>
      <arglist>(const sva::MotionVecd &amp;mv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a8ecdea776e00c52344616ef74040065a</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a4cf78dd3a81d2c0d3fb848ae892f8e12</anchor>
      <arglist>(const std::vector&lt; T, A &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a90dd5ca64d759e4cbe4b7616e5e08b81</anchor>
      <arglist>(const std::array&lt; T, N &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>af402f0657bfdd62c221c3c6f987f418f</anchor>
      <arglist>(const std::pair&lt; T1, T2 &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a766e1234e36e2068ee419b6d5aef8083</anchor>
      <arglist>(const std::map&lt; KeyT, T, C, A &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a1e1b7151bf1db5da13fae7bcadf04d4d</anchor>
      <arglist>(const std::set&lt; T, C, A &gt; &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_control::fsm::MessageState</name>
    <filename>a01433.html</filename>
    <base>mc_control::fsm::State</base>
    <member kind="function">
      <type>void</type>
      <name>configure</name>
      <anchorfile>a01433.html</anchorfile>
      <anchor>a803539f968b698dc20c1e393072a8328</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a01433.html</anchorfile>
      <anchor>a19bb59f7d7f27358310774e0cee836c7</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a01433.html</anchorfile>
      <anchor>a32d7b135708d46a0f671cb656e142b28</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>teardown</name>
      <anchorfile>a01433.html</anchorfile>
      <anchor>a13aaf77e6c79a2dc709e4951499ec36f</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>prefix_</name>
      <anchorfile>a01433.html</anchorfile>
      <anchor>a32f3abf8754efc147187ae3eb00e8ed4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>message_</name>
      <anchorfile>a01433.html</anchorfile>
      <anchor>a58da17ef00e79d1a799b39a4cb10e186</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>logType_</name>
      <anchorfile>a01433.html</anchorfile>
      <anchor>a17d7efa8afe689d0859dbc2c353a857d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>gui_</name>
      <anchorfile>a01433.html</anchorfile>
      <anchor>a19e4c8d49c2b042b5e5b75064b4a5925</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>guiCategory_</name>
      <anchorfile>a01433.html</anchorfile>
      <anchor>ae8548ec14b74cdb3585fe4605bdca0b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>labelName_</name>
      <anchorfile>a01433.html</anchorfile>
      <anchor>a19f38c0a2486d70b98b287fd201581cf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_control::fsm::MetaState</name>
    <filename>a01437.html</filename>
    <base>mc_control::fsm::State</base>
    <member kind="function">
      <type>void</type>
      <name>configure</name>
      <anchorfile>a01437.html</anchorfile>
      <anchor>a9568343c27495f95dcf538d8fc71539e</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a01437.html</anchorfile>
      <anchor>aa9271d4d0cc82bf5dee97093242f2a30</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a01437.html</anchorfile>
      <anchor>a9b808dc76539033d70da8117b889a71e</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>a01437.html</anchorfile>
      <anchor>a7f3dee5b3328e795f56374e1f6a710d1</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>teardown</name>
      <anchorfile>a01437.html</anchorfile>
      <anchor>a53ae3a72e0ae0eb99d74025e11a55686</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read_msg</name>
      <anchorfile>a01437.html</anchorfile>
      <anchor>a92a3be690dc783cb7f77f7fd39ec1cdf</anchor>
      <arglist>(std::string &amp;msg) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rtc::Configuration</type>
      <name>config_</name>
      <anchorfile>a01437.html</anchorfile>
      <anchor>a807d3ec145ef893dd722fedf1f53c1af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Executor</type>
      <name>executor_</name>
      <anchorfile>a01437.html</anchorfile>
      <anchor>a9666773e74f14ce95d27e0215d1146f8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::MetaTask</name>
    <filename>a02413.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MetaTask</name>
      <anchorfile>a02413.html</anchorfile>
      <anchor>aea3e513dfe137830b38272336451b8cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>type</name>
      <anchorfile>a02413.html</anchorfile>
      <anchor>ac090b29eae1954585e32572d40731ca1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>name</name>
      <anchorfile>a02413.html</anchorfile>
      <anchor>aa98468771424ad14d60915a6b52e927b</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>name</name>
      <anchorfile>a02413.html</anchorfile>
      <anchor>a94831a7f067fdd5b05e03e83bfc4166b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>a02413.html</anchorfile>
      <anchor>a7821083f6def1d54f22ea7c0e223e21a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>dimWeight</name>
      <anchorfile>a02413.html</anchorfile>
      <anchor>a98221b876dab3cc67fbd60036213eb46</anchor>
      <arglist>(const Eigen::VectorXd &amp;dimW)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Eigen::VectorXd</type>
      <name>dimWeight</name>
      <anchorfile>a02413.html</anchorfile>
      <anchor>ae6437fb02541a7c63e177ee13170b5a4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>selectActiveJoints</name>
      <anchorfile>a02413.html</anchorfile>
      <anchor>a2fd93334634a24c2955f83cbf71926c1</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const std::vector&lt; std::string &gt; &amp;activeJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;activeDofs={})=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>selectUnactiveJoints</name>
      <anchorfile>a02413.html</anchorfile>
      <anchor>aa4d582c6cd1934d8a4ac2fed6fb296da</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const std::vector&lt; std::string &gt; &amp;unactiveJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;unactiveDofs={})=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>resetJointsSelector</name>
      <anchorfile>a02413.html</anchorfile>
      <anchor>a745e75d72133feaf9b7aef649485168f</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Eigen::VectorXd</type>
      <name>eval</name>
      <anchorfile>a02413.html</anchorfile>
      <anchor>ad6451130cee8c71e4045d48f7b8b7a18</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Eigen::VectorXd</type>
      <name>speed</name>
      <anchorfile>a02413.html</anchorfile>
      <anchor>a2f04c2bc3c4806a13bd383826127f7e1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>load</name>
      <anchorfile>a02413.html</anchorfile>
      <anchor>a27dbee0df32ae7f803184cb6222fc427</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>addToSolver</name>
      <anchorfile>a02413.html</anchorfile>
      <anchor>a87fbfd10dd81b8ce64a7a9f82d80d078</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>removeFromSolver</name>
      <anchorfile>a02413.html</anchorfile>
      <anchor>afa7c055d8cef8f4a8bb1e76689445130</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a02413.html</anchorfile>
      <anchor>a21e9870f7434084d52299f18f8f86da7</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>addToLogger</name>
      <anchorfile>a02413.html</anchorfile>
      <anchor>a19bd5d3b7b1b36dae48b516457de16a8</anchor>
      <arglist>(mc_rtc::Logger &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>removeFromLogger</name>
      <anchorfile>a02413.html</anchorfile>
      <anchor>a1db4ea4e03d00823e7ee10b444a697b1</anchor>
      <arglist>(mc_rtc::Logger &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>addToGUI</name>
      <anchorfile>a02413.html</anchorfile>
      <anchor>a6be5d66b0aba0cac4f65093d5d3b7c7f</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>removeFromGUI</name>
      <anchorfile>a02413.html</anchorfile>
      <anchor>a44d85f3f65abc8a5f8965efec40ebe7d</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::function&lt; bool(const mc_tasks::MetaTask &amp;task, std::string &amp;)&gt;</type>
      <name>buildCompletionCriteria</name>
      <anchorfile>a02413.html</anchorfile>
      <anchor>a753237535cc3e200e44ae0fa276f733e</anchor>
      <arglist>(double dt, const mc_rtc::Configuration &amp;config) const</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>addToSolver</name>
      <anchorfile>a02413.html</anchorfile>
      <anchor>a6f753630a5e0aca76308b4d652e62277</anchor>
      <arglist>(MetaTask &amp;t, mc_solver::QPSolver &amp;solver)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>removeFromSolver</name>
      <anchorfile>a02413.html</anchorfile>
      <anchor>af374c0658624a4cb7a6a9f900ab9f69a</anchor>
      <arglist>(MetaTask &amp;t, mc_solver::QPSolver &amp;solver)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>update</name>
      <anchorfile>a02413.html</anchorfile>
      <anchor>a570ef153c01abad5d5642b7a16f44d79</anchor>
      <arglist>(MetaTask &amp;t, mc_solver::QPSolver &amp;solver)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>addToLogger</name>
      <anchorfile>a02413.html</anchorfile>
      <anchor>ac29af31e9eb526d06b6d4ec1d2f3d5bb</anchor>
      <arglist>(MetaTask &amp;t, mc_rtc::Logger &amp;logger)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>removeFromLogger</name>
      <anchorfile>a02413.html</anchorfile>
      <anchor>a256b3b8d5c00bc81ef7726f536f79bfb</anchor>
      <arglist>(MetaTask &amp;t, mc_rtc::Logger &amp;logger)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>addToGUI</name>
      <anchorfile>a02413.html</anchorfile>
      <anchor>a73ce0e373c9cf7f5b8db6745c46c3ef4</anchor>
      <arglist>(MetaTask &amp;t, mc_rtc::gui::StateBuilder &amp;gui)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>removeFromGUI</name>
      <anchorfile>a02413.html</anchorfile>
      <anchor>a780d496b8148d863b2aa0462abcba525</anchor>
      <arglist>(MetaTask &amp;t, mc_rtc::gui::StateBuilder &amp;gui)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>ensureHasJoints</name>
      <anchorfile>a02413.html</anchorfile>
      <anchor>a5d90bfa419602be569c6098e822cdb0d</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;robot, const std::vector&lt; std::string &gt; &amp;joints, const std::string &amp;prefix)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>type_</name>
      <anchorfile>a02413.html</anchorfile>
      <anchor>addf8dbe10befa2b37c8e7ea386561775</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>name_</name>
      <anchorfile>a02413.html</anchorfile>
      <anchor>a6e55f0bff9a3d49ba0b92e0a4dff9a6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>mc_solver::QPSolver</name>
      <anchorfile>a02413.html</anchorfile>
      <anchor>a1f3a8dff16b572ac14d1ab4cf32a9e36</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>mc_control::CompletionCriteria</name>
      <anchorfile>a02413.html</anchorfile>
      <anchor>a93d28090bec75d3e17832041ced6e3f9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::MetaTaskLoader</name>
    <filename>a02417.html</filename>
    <base>GenericLoader&lt; MetaTaskLoader, MetaTask &gt;</base>
    <member kind="function" static="yes">
      <type>static storage_t &amp;</type>
      <name>storage</name>
      <anchorfile>a02417.html</anchorfile>
      <anchor>af1c528df92fba63c0ff4f56be2007bdd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_control::fsm::MetaTasksState</name>
    <filename>a01441.html</filename>
    <base>mc_control::fsm::State</base>
    <class kind="struct">mc_control::fsm::MetaTasksState::TaskCriteria</class>
    <member kind="function">
      <type>void</type>
      <name>configure</name>
      <anchorfile>a01441.html</anchorfile>
      <anchor>a7ea26c3c3626ad237567cd0bb4d8c077</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a01441.html</anchorfile>
      <anchor>ab76034ae6d2f04688543a13a49c15493</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a01441.html</anchorfile>
      <anchor>aa58d3f76e1bdcee77b08b1786765e5aa</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>teardown</name>
      <anchorfile>a01441.html</anchorfile>
      <anchor>a60321fa59012d49604c9e38d760aa7db</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, mc_rtc::Configuration &gt;</type>
      <name>tasks_configs_</name>
      <anchorfile>a01441.html</anchorfile>
      <anchor>ad8a28534801a9c1967233cfaf07d9482</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>outputCrit_</name>
      <anchorfile>a01441.html</anchorfile>
      <anchor>a15385e3dba9c3a9ceacf9aa32ee4d0b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; mc_tasks::MetaTaskPtr &gt;</type>
      <name>tasks_</name>
      <anchorfile>a01441.html</anchorfile>
      <anchor>a7549c1830cef253c172306bb11ea4c4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, TaskCriteria &gt;</type>
      <name>criterias_</name>
      <anchorfile>a01441.html</anchorfile>
      <anchor>abf365e7d07d5e71915cfa982fc0eb3cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>finished_first_</name>
      <anchorfile>a01441.html</anchorfile>
      <anchor>aef0fdf94ede34d66242bd301c560ea74</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::Mimic</name>
    <filename>a01709.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>a01709.html</anchorfile>
      <anchor>a461c2efe0da4d17cc75ce43837a0503f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>joint</name>
      <anchorfile>a01709.html</anchorfile>
      <anchor>a4d23695d0cbacd0471313e1323d9e4b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>multiplier</name>
      <anchorfile>a01709.html</anchorfile>
      <anchor>acae914e7c2302757339b3f4624394c11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>offset</name>
      <anchorfile>a01709.html</anchorfile>
      <anchor>a07938e029fb7d951388c0b1ad64642b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::MomentumTask</name>
    <filename>a02421.html</filename>
    <base>TrajectoryTaskGeneric&lt; tasks::qp::MomentumTask &gt;</base>
    <member kind="typedef">
      <type>TrajectoryTaskGeneric&lt; tasks::qp::MomentumTask &gt;</type>
      <name>TrajectoryBase</name>
      <anchorfile>a02421.html</anchorfile>
      <anchor>ab8b59fbe836201537d6a5d4616a845f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MomentumTask</name>
      <anchorfile>a02421.html</anchorfile>
      <anchor>ad208d3c2d0ec9d8a1db4a3b16bb6b0b9</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, double stiffness=2.0, double weight=500)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>a02421.html</anchorfile>
      <anchor>acafe35db18c7d7d1956aeea5b23927ef</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>sva::ForceVecd</type>
      <name>momentum</name>
      <anchorfile>a02421.html</anchorfile>
      <anchor>a6ba0b4c9ecf9da4571b8c052b325c5d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>momentum</name>
      <anchorfile>a02421.html</anchorfile>
      <anchor>a288104247dc5c93a7915300458da2f06</anchor>
      <arglist>(const sva::ForceVecd &amp;mom)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToLogger</name>
      <anchorfile>a02421.html</anchorfile>
      <anchor>ac09760de5c209d12568dac6817e79395</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromLogger</name>
      <anchorfile>a02421.html</anchorfile>
      <anchor>a4e64f81c801d988a04027e39769daca2</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>a02421.html</anchorfile>
      <anchor>a722bd3ba35066d38f9d301126f46e8fc</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const mc_rtc::Configuration &amp;config) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>a02421.html</anchorfile>
      <anchor>ac4048a9a19001b1f81ee6a39bf75677d</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;gui) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::NumberInputImpl</name>
    <filename>a01973.html</filename>
    <templarg>GetT</templarg>
    <templarg>SetT</templarg>
    <base>mc_rtc::gui::CommonInputImpl</base>
    <member kind="function">
      <type></type>
      <name>NumberInputImpl</name>
      <anchorfile>a01973.html</anchorfile>
      <anchor>adc6a76d29546ffa6d09e6e244cde1310</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, SetT set_fn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NumberInputImpl</name>
      <anchorfile>a01973.html</anchorfile>
      <anchor>a33da2f6fd4d4ffeb4ed07e93094b002f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>a01973.html</anchorfile>
      <anchor>ae1b80d0abc5e1d9e04ff01069779aaf4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::NumberSliderImpl</name>
    <filename>a01977.html</filename>
    <templarg>GetT</templarg>
    <templarg>SetT</templarg>
    <base>mc_rtc::gui::CommonInputImpl</base>
    <member kind="function">
      <type></type>
      <name>NumberSliderImpl</name>
      <anchorfile>a01977.html</anchorfile>
      <anchor>ad32d76eae5aae6d20a58743e4744947d</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, SetT set_fn, double min, double max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NumberSliderImpl</name>
      <anchorfile>a01977.html</anchorfile>
      <anchor>a63a81dc88237bae8b029eaf615b0acdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a01977.html</anchorfile>
      <anchor>a8e216317bf0a49f9f776b0a81d708c71</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;writer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>a01977.html</anchorfile>
      <anchor>a3a7ce274a193ddbde40a23f4391e38eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>a01977.html</anchorfile>
      <anchor>ad6ef847b456858e8283667379b82dda0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::ObjectLoader::ObjectDeleter</name>
    <filename>a02117.html</filename>
    <member kind="function">
      <type></type>
      <name>ObjectDeleter</name>
      <anchorfile>a02117.html</anchorfile>
      <anchor>ad9d8c7bebf11fd046f3264f25d73f56d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObjectDeleter</name>
      <anchorfile>a02117.html</anchorfile>
      <anchor>a3527e6200ab7ef9bf24606c987072039</anchor>
      <arglist>(void(*fn)(T *))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a02117.html</anchorfile>
      <anchor>a7cd3bbddec0b057af90444eb5794ad80</anchor>
      <arglist>(T *ptr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_rtc::ObjectLoader</name>
    <filename>a02101.html</filename>
    <templarg>T</templarg>
    <class kind="struct">mc_rtc::ObjectLoader::ObjectDeleter</class>
    <member kind="typedef">
      <type>std::unique_ptr&lt; T, ObjectDeleter &gt;</type>
      <name>unique_ptr</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>a78852c55af0f996b628466db4f6ae828</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObjectLoader</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>af60c459a8ffc58fb8329669bd3967bcb</anchor>
      <arglist>(const std::string &amp;class_name, const std::vector&lt; std::string &gt; &amp;paths, bool enable_sandbox, bool verbose, Loader::callback_t cb=Loader::default_cb)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ObjectLoader</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>a8dd305a8add6473f847951f6fcc6bf0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_object</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>aa0739f917476b8d1af3c3de7b32c1d1b</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>objects</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>acab918dfa002205a257be3c638f94ff2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load_libraries</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>a42d500b49baacc44c189bb53264a5185</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;paths, Loader::callback_t cb=Loader::default_cb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>a33bbdbec8644e9b0e09077f076c88b0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable_sandboxing</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>ae6747e5d8a42e424da0e89f2f2ed8363</anchor>
      <arglist>(bool enable_sandbox)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_verbosity</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>aae9bc7b4461a90a191a7c1bd8f82fc7e</anchor>
      <arglist>(bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; T &gt;</type>
      <name>create_object</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>ab0fb7a187ae96e784f32978127824fd8</anchor>
      <arglist>(const std::string &amp;name, Args... args)</arglist>
    </member>
    <member kind="function">
      <type>unique_ptr</type>
      <name>create_unique_object</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>af0215e4d220b8e17862a1f1e0dcc42ad</anchor>
      <arglist>(const std::string &amp;name, Args... args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>T *</type>
      <name>create</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>a0dce6e455c174537d988c115dc31ce80</anchor>
      <arglist>(const std::string &amp;name, Args... args)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>class_name</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>aab1c409baa5b97ec1e5b58242c572fbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>enable_sandbox</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>a2ed489dea742157c337ac078e99f6dc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>verbose</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>ac2b5e003d3ccd4958a32a83f1981754c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Loader::handle_map_t</type>
      <name>handles_</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>a5c219f5a809cfc139409874145d76a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, ObjectDeleter &gt;</type>
      <name>deleters_</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>a716eefa0204ce8e39886323aaad00a02</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ObjectLoader&lt; mc_control::GlobalPlugin &gt;</name>
    <filename>a02101.html</filename>
    <member kind="typedef">
      <type>std::unique_ptr&lt; mc_control::GlobalPlugin, ObjectDeleter &gt;</type>
      <name>unique_ptr</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>a78852c55af0f996b628466db4f6ae828</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObjectLoader</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>af60c459a8ffc58fb8329669bd3967bcb</anchor>
      <arglist>(const std::string &amp;class_name, const std::vector&lt; std::string &gt; &amp;paths, bool enable_sandbox, bool verbose, Loader::callback_t cb=Loader::default_cb)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ObjectLoader</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>a8dd305a8add6473f847951f6fcc6bf0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_object</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>aa0739f917476b8d1af3c3de7b32c1d1b</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>objects</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>acab918dfa002205a257be3c638f94ff2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load_libraries</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>a42d500b49baacc44c189bb53264a5185</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;paths, Loader::callback_t cb=Loader::default_cb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>a33bbdbec8644e9b0e09077f076c88b0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable_sandboxing</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>ae6747e5d8a42e424da0e89f2f2ed8363</anchor>
      <arglist>(bool enable_sandbox)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_verbosity</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>aae9bc7b4461a90a191a7c1bd8f82fc7e</anchor>
      <arglist>(bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; mc_control::GlobalPlugin &gt;</type>
      <name>create_object</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>ab0fb7a187ae96e784f32978127824fd8</anchor>
      <arglist>(const std::string &amp;name, Args... args)</arglist>
    </member>
    <member kind="function">
      <type>unique_ptr</type>
      <name>create_unique_object</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>af0215e4d220b8e17862a1f1e0dcc42ad</anchor>
      <arglist>(const std::string &amp;name, Args... args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>mc_control::GlobalPlugin *</type>
      <name>create</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>a0dce6e455c174537d988c115dc31ce80</anchor>
      <arglist>(const std::string &amp;name, Args... args)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>class_name</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>aab1c409baa5b97ec1e5b58242c572fbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>enable_sandbox</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>a2ed489dea742157c337ac078e99f6dc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>verbose</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>ac2b5e003d3ccd4958a32a83f1981754c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Loader::handle_map_t</type>
      <name>handles_</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>a5c219f5a809cfc139409874145d76a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, ObjectDeleter &gt;</type>
      <name>deleters_</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>a716eefa0204ce8e39886323aaad00a02</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ObjectLoader&lt; mc_control::MCController &gt;</name>
    <filename>a02101.html</filename>
    <member kind="typedef">
      <type>std::unique_ptr&lt; mc_control::MCController, ObjectDeleter &gt;</type>
      <name>unique_ptr</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>a78852c55af0f996b628466db4f6ae828</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObjectLoader</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>af60c459a8ffc58fb8329669bd3967bcb</anchor>
      <arglist>(const std::string &amp;class_name, const std::vector&lt; std::string &gt; &amp;paths, bool enable_sandbox, bool verbose, Loader::callback_t cb=Loader::default_cb)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ObjectLoader</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>a8dd305a8add6473f847951f6fcc6bf0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_object</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>aa0739f917476b8d1af3c3de7b32c1d1b</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>objects</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>acab918dfa002205a257be3c638f94ff2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load_libraries</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>a42d500b49baacc44c189bb53264a5185</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;paths, Loader::callback_t cb=Loader::default_cb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>a33bbdbec8644e9b0e09077f076c88b0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable_sandboxing</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>ae6747e5d8a42e424da0e89f2f2ed8363</anchor>
      <arglist>(bool enable_sandbox)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_verbosity</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>aae9bc7b4461a90a191a7c1bd8f82fc7e</anchor>
      <arglist>(bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; mc_control::MCController &gt;</type>
      <name>create_object</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>ab0fb7a187ae96e784f32978127824fd8</anchor>
      <arglist>(const std::string &amp;name, Args... args)</arglist>
    </member>
    <member kind="function">
      <type>unique_ptr</type>
      <name>create_unique_object</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>af0215e4d220b8e17862a1f1e0dcc42ad</anchor>
      <arglist>(const std::string &amp;name, Args... args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>mc_control::MCController *</type>
      <name>create</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>a0dce6e455c174537d988c115dc31ce80</anchor>
      <arglist>(const std::string &amp;name, Args... args)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>class_name</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>aab1c409baa5b97ec1e5b58242c572fbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>enable_sandbox</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>a2ed489dea742157c337ac078e99f6dc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>verbose</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>ac2b5e003d3ccd4958a32a83f1981754c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Loader::handle_map_t</type>
      <name>handles_</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>a5c219f5a809cfc139409874145d76a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, ObjectDeleter &gt;</type>
      <name>deleters_</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>a716eefa0204ce8e39886323aaad00a02</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ObjectLoader&lt; mc_observers::Observer &gt;</name>
    <filename>a02101.html</filename>
    <member kind="typedef">
      <type>std::unique_ptr&lt; mc_observers::Observer, ObjectDeleter &gt;</type>
      <name>unique_ptr</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>a78852c55af0f996b628466db4f6ae828</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObjectLoader</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>af60c459a8ffc58fb8329669bd3967bcb</anchor>
      <arglist>(const std::string &amp;class_name, const std::vector&lt; std::string &gt; &amp;paths, bool enable_sandbox, bool verbose, Loader::callback_t cb=Loader::default_cb)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ObjectLoader</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>a8dd305a8add6473f847951f6fcc6bf0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_object</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>aa0739f917476b8d1af3c3de7b32c1d1b</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>objects</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>acab918dfa002205a257be3c638f94ff2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load_libraries</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>a42d500b49baacc44c189bb53264a5185</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;paths, Loader::callback_t cb=Loader::default_cb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>a33bbdbec8644e9b0e09077f076c88b0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable_sandboxing</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>ae6747e5d8a42e424da0e89f2f2ed8363</anchor>
      <arglist>(bool enable_sandbox)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_verbosity</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>aae9bc7b4461a90a191a7c1bd8f82fc7e</anchor>
      <arglist>(bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; mc_observers::Observer &gt;</type>
      <name>create_object</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>ab0fb7a187ae96e784f32978127824fd8</anchor>
      <arglist>(const std::string &amp;name, Args... args)</arglist>
    </member>
    <member kind="function">
      <type>unique_ptr</type>
      <name>create_unique_object</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>af0215e4d220b8e17862a1f1e0dcc42ad</anchor>
      <arglist>(const std::string &amp;name, Args... args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>mc_observers::Observer *</type>
      <name>create</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>a0dce6e455c174537d988c115dc31ce80</anchor>
      <arglist>(const std::string &amp;name, Args... args)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>class_name</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>aab1c409baa5b97ec1e5b58242c572fbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>enable_sandbox</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>a2ed489dea742157c337ac078e99f6dc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>verbose</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>ac2b5e003d3ccd4958a32a83f1981754c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Loader::handle_map_t</type>
      <name>handles_</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>a5c219f5a809cfc139409874145d76a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, ObjectDeleter &gt;</type>
      <name>deleters_</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>a716eefa0204ce8e39886323aaad00a02</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ObjectLoader&lt; mc_rbdyn::RobotModule &gt;</name>
    <filename>a02101.html</filename>
    <member kind="typedef">
      <type>std::unique_ptr&lt; mc_rbdyn::RobotModule, ObjectDeleter &gt;</type>
      <name>unique_ptr</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>a78852c55af0f996b628466db4f6ae828</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObjectLoader</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>af60c459a8ffc58fb8329669bd3967bcb</anchor>
      <arglist>(const std::string &amp;class_name, const std::vector&lt; std::string &gt; &amp;paths, bool enable_sandbox, bool verbose, Loader::callback_t cb=Loader::default_cb)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ObjectLoader</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>a8dd305a8add6473f847951f6fcc6bf0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_object</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>aa0739f917476b8d1af3c3de7b32c1d1b</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>objects</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>acab918dfa002205a257be3c638f94ff2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load_libraries</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>a42d500b49baacc44c189bb53264a5185</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;paths, Loader::callback_t cb=Loader::default_cb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>a33bbdbec8644e9b0e09077f076c88b0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable_sandboxing</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>ae6747e5d8a42e424da0e89f2f2ed8363</anchor>
      <arglist>(bool enable_sandbox)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_verbosity</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>aae9bc7b4461a90a191a7c1bd8f82fc7e</anchor>
      <arglist>(bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; mc_rbdyn::RobotModule &gt;</type>
      <name>create_object</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>ab0fb7a187ae96e784f32978127824fd8</anchor>
      <arglist>(const std::string &amp;name, Args... args)</arglist>
    </member>
    <member kind="function">
      <type>unique_ptr</type>
      <name>create_unique_object</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>af0215e4d220b8e17862a1f1e0dcc42ad</anchor>
      <arglist>(const std::string &amp;name, Args... args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>mc_rbdyn::RobotModule *</type>
      <name>create</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>a0dce6e455c174537d988c115dc31ce80</anchor>
      <arglist>(const std::string &amp;name, Args... args)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>class_name</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>aab1c409baa5b97ec1e5b58242c572fbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>enable_sandbox</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>a2ed489dea742157c337ac078e99f6dc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>verbose</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>ac2b5e003d3ccd4958a32a83f1981754c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Loader::handle_map_t</type>
      <name>handles_</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>a5c219f5a809cfc139409874145d76a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, ObjectDeleter &gt;</type>
      <name>deleters_</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>a716eefa0204ce8e39886323aaad00a02</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ObjectLoader&lt; State &gt;</name>
    <filename>a02101.html</filename>
    <member kind="typedef">
      <type>std::unique_ptr&lt; State, ObjectDeleter &gt;</type>
      <name>unique_ptr</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>a78852c55af0f996b628466db4f6ae828</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObjectLoader</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>af60c459a8ffc58fb8329669bd3967bcb</anchor>
      <arglist>(const std::string &amp;class_name, const std::vector&lt; std::string &gt; &amp;paths, bool enable_sandbox, bool verbose, Loader::callback_t cb=Loader::default_cb)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ObjectLoader</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>a8dd305a8add6473f847951f6fcc6bf0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_object</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>aa0739f917476b8d1af3c3de7b32c1d1b</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>objects</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>acab918dfa002205a257be3c638f94ff2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load_libraries</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>a42d500b49baacc44c189bb53264a5185</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;paths, Loader::callback_t cb=Loader::default_cb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>a33bbdbec8644e9b0e09077f076c88b0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable_sandboxing</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>ae6747e5d8a42e424da0e89f2f2ed8363</anchor>
      <arglist>(bool enable_sandbox)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_verbosity</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>aae9bc7b4461a90a191a7c1bd8f82fc7e</anchor>
      <arglist>(bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; State &gt;</type>
      <name>create_object</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>ab0fb7a187ae96e784f32978127824fd8</anchor>
      <arglist>(const std::string &amp;name, Args... args)</arglist>
    </member>
    <member kind="function">
      <type>unique_ptr</type>
      <name>create_unique_object</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>af0215e4d220b8e17862a1f1e0dcc42ad</anchor>
      <arglist>(const std::string &amp;name, Args... args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>State *</type>
      <name>create</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>a0dce6e455c174537d988c115dc31ce80</anchor>
      <arglist>(const std::string &amp;name, Args... args)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>class_name</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>aab1c409baa5b97ec1e5b58242c572fbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>enable_sandbox</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>a2ed489dea742157c337ac078e99f6dc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>verbose</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>ac2b5e003d3ccd4958a32a83f1981754c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Loader::handle_map_t</type>
      <name>handles_</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>a5c219f5a809cfc139409874145d76a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, ObjectDeleter &gt;</type>
      <name>deleters_</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>a716eefa0204ce8e39886323aaad00a02</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_observers::Observer</name>
    <filename>a01553.html</filename>
    <member kind="function">
      <type></type>
      <name>Observer</name>
      <anchorfile>a01553.html</anchorfile>
      <anchor>a0f9f2d8b07a93f2fe3b55e48406835d3</anchor>
      <arglist>(const std::string &amp;name, double dt, const mc_rtc::Configuration &amp;config={})</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Observer</name>
      <anchorfile>a01553.html</anchorfile>
      <anchor>afe80cec7744a72c627f17990a74e890b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>name</name>
      <anchorfile>a01553.html</anchorfile>
      <anchor>a5faf70047c2be78645564f90a8053bff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dt</name>
      <anchorfile>a01553.html</anchorfile>
      <anchor>a862e1f350e7b57da34f15824d21d1d37</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>a01553.html</anchorfile>
      <anchor>aa59bc21df7afff4f66cecc9315898c6b</anchor>
      <arglist>(const mc_control::MCController &amp;ctl)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>run</name>
      <anchorfile>a01553.html</anchorfile>
      <anchor>a4805153c7a65f4f5ff444fdfd6528d73</anchor>
      <arglist>(const mc_control::MCController &amp;ctl)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>updateRobots</name>
      <anchorfile>a01553.html</anchorfile>
      <anchor>a7c2325f9b7cc610db1f7f459198217ee</anchor>
      <arglist>(const mc_control::MCController &amp;ctl, mc_rbdyn::Robots &amp;realRobots)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addToLogger</name>
      <anchorfile>a01553.html</anchorfile>
      <anchor>aa1a2253dad0a8adcb7eb376dc0861af0</anchor>
      <arglist>(const mc_control::MCController &amp;, mc_rtc::Logger &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeFromLogger</name>
      <anchorfile>a01553.html</anchorfile>
      <anchor>ac81467221a6c73328b0ee45fa7327eb3</anchor>
      <arglist>(mc_rtc::Logger &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addToGUI</name>
      <anchorfile>a01553.html</anchorfile>
      <anchor>a0957402752e8564b876c86f305ebbe2f</anchor>
      <arglist>(const mc_control::MCController &amp;, mc_rtc::gui::StateBuilder &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeFromGUI</name>
      <anchorfile>a01553.html</anchorfile>
      <anchor>a261f51b20ca1d1a57500ae40b6e4093b</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>desc</name>
      <anchorfile>a01553.html</anchorfile>
      <anchor>ae17bf0ca1911dea768788e63bf0d45b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>name_</name>
      <anchorfile>a01553.html</anchorfile>
      <anchor>a2e3f65fb8549873b71b1eeda29c1b363</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>dt_</name>
      <anchorfile>a01553.html</anchorfile>
      <anchor>adde90bcccecab614f391f6d515d435fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>desc_</name>
      <anchorfile>a01553.html</anchorfile>
      <anchor>a09b5945fa09bf14489d9796d43df60b9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_observers::ObserverLoader</name>
    <filename>a01557.html</filename>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; mc_observers::Observer &gt;</type>
      <name>get_observer</name>
      <anchorfile>a01557.html</anchorfile>
      <anchor>a3d1ff69617f71a1eb0aea7aedc13caa9</anchor>
      <arglist>(const std::string &amp;name, const Args &amp;... args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>update_module_path</name>
      <anchorfile>a01557.html</anchorfile>
      <anchor>a56fc6c53c0487328ed16473706e82df6</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;paths)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>clear</name>
      <anchorfile>a01557.html</anchorfile>
      <anchor>a8649f98bfdfa69a7b1c76bea9897c933</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_observer</name>
      <anchorfile>a01557.html</anchorfile>
      <anchor>aac203ca60191fa7e4041339a52baf625</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>enable_sandboxing</name>
      <anchorfile>a01557.html</anchorfile>
      <anchor>a8182bc3bc5952e68b6dd9d7ea8435478</anchor>
      <arglist>(bool enable_sandbox)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set_verbosity</name>
      <anchorfile>a01557.html</anchorfile>
      <anchor>afc7d5d833c4d4ce520be8fa81a0b1b63</anchor>
      <arglist>(bool verbose)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::vector&lt; std::string &gt;</type>
      <name>available_observers</name>
      <anchorfile>a01557.html</anchorfile>
      <anchor>ac104339befa76e8673940c1a86ad2847</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::plot::impl::Ordinate</name>
    <filename>a01993.html</filename>
    <templarg>GetT</templarg>
    <member kind="function">
      <type></type>
      <name>Ordinate</name>
      <anchorfile>a01993.html</anchorfile>
      <anchor>afe2f931b5577ee78af7623eee61496e3</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, Color color, Style style, Side side)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a01993.html</anchorfile>
      <anchor>afd2006099d5d013adab3798f84e088c7</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder) const</arglist>
    </member>
    <member kind="function">
      <type>Ordinate &amp;</type>
      <name>style</name>
      <anchorfile>a01993.html</anchorfile>
      <anchor>a9f8bf84f326b02b180223b983089e84e</anchor>
      <arglist>(Style style)</arglist>
    </member>
    <member kind="function">
      <type>Ordinate &amp;</type>
      <name>side</name>
      <anchorfile>a01993.html</anchorfile>
      <anchor>a3247e32aaba3a8e62bbcc61e9b172ec7</anchor>
      <arglist>(Side side)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Type</type>
      <name>type</name>
      <anchorfile>a01993.html</anchorfile>
      <anchor>a327093cadc488b62d7a62480f3ca4959</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>name_</name>
      <anchorfile>a01993.html</anchorfile>
      <anchor>af79677e0c449d72b34a329ace9814390</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GetT</type>
      <name>get_fn_</name>
      <anchorfile>a01993.html</anchorfile>
      <anchor>a6e0a97eb4969b6d697f5e3d4f957d886</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Color</type>
      <name>color_</name>
      <anchorfile>a01993.html</anchorfile>
      <anchor>ae207af9008ec8b5da6db891ea0ebd79c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Style</type>
      <name>style_</name>
      <anchorfile>a01993.html</anchorfile>
      <anchor>a859f99683fcc0f5acf120cd6e0f84dbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Side</type>
      <name>side_</name>
      <anchorfile>a01993.html</anchorfile>
      <anchor>a73f245b506213662fd3d5f3deb1eb837</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::plot::impl::OrdinateWithColor</name>
    <filename>a01997.html</filename>
    <templarg>GetT</templarg>
    <templarg>GetColor</templarg>
    <base>mc_rtc::gui::plot::impl::Ordinate</base>
    <member kind="function">
      <type></type>
      <name>OrdinateWithColor</name>
      <anchorfile>a01997.html</anchorfile>
      <anchor>a7070266af8da1fd1c5130a42d6327ebf</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, GetColor color, Style style, Side side)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a01997.html</anchorfile>
      <anchor>a336ddb0dc18460959466cef6486e5f78</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::OrientationTask</name>
    <filename>a02425.html</filename>
    <base>TrajectoryTaskGeneric&lt; tasks::qp::OrientationTask &gt;</base>
    <member kind="function">
      <type></type>
      <name>OrientationTask</name>
      <anchorfile>a02425.html</anchorfile>
      <anchor>aed570ad6882e85529777864cc33d58ed</anchor>
      <arglist>(const std::string &amp;bodyName, const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, double stiffness=2.0, double weight=500)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>a02425.html</anchorfile>
      <anchor>a3230ff70e491adbeea990dc62bf0d069</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>orientation</name>
      <anchorfile>a02425.html</anchorfile>
      <anchor>a8b10f7f275eec4a245cf826c90f9aca7</anchor>
      <arglist>(const Eigen::Matrix3d &amp;ori)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix3d</type>
      <name>orientation</name>
      <anchorfile>a02425.html</anchorfile>
      <anchor>ada80fbd5aaf53369618630495e92a175</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addToLogger</name>
      <anchorfile>a02425.html</anchorfile>
      <anchor>ae0f93ea2baa6813562b79f74658bf561</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeFromLogger</name>
      <anchorfile>a02425.html</anchorfile>
      <anchor>a05e73e60e317fb0d0e0fa7a9149b5be1</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>bodyName</name>
      <anchorfile>a02425.html</anchorfile>
      <anchor>a97da00bdf087f04a99473553efaa6390</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>bIndex</name>
      <anchorfile>a02425.html</anchorfile>
      <anchor>abfd25888b1dc814b280d5443506fe258</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>a02425.html</anchorfile>
      <anchor>ac5953577c61c0b6943106f08851f562c</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;gui) override</arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>EndEffectorTask</name>
      <anchorfile>a02425.html</anchorfile>
      <anchor>ab333c1b08462c2014c404b1b2b886246</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_control::fsm::ParallelState</name>
    <filename>a01449.html</filename>
    <base>mc_control::fsm::State</base>
    <class kind="struct">mc_control::fsm::ParallelState::DelayedState</class>
    <member kind="function">
      <type>void</type>
      <name>configure</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>a316daa83c00819ee3be0940c4ec914a0</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>ab27ac95ced42364760d35649de387b76</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>af63e05b0d225688c5483a4ccd27a28f1</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>a27657e16b49b92ce49db961c081b6d72</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>teardown</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>a39756b383a4f8993bcbd92d04c048b8f</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read_msg</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>ade3a69dd9d2359e240dda537d55a22ca</anchor>
      <arglist>(std::string &amp;msg) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read_write_msg</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>aaede3f89f6f75af9446e21c7f8bf499c</anchor>
      <arglist>(std::string &amp;msg, std::string &amp;out) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rtc::Configuration</type>
      <name>config_</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>a67ae8a4821674427caf996bdf72989b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>time_</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>ab960418680931cc5dffcffb7778bd2b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; DelayedState &gt;</type>
      <name>states_</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>ac2033713e5e43d503b3eac997bd4f36b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>outputStates_</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>a9ce6f4335845118f747a356c6e9ca289</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>finished_first_</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>a1a84decc60058d334a817cdd14704acc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_control::fsm::PauseState</name>
    <filename>a01457.html</filename>
    <base>mc_control::fsm::State</base>
    <member kind="function">
      <type>void</type>
      <name>configure</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>ae794e4997ff266a2e709b3a9cf2ba687</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>a21cbe60a2692a0eede28cd09a0510084</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>a21910e5c2ee0eb49560345113ae9b6be</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>teardown</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>a15a4573c025bf929bd7416b132b8a5c4</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>duration_</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>abf66f94f4a86433976e52ba2751cb60f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>tick_</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>abecdfc22b00a1fa457f6beadadf3a069</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>goal_</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>aabaccc34e1562ea3f396dc2105274b44</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_planning::Pendulum</name>
    <filename>a01605.html</filename>
    <member kind="function">
      <type>EIGEN_MAKE_ALIGNED_OPERATOR_NEW</type>
      <name>Pendulum</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a46abf47859daaa0dd2327b2c76c13bf8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pendulum</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a57af547d6493879008417b6a639bf361</anchor>
      <arglist>(double lamda, const Eigen::Vector3d &amp;com=Eigen::Vector3d::Zero(), const Eigen::Vector3d &amp;comd=Eigen::Vector3d::Zero(), const Eigen::Vector3d &amp;comdd=Eigen::Vector3d::Zero())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>completeIPM</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>aa58c5aad2cacd579145dd4cde7412e4f</anchor>
      <arglist>(const Eigen::Vector3d &amp;p, const Eigen::Vector3d &amp;n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrateCoMJerk</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a9adff808e3b82be53c193a17d46d9c0b</anchor>
      <arglist>(const Eigen::Vector3d &amp;comddd, double dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrateIPM</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a2cc0137e4e3e6cfc5390f55e4b00bd71</anchor>
      <arglist>(Eigen::Vector3d zmp, double lambda, double dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a660e8b095ba2c72efa862309570bc472</anchor>
      <arglist>(double lambda, const Eigen::Vector3d &amp;com, const Eigen::Vector3d &amp;comd=Eigen::Vector3d::Zero(), const Eigen::Vector3d &amp;comdd=Eigen::Vector3d::Zero())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetCoMHeight</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>afb92b295cc1929aadab22278e8107d8b</anchor>
      <arglist>(double height, const Eigen::Vector3d &amp;p, const Eigen::Vector3d &amp;n)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>com</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a66ae8e3c44f2638fb41b3ac8271813b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>comd</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a296b78296de195be1aababf0cc94440d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>comdd</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a5fdfd2b8b636b5587ed286daf3a8c5f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>dcm</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a7fe44e375700d8754c110a4be586af78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>omega</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>aac99dd2365ccea15652f7fe8f5e95d04</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>zmp</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>af966f2d7b34a360547a7d19f27fc4c0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>zmpd</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a2b6c323003ef905cb0655c08a09f77b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>com_</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>ae4b2565ec3cbea0520108495f93a5a69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>comd_</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>aea07962512881de4264b43573e2bab86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>comdd_</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a25f2d33db64e5365300e8aea77993871</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>comddd_</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>ae21f70bd3ef4380e2ca61c176fa03d25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>zmp_</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>ac1bb8f13c47f89740d86998a2ae36444</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>zmpd_</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>ad8c91f4b7e9ce0496255708e646771a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>omega_</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a63859c8fe63cfe27200d7464dab43f21</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::PlanarSurface</name>
    <filename>a01713.html</filename>
    <base>mc_rbdyn::Surface</base>
    <member kind="function">
      <type></type>
      <name>PlanarSurface</name>
      <anchorfile>a01713.html</anchorfile>
      <anchor>a129e3603625f117dc8199b89bf43cd22</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;bodyName, const sva::PTransformd &amp;X_b_s, const std::string &amp;materialName, const std::vector&lt; std::pair&lt; double, double &gt;&gt; &amp;planarPoints)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PlanarSurface</name>
      <anchorfile>a01713.html</anchorfile>
      <anchor>a14cef1c49d935db2d1e30c9a54180f84</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computePoints</name>
      <anchorfile>a01713.html</anchorfile>
      <anchor>a99d226753ea56cc0df9678db6550e0b4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>planarTransform</name>
      <anchorfile>a01713.html</anchorfile>
      <anchor>ab49f9384bc47d3f19bcce47d4c22ca5c</anchor>
      <arglist>(const double &amp;T, const double &amp;B, const double &amp;N_rot)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::pair&lt; double, double &gt; &gt; &amp;</type>
      <name>planarPoints</name>
      <anchorfile>a01713.html</anchorfile>
      <anchor>a8d6d8fdf89e2a53cfaf933d2f4d70e7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>planarPoints</name>
      <anchorfile>a01713.html</anchorfile>
      <anchor>a0eab075507f287b7127f484f23fe3039</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; double, double &gt;&gt; &amp;planarPoints)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Surface &gt;</type>
      <name>copy</name>
      <anchorfile>a01713.html</anchorfile>
      <anchor>a798203ec1bf48a3390f89f3586b6ea85</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>type</name>
      <anchorfile>a01713.html</anchorfile>
      <anchor>a183b940ce2bf200eed3056d5996588d3</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::Plane</name>
    <filename>a01721.html</filename>
    <member kind="variable">
      <type>Eigen::Vector3d</type>
      <name>normal</name>
      <anchorfile>a01721.html</anchorfile>
      <anchor>ad8cba2015c957fc2f09367e269b33a07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>offset</name>
      <anchorfile>a01721.html</anchorfile>
      <anchor>a8c864cca3648d188ffc463ee9cdb2fc6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::Point3DImpl</name>
    <filename>a02025.html</filename>
    <templarg>GetT</templarg>
    <templarg>SetT</templarg>
    <base>mc_rtc::gui::CommonInputImpl</base>
    <member kind="function">
      <type></type>
      <name>Point3DImpl</name>
      <anchorfile>a02025.html</anchorfile>
      <anchor>aebb2b0f65583cdb425856d7589a325d9</anchor>
      <arglist>(const std::string &amp;name, const PointConfig &amp;config, GetT get_fn, SetT set_fn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point3DImpl</name>
      <anchorfile>a02025.html</anchorfile>
      <anchor>a81ef40f7c6064e0c1888601141f88cfd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02025.html</anchorfile>
      <anchor>a9101fdc36b843f5a6e93eb033095de14</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>a02025.html</anchorfile>
      <anchor>a0c1fd00806f16e62c3ee1140799ac02c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>a02025.html</anchorfile>
      <anchor>a0471c69344137b9065b0c26db9d43639</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::Point3DROImpl</name>
    <filename>a02021.html</filename>
    <templarg>GetT</templarg>
    <base>mc_rtc::gui::DataElement</base>
    <member kind="function">
      <type></type>
      <name>Point3DROImpl</name>
      <anchorfile>a02021.html</anchorfile>
      <anchor>adbfe7a2b3ff83932027e08f0c95d663b</anchor>
      <arglist>(const std::string &amp;name, const PointConfig &amp;config, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02021.html</anchorfile>
      <anchor>a2b4d2003ac770437919c754325d04134</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point3DROImpl</name>
      <anchorfile>a02021.html</anchorfile>
      <anchor>a3a11467db7f88a9eab78a93aee90227b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>a02021.html</anchorfile>
      <anchor>abe5261acb5b704491064407a9b734b6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>a02021.html</anchorfile>
      <anchor>a91b7374b66df426ff377ec34f124e73b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::PointConfig</name>
    <filename>a02089.html</filename>
    <member kind="function">
      <type></type>
      <name>PointConfig</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>a1561d8ebb70e3cb79de4ccab8c1d9f39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PointConfig</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>a292175258d872208e99632ac1552700b</anchor>
      <arglist>(const Color &amp;color, double scale=0.02)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PointConfig</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>a8277e9a9b0552925512c2c5bf13e27af</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>ac42a2a7dbe68b518029a300b5ed6ff2d</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>a21cfe22ca3c76493be3f27788a18c0bf</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;out) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>aceab827e57173288e6abee5abf7cf368</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>Color</type>
      <name>color</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>a322a868c95c738f131da19c405ca0fd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>scale</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>aec3bebebe03aa2f57a8e9dfab49e55a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::plot::impl::Polygon</name>
    <filename>a02001.html</filename>
    <templarg>GetT</templarg>
    <member kind="function">
      <type></type>
      <name>Polygon</name>
      <anchorfile>a02001.html</anchorfile>
      <anchor>af7e96bad2cd93f2b0eaecbf94e8ce4c2</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, Side side)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02001.html</anchorfile>
      <anchor>a5cad8ea3b30915d71a70df177591e536</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder) const</arglist>
    </member>
    <member kind="function">
      <type>Polygon &amp;</type>
      <name>side</name>
      <anchorfile>a02001.html</anchorfile>
      <anchor>ab7683b7758fdcb4c826c57eb7ef37800</anchor>
      <arglist>(Side side)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Type</type>
      <name>type</name>
      <anchorfile>a02001.html</anchorfile>
      <anchor>a5c7df3c2bb038af2fd07bc822c1af1bc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::plot::PolygonDescription</name>
    <filename>a02017.html</filename>
    <member kind="function">
      <type></type>
      <name>PolygonDescription</name>
      <anchorfile>a02017.html</anchorfile>
      <anchor>a5be9ba163395960fd1d95bc337b64f2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolygonDescription</name>
      <anchorfile>a02017.html</anchorfile>
      <anchor>a45ab1398054c73f857e813161bb32c62</anchor>
      <arglist>(const std::vector&lt; std::array&lt; double, 2 &gt;&gt; &amp;points, Color outline)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a02017.html</anchorfile>
      <anchor>a986eec4f659dde33b1f088dcd6eb6a76</anchor>
      <arglist>(const PolygonDescription &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a02017.html</anchorfile>
      <anchor>a7884ac843c48bb36e535e47536ed5760</anchor>
      <arglist>(const PolygonDescription &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::array&lt; double, 2 &gt; &gt; &amp;</type>
      <name>points</name>
      <anchorfile>a02017.html</anchorfile>
      <anchor>aa204e03fc3c231dd512ad16a49dad13e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Color &amp;</type>
      <name>outline</name>
      <anchorfile>a02017.html</anchorfile>
      <anchor>a11b53d1bd311213f34519625ef36294c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Style &amp;</type>
      <name>style</name>
      <anchorfile>a02017.html</anchorfile>
      <anchor>a00a7628372d8f7a8fcb4ae2532c8ca86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Color &amp;</type>
      <name>fill</name>
      <anchorfile>a02017.html</anchorfile>
      <anchor>acc0a5ccc455b33de968ad47b6a7c3304</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>closed</name>
      <anchorfile>a02017.html</anchorfile>
      <anchor>a99a003e4a0d4e2ce48862fecfb0a88d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::array&lt; double, 2 &gt; &gt; &amp;</type>
      <name>points</name>
      <anchorfile>a02017.html</anchorfile>
      <anchor>aa8fe64b962d6123e29fbf76b29b281c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Color &amp;</type>
      <name>outline</name>
      <anchorfile>a02017.html</anchorfile>
      <anchor>affe6dfc002b26a7d843a7d38d820e6ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Style &amp;</type>
      <name>style</name>
      <anchorfile>a02017.html</anchorfile>
      <anchor>a4968cba9d0023d60683f78c1d1cd02eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Color &amp;</type>
      <name>fill</name>
      <anchorfile>a02017.html</anchorfile>
      <anchor>a21e66484a0090462d342bac31950af58</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>closed</name>
      <anchorfile>a02017.html</anchorfile>
      <anchor>a5ecd84419861a68c359818643062aa52</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PolygonDescription &amp;</type>
      <name>outline</name>
      <anchorfile>a02017.html</anchorfile>
      <anchor>a999e059af7743423fd58768dc17e2994</anchor>
      <arglist>(const Color &amp;outline)</arglist>
    </member>
    <member kind="function">
      <type>PolygonDescription &amp;</type>
      <name>style</name>
      <anchorfile>a02017.html</anchorfile>
      <anchor>ac77e54fdbd9679a2ee38b3386fd0a227</anchor>
      <arglist>(const Style &amp;style)</arglist>
    </member>
    <member kind="function">
      <type>PolygonDescription &amp;</type>
      <name>fill</name>
      <anchorfile>a02017.html</anchorfile>
      <anchor>a48bd152b874c8b3afbda87b671f0a7f4</anchor>
      <arglist>(const Color &amp;fill)</arglist>
    </member>
    <member kind="function">
      <type>PolygonDescription &amp;</type>
      <name>closed</name>
      <anchorfile>a02017.html</anchorfile>
      <anchor>acb8f660f859e833c99de6513966fe4bb</anchor>
      <arglist>(bool closed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>a02017.html</anchorfile>
      <anchor>ae5518c764a0f7ac6430c872e56e287ca</anchor>
      <arglist>(const mc_rtc::Configuration &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02017.html</anchorfile>
      <anchor>a698a8c16a8dfd0a6c16e00f13ab3b914</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::PolygonImpl</name>
    <filename>a02029.html</filename>
    <templarg>GetT</templarg>
    <base>mc_rtc::gui::DataElement</base>
    <member kind="function">
      <type></type>
      <name>PolygonImpl</name>
      <anchorfile>a02029.html</anchorfile>
      <anchor>af21492bee86877ea68740b1c555e8d45</anchor>
      <arglist>(const std::string &amp;name, const Color &amp;color, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolygonImpl</name>
      <anchorfile>a02029.html</anchorfile>
      <anchor>a9c908c6704072d862688c0dcd3f1de73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02029.html</anchorfile>
      <anchor>a1896414f0415b4fa49e11934bde4c612</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>a02029.html</anchorfile>
      <anchor>af8c8a207d5a4859a307ba1a213515562</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>a02029.html</anchorfile>
      <anchor>a121a2efa2d2ab80bd1ef5f528ec2bb36</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::PolygonInterpolator</name>
    <filename>a01725.html</filename>
    <member kind="typedef">
      <type>std::array&lt; double, 2 &gt;</type>
      <name>tuple_t</name>
      <anchorfile>a01725.html</anchorfile>
      <anchor>a8667e5bd25c0215d10ce8e139028207d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; tuple_t, tuple_t &gt;</type>
      <name>tuple_pair_t</name>
      <anchorfile>a01725.html</anchorfile>
      <anchor>adda7bb6a81b142d132c7772fe7b1672c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolygonInterpolator</name>
      <anchorfile>a01725.html</anchorfile>
      <anchor>a279595aaf7f350b0247920b77efb8040</anchor>
      <arglist>(const std::vector&lt; tuple_pair_t &gt; &amp;tpv)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; geos::geom::Geometry &gt;</type>
      <name>fast_interpolate</name>
      <anchorfile>a01725.html</anchorfile>
      <anchor>a41490869f7df5826143477c52ac3f236</anchor>
      <arglist>(double percent)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; tuple_t &gt;</type>
      <name>midpoint_derivative</name>
      <anchorfile>a01725.html</anchorfile>
      <anchor>a5dbd705039482f156583eadaa91bd51a</anchor>
      <arglist>(double epsilon_derivative)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; tuple_t &gt;</type>
      <name>normal_derivative</name>
      <anchorfile>a01725.html</anchorfile>
      <anchor>a8692430f5c1315d38bbc1a1f4798907c</anchor>
      <arglist>(double epsilon_derivative)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; tuple_pair_t &gt; &amp;</type>
      <name>tuple_pairs</name>
      <anchorfile>a01725.html</anchorfile>
      <anchor>a8c6e2f6234920055ea5c7ab8e32434ee</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::plot::impl::Polygons</name>
    <filename>a02005.html</filename>
    <templarg>GetT</templarg>
    <member kind="function">
      <type></type>
      <name>Polygons</name>
      <anchorfile>a02005.html</anchorfile>
      <anchor>af5c1dd31a2d012206f2915a07a9f792c</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, Side side)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02005.html</anchorfile>
      <anchor>a881d4f1ec50acb6bb79e8db1605ac1ac</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder) const</arglist>
    </member>
    <member kind="function">
      <type>Polygons &amp;</type>
      <name>side</name>
      <anchorfile>a02005.html</anchorfile>
      <anchor>ac8a95deed7837d208505cbe7d949844b</anchor>
      <arglist>(Side side)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Type</type>
      <name>type</name>
      <anchorfile>a02005.html</anchorfile>
      <anchor>a9bac28b142bf3360b5d6a15aa09197fa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::PositionBasedVisServoTask</name>
    <filename>a02429.html</filename>
    <base>TrajectoryTaskGeneric&lt; tasks::qp::PositionBasedVisServoTask &gt;</base>
    <member kind="function">
      <type></type>
      <name>PositionBasedVisServoTask</name>
      <anchorfile>a02429.html</anchorfile>
      <anchor>ae2cab369aedb3678ebd9b4687faa8ba9</anchor>
      <arglist>(const std::string &amp;bodyName, const sva::PTransformd &amp;X_t_s, const sva::PTransformd &amp;X_b_s, const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, double stiffness=2.0, double weight=500)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PositionBasedVisServoTask</name>
      <anchorfile>a02429.html</anchorfile>
      <anchor>ab210ce2c552242965b7bd04b02d91517</anchor>
      <arglist>(const std::string &amp;surfaceName, const sva::PTransformd &amp;X_t_s, const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, double stiffness=2.0, double weight=500)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>a02429.html</anchorfile>
      <anchor>a8c041b0993d362a21630ba766aac3218</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>error</name>
      <anchorfile>a02429.html</anchorfile>
      <anchor>aa2e8c33c6432ee68e91a59ed396fdd2a</anchor>
      <arglist>(const sva::PTransformd &amp;X_t_s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToLogger</name>
      <anchorfile>a02429.html</anchorfile>
      <anchor>a1c5a2a63cff774edab49e058c63344d6</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromLogger</name>
      <anchorfile>a02429.html</anchorfile>
      <anchor>adb31cd43854da32f63e4b26fbe11b78b</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::PositionTask</name>
    <filename>a02433.html</filename>
    <base>TrajectoryTaskGeneric&lt; tasks::qp::PositionTask &gt;</base>
    <member kind="function">
      <type></type>
      <name>PositionTask</name>
      <anchorfile>a02433.html</anchorfile>
      <anchor>af67679b5190933536dbc6f20adc44aac</anchor>
      <arglist>(const std::string &amp;bodyName, const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, double stiffness=2.0, double weight=500)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PositionTask</name>
      <anchorfile>a02433.html</anchorfile>
      <anchor>ac499556b7d530acd382b95bc949036cb</anchor>
      <arglist>(const std::string &amp;bodyName, const Eigen::Vector3d &amp;bodyPoint, const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, double stiffness=2.0, double weight=500)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PositionTask</name>
      <anchorfile>a02433.html</anchorfile>
      <anchor>a8b27ece320044774405b64dcfd78147c</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>a02433.html</anchorfile>
      <anchor>af32bca3285f7bc4cd41ea8a0bd357d43</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>position</name>
      <anchorfile>a02433.html</anchorfile>
      <anchor>a627a0324b89372679d66aee384cf8626</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>position</name>
      <anchorfile>a02433.html</anchorfile>
      <anchor>a0e4c276d1d0f1903e4bec9bd8f8dfb27</anchor>
      <arglist>(const Eigen::Vector3d &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>bodyPoint</name>
      <anchorfile>a02433.html</anchorfile>
      <anchor>a5400521cf1e500a9df8895a1ffd13240</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bodyPoint</name>
      <anchorfile>a02433.html</anchorfile>
      <anchor>a4bf8127c35886227640928b1a35d2d93</anchor>
      <arglist>(const Eigen::Vector3d &amp;bodyPoint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>a02433.html</anchorfile>
      <anchor>a4424ab1a1faf897723d2f3bdbacc3f97</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;gui) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>addToLogger</name>
      <anchorfile>a02433.html</anchorfile>
      <anchor>a14d145d4f022d810aadcc42f18083c6b</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>removeFromLogger</name>
      <anchorfile>a02433.html</anchorfile>
      <anchor>a135de9a59363e65792510f7606db5132</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>bodyName</name>
      <anchorfile>a02433.html</anchorfile>
      <anchor>ab5a74d25feb1e33ed9895903b23886fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>bIndex</name>
      <anchorfile>a02433.html</anchorfile>
      <anchor>a922a7fc03cfcae2c0cdb403952a49c5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>EndEffectorTask</name>
      <anchorfile>a02433.html</anchorfile>
      <anchor>ab333c1b08462c2014c404b1b2b886246</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::PostureTask</name>
    <filename>a02437.html</filename>
    <base>mc_tasks::MetaTask</base>
    <member kind="function">
      <type></type>
      <name>PostureTask</name>
      <anchorfile>a02437.html</anchorfile>
      <anchor>a2236062d8e099d089e8f2c93dc4ba55e</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, unsigned int rIndex, double stiffness=1, double weight=10)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a02437.html</anchorfile>
      <anchor>ac47c167b6a6c59546bbebfcabb5be810</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dimWeight</name>
      <anchorfile>a02437.html</anchorfile>
      <anchor>a956fb062557c6d0789eb2424a9a2c06b</anchor>
      <arglist>(const Eigen::VectorXd &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>dimWeight</name>
      <anchorfile>a02437.html</anchorfile>
      <anchor>add36165bd4f34b697789531972948e22</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selectActiveJoints</name>
      <anchorfile>a02437.html</anchorfile>
      <anchor>af3d5a7f71a7bfbc3cd92a40a8b5d432b</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const std::vector&lt; std::string &gt; &amp;activeJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;activeDofs={}) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selectUnactiveJoints</name>
      <anchorfile>a02437.html</anchorfile>
      <anchor>afda9cd7d8bab32bc0644da110f06a4e3</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const std::vector&lt; std::string &gt; &amp;unactiveJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;unactiveDofs={}) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetJointsSelector</name>
      <anchorfile>a02437.html</anchorfile>
      <anchor>a53ab7fdbe90e3b309a618bec3bb69859</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>eval</name>
      <anchorfile>a02437.html</anchorfile>
      <anchor>a529169e0178306b0eec9bf0f428752c7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>speed</name>
      <anchorfile>a02437.html</anchorfile>
      <anchor>ab3327552ee53d6f191b04208baafd9a9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>posture</name>
      <anchorfile>a02437.html</anchorfile>
      <anchor>a2299c6226e336a265adc283b2a600639</anchor>
      <arglist>(const std::vector&lt; std::vector&lt; double &gt;&gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>posture</name>
      <anchorfile>a02437.html</anchorfile>
      <anchor>ad3d36333bd6d95d5bc742ad1de920ab7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jointGains</name>
      <anchorfile>a02437.html</anchorfile>
      <anchor>a4d21d16164f3b18f45923a69a7198423</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const std::vector&lt; tasks::qp::JointGains &gt; &amp;jgs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jointStiffness</name>
      <anchorfile>a02437.html</anchorfile>
      <anchor>a3933b0c231304b52c0c4dc83080143cb</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const std::vector&lt; tasks::qp::JointStiffness &gt; &amp;jss)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>target</name>
      <anchorfile>a02437.html</anchorfile>
      <anchor>acb550b5465420b15d564c8df277b849a</anchor>
      <arglist>(const std::map&lt; std::string, std::vector&lt; double &gt;&gt; &amp;joints)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stiffness</name>
      <anchorfile>a02437.html</anchorfile>
      <anchor>a15a1e19481a9a67cc4c0a9db183f7463</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stiffness</name>
      <anchorfile>a02437.html</anchorfile>
      <anchor>a5110734784d263558b2ae937f2f74705</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>weight</name>
      <anchorfile>a02437.html</anchorfile>
      <anchor>aa4725eea7614be3d2bcb54e16aa0f15c</anchor>
      <arglist>(double w)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weight</name>
      <anchorfile>a02437.html</anchorfile>
      <anchor>a0c8b2d553a214e9c07c1f51a4eaa4962</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inSolver</name>
      <anchorfile>a02437.html</anchorfile>
      <anchor>ab65cad427dd26ba032f9512de7fc374c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToSolver</name>
      <anchorfile>a02437.html</anchorfile>
      <anchor>a875f742c1356787157c780f8c82140f1</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeFromSolver</name>
      <anchorfile>a02437.html</anchorfile>
      <anchor>a37fc0f741d63ef396c13a2ff3a528772</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02437.html</anchorfile>
      <anchor>a47374edf3d1448c75f6306a0889b22bf</anchor>
      <arglist>(mc_solver::QPSolver &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>a02437.html</anchorfile>
      <anchor>adfb4be7a8cd547a301878ba42ee52fb3</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_control::PythonRWCallback</name>
    <filename>a01497.html</filename>
    <member kind="variable">
      <type>bool</type>
      <name>success</name>
      <anchorfile>a01497.html</anchorfile>
      <anchor>a6cdae0b0b750ab031e2abbb122d93aa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>out</name>
      <anchorfile>a01497.html</anchorfile>
      <anchor>a2f171792f487d5b8b30aa5cad17305fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_control::fsm::PythonState</name>
    <filename>a01409.html</filename>
    <base>mc_control::fsm::State</base>
    <member kind="function">
      <type>void</type>
      <name>configure</name>
      <anchorfile>a01409.html</anchorfile>
      <anchor>a7dc8a970df12a3389c02a09c3e8958b9</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a01409.html</anchorfile>
      <anchor>a3b21dcf4de9b50dbbbbfeb474a7f68fd</anchor>
      <arglist>(Controller &amp;ctl) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a01409.html</anchorfile>
      <anchor>ace20a4b8937c36e5fb3e70af6a2caf91</anchor>
      <arglist>(Controller &amp;ctl) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>teardown</name>
      <anchorfile>a01409.html</anchorfile>
      <anchor>ace45bc755a28523756c72678b5a794da</anchor>
      <arglist>(Controller &amp;ctl) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>a01409.html</anchorfile>
      <anchor>aa22feebf7d1e536225ce01b0f9b37495</anchor>
      <arglist>(Controller &amp;ctl) override</arglist>
    </member>
    <member kind="variable">
      <type>std::function&lt; void(const mc_rtc::Configuration &amp;)&gt;</type>
      <name>configure_</name>
      <anchorfile>a01409.html</anchorfile>
      <anchor>ad1d95a9e55ecea05ca872eb5ac595e4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::function&lt; void(Controller &amp;)&gt;</type>
      <name>start_</name>
      <anchorfile>a01409.html</anchorfile>
      <anchor>a5dd07ae158c8b5cb2d7aae8182fa5726</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::function&lt; bool(Controller &amp;)&gt;</type>
      <name>run_</name>
      <anchorfile>a01409.html</anchorfile>
      <anchor>aae1d211d3545e75cb310e23c0f018844</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::function&lt; void(Controller &amp;)&gt;</type>
      <name>teardown_</name>
      <anchorfile>a01409.html</anchorfile>
      <anchor>ac68780f5cde1e5c3c64139bb637040df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::function&lt; void(Controller &amp;)&gt;</type>
      <name>stop_</name>
      <anchorfile>a01409.html</anchorfile>
      <anchor>a181b94b4ed108722e7433849cc08184d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_solver::QPContactPtr</name>
    <filename>a01653.html</filename>
    <member kind="function">
      <type></type>
      <name>QPContactPtr</name>
      <anchorfile>a01653.html</anchorfile>
      <anchor>ae43784e3317dd1ab1d0d8f42926e5de7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>tasks::qp::UnilateralContact *</type>
      <name>unilateralContact</name>
      <anchorfile>a01653.html</anchorfile>
      <anchor>a8edb8058d39c00e880534c7d416819f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>tasks::qp::BilateralContact *</type>
      <name>bilateralContact</name>
      <anchorfile>a01653.html</anchorfile>
      <anchor>a31a08f61bfa921fa79dde45a30f72aa9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_solver::QPContactPtrWPoints</name>
    <filename>a01657.html</filename>
    <member kind="variable">
      <type>QPContactPtr</type>
      <name>qpcontact_ptr</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a18f4220244dc364488e15a5b6fc7bdf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; sva::PTransformd &gt;</type>
      <name>points</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a0b18450a98acf02d8b5b56b0c74e84a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_solver::QPResultMsg</name>
    <filename>a02281.html</filename>
    <member kind="variable">
      <type>std::vector&lt; RobotMsg &gt;</type>
      <name>robots_state</name>
      <anchorfile>a02281.html</anchorfile>
      <anchor>ae0f4c3db6c438d245b68016e54c8b340</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::VectorXd</type>
      <name>lambdaVec</name>
      <anchorfile>a02281.html</anchorfile>
      <anchor>ab4ee75a60ee710b7b99409060e536ace</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; ContactMsg &gt;</type>
      <name>contacts</name>
      <anchorfile>a02281.html</anchorfile>
      <anchor>a50f78df6a82c9e12b03645e9d7352ee2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; ZMP &gt;</type>
      <name>zmps</name>
      <anchorfile>a02281.html</anchorfile>
      <anchor>a7644b4af12fb81a39338fdab81d6ded6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>contacts_lambda_begin</name>
      <anchorfile>a02281.html</anchorfile>
      <anchor>aa2c16ca561ce0820ecfc921b4116c7af</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_solver::QPSolver</name>
    <filename>a02293.html</filename>
    <member kind="function">
      <type></type>
      <name>QPSolver</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>a6f0c3211feb7722f0316b8808b61f6d1</anchor>
      <arglist>(std::shared_ptr&lt; mc_rbdyn::Robots &gt; robots, double timeStep)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QPSolver</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>adb5af970ec8d5b46ddcf8af19bd205be</anchor>
      <arglist>(double timeStep)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addConstraintSet</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>a37580a89d1a0d1a862dfb6b7240e6dd0</anchor>
      <arglist>(ConstraintSet &amp;cs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeConstraintSet</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>a2d48a1aa9f88ea1c6873000df4299a1d</anchor>
      <arglist>(ConstraintSet &amp;cs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTask</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>a8b2f689232445049015987d2ff4d78ce</anchor>
      <arglist>(tasks::qp::Task *task)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTask</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>a68cf69e4985228c83affeb35320c4c25</anchor>
      <arglist>(mc_tasks::MetaTask *task)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTask</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>a8526c038006669a9f433c94445c69338</anchor>
      <arglist>(std::shared_ptr&lt; T &gt; task)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeTask</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>a59755b6d2a453830d66a662767ff3923</anchor>
      <arglist>(tasks::qp::Task *task)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeTask</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>a28e05133ff619c24f30a376e951fde51</anchor>
      <arglist>(mc_tasks::MetaTask *task)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeTask</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>ab9c66bd9fbc6687dccd60727db474c53</anchor>
      <arglist>(std::shared_ptr&lt; T &gt; task)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addConstraint</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>a8508225c35f55cef193bf45adb17ebce</anchor>
      <arglist>(tasks::qp::ConstraintFunction&lt; Fun... &gt; *constraint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeConstraint</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>a91e043a96e0de999c337b15ea8f8a62f</anchor>
      <arglist>(tasks::qp::ConstraintFunction&lt; Fun... &gt; *constraint)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; int, const tasks::qp::BilateralContact &amp; &gt;</type>
      <name>contactById</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>a9d3c5b0a375a038d88ebc4c0acb35afc</anchor>
      <arglist>(const tasks::qp::ContactId &amp;id) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>lambdaVec</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>aba37f50ba476a2701c05b8aa737d9362</anchor>
      <arglist>(int cIndex) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContacts</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>ae628e7f079f7ec8dd5ba2818ffe27adc</anchor>
      <arglist>(const std::vector&lt; mc_rbdyn::Contact &gt; &amp;contacts={})</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; mc_rbdyn::Contact &gt; &amp;</type>
      <name>contacts</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>a14141ec983c638fb3400c1ea23c19aed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; mc_tasks::MetaTask * &gt; &amp;</type>
      <name>tasks</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>ae04be5acbc6d5470efc60889e4024290</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sva::ForceVecd</type>
      <name>desiredContactForce</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>a12c9bbc1231db2f16cfeced583d1c213</anchor>
      <arglist>(const mc_rbdyn::Contact &amp;id) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>ab8f45ed05cf2852c592659d496b2acbb</anchor>
      <arglist>(FeedbackType fType=FeedbackType::None)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>runClosedLoop</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>a174d43a36fd4106dd1267564946327a5</anchor>
      <arglist>(std::shared_ptr&lt; mc_rbdyn::Robots &gt; robot_est)</arglist>
    </member>
    <member kind="function">
      <type>const QPResultMsg &amp;</type>
      <name>send</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>a0b4e9a6b5015c188b1c3825f4e266bd0</anchor>
      <arglist>(double curTime=0)</arglist>
    </member>
    <member kind="function">
      <type>QPResultMsg &amp;</type>
      <name>result</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>a6ac47f4b98ba6a10a14e6f229b677a0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::Robot &amp;</type>
      <name>robot</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>a07536ec6c134bd3f335a382a0a87d55e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>mc_rbdyn::Robot &amp;</type>
      <name>robot</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>a9de399f8ca81b31588579ac59deb8d44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mc_rbdyn::Robot &amp;</type>
      <name>robot</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>a50b2ba3514b0bd8fa4e4775f6a74fc73</anchor>
      <arglist>(unsigned int idx)</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::Robot &amp;</type>
      <name>robot</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>a71a644e823553814792909b06f00f6c6</anchor>
      <arglist>(unsigned int idx) const</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::Robot &amp;</type>
      <name>env</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>af48a56a36d044fa4077f1c9e0ad69936</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>mc_rbdyn::Robot &amp;</type>
      <name>env</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>ae35ec2765a45413bcfebae5e57bcea5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::Robots &amp;</type>
      <name>robots</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>aad5585a2e93a0dcac5f96b1ecf8cddf0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>mc_rbdyn::Robots &amp;</type>
      <name>robots</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>afadc51df1ed896ae8e1546bfb7443ffb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>realRobots</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>a1d6aeb840e2e8f9abc904c1a19e75408</anchor>
      <arglist>(std::shared_ptr&lt; mc_rbdyn::Robots &gt; realRobots)</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::Robots &amp;</type>
      <name>realRobots</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>a6c9e02613427dd8ab79f833d4244186d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>mc_rbdyn::Robots &amp;</type>
      <name>realRobots</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>acac203b080dfbd7dbc680e4d9e8aaa3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateNrVars</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>acd57fb80048c2f364bc216334ed148a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateConstrSize</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>aff107d95b504492274cf0499aa4ddfa0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dt</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>aaf2cd366ed6fa6e21e9cc6833e94cd70</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>tasks::qp::SolverData &amp;</type>
      <name>data</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>a74f4a76c8edd444c9c903392c196be8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillTorque</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>a26f03d18cabc6bc384e4ca7a8e172637</anchor>
      <arglist>(const mc_solver::DynamicsConstraint &amp;dynamicsConstraint)</arglist>
    </member>
    <member kind="function">
      <type>boost::timer::cpu_times</type>
      <name>solveTime</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>a58d895e4be36ff13a42b481f28576e38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>boost::timer::cpu_times</type>
      <name>solveAndBuildTime</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>a53c4d41439ee0e428928a7318fde3f07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>result</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>a14b25f17d47d3f23079d557fd8d2fc6a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>logger</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>a6d2e5c1529e97fa15bff07a9092b1339</anchor>
      <arglist>(std::shared_ptr&lt; mc_rtc::Logger &gt; logger)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; mc_rtc::Logger &gt;</type>
      <name>logger</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>ae805619eed38900664c15a1f3be7921f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gui</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>ac015f44b8b157dafe8303dd295e10e8d</anchor>
      <arglist>(std::shared_ptr&lt; mc_rtc::gui::StateBuilder &gt; gui)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; mc_rtc::gui::StateBuilder &gt;</type>
      <name>gui</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>aaff0d1437fd451774eb7a306b2c5d464</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QPSolver</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>a4f91d1d6ce556366149d3d947182e5f3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::QuadraticGenerator</name>
    <filename>a01717.html</filename>
    <member kind="function">
      <type></type>
      <name>QuadraticGenerator</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a40b29a7315dee567088c1db1c49108c6</anchor>
      <arglist>(double start, double end, unsigned int nrSteps, unsigned int proportion=4)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a33ad0aaa5c9df283c15376186e1defd0</anchor>
      <arglist>(double &amp;percentOut, double &amp;speedOut)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::plot::Range</name>
    <filename>a02009.html</filename>
    <member kind="function">
      <type></type>
      <name>Range</name>
      <anchorfile>a02009.html</anchorfile>
      <anchor>aead20688a3c041cd852dd71c98cfc15b</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Range</name>
      <anchorfile>a02009.html</anchorfile>
      <anchor>ae57efd48b0202aac88fd98578af24993</anchor>
      <arglist>(double min, double max)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>a02009.html</anchorfile>
      <anchor>ad303c48ab81bc362a13995c1b2464d0b</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02009.html</anchorfile>
      <anchor>aa6b749d005afc464c84b138a2d72ae79</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder) const</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>min</name>
      <anchorfile>a02009.html</anchorfile>
      <anchor>a3626d90084b55cd8a94307e620a09062</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>max</name>
      <anchorfile>a02009.html</anchorfile>
      <anchor>a85f2d2500191f058985f2d32ea40583d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>inf</name>
      <anchorfile>a02009.html</anchorfile>
      <anchor>ab995e2707a19a7b8beb6b05bbeffa3b9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::log::FlatLog::record</name>
    <filename>a02129.html</filename>
    <member kind="typedef">
      <type>std::unique_ptr&lt; void, void(*)(void const *)&gt;</type>
      <name>unique_void_ptr</name>
      <anchorfile>a02129.html</anchorfile>
      <anchor>a4e556fb8cf1154c39f535f18bbbbf2a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>record</name>
      <anchorfile>a02129.html</anchorfile>
      <anchor>a1189082dce7ec759c42e551534f5b158</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>record</name>
      <anchorfile>a02129.html</anchorfile>
      <anchor>a687a3142850022473bc2724a024a2597</anchor>
      <arglist>(LogType t, unique_void_ptr &amp;&amp;d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>record</name>
      <anchorfile>a02129.html</anchorfile>
      <anchor>ad2377ca354cb3b3d61500c1eee451d69</anchor>
      <arglist>(const record &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>record &amp;</type>
      <name>operator=</name>
      <anchorfile>a02129.html</anchorfile>
      <anchor>a447e5c16c3e286bb51a0a90b0f4ef182</anchor>
      <arglist>(const record &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>record</name>
      <anchorfile>a02129.html</anchorfile>
      <anchor>afb9458b8f743e9f2e8ce8ee0911e38c8</anchor>
      <arglist>(record &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>record &amp;</type>
      <name>operator=</name>
      <anchorfile>a02129.html</anchorfile>
      <anchor>af03a9665af14ae1a3a0545ea86d94804</anchor>
      <arglist>(record &amp;&amp;)=default</arglist>
    </member>
    <member kind="variable">
      <type>LogType</type>
      <name>type</name>
      <anchorfile>a02129.html</anchorfile>
      <anchor>a0796a1bb292299608b539563b87a8610</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unique_void_ptr</type>
      <name>data</name>
      <anchorfile>a02129.html</anchorfile>
      <anchor>a74d58f27e34799a1650342340dc35d0a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::RelativeEndEffectorTask</name>
    <filename>a02441.html</filename>
    <base>mc_tasks::EndEffectorTask</base>
    <member kind="function">
      <type></type>
      <name>RelativeEndEffectorTask</name>
      <anchorfile>a02441.html</anchorfile>
      <anchor>a0158f37c233bf4855f02a8fdacd90729</anchor>
      <arglist>(const std::string &amp;bodyName, const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, const std::string &amp;relBodyName=&quot;&quot;, double stiffness=10.0, double weight=1000.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RelativeEndEffectorTask</name>
      <anchorfile>a02441.html</anchorfile>
      <anchor>a8ebaa7565ec3bdd72adfa57cff39702a</anchor>
      <arglist>(const std::string &amp;bodyName, const Eigen::Vector3d &amp;bodyPoint, const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, const std::string &amp;relBodyName, double stiffness=10.0, double weight=1000.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>a02441.html</anchorfile>
      <anchor>a18753486034464f63692f0e818302900</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add_ef_pose</name>
      <anchorfile>a02441.html</anchorfile>
      <anchor>a203a2b5099b8a34f2182560ce5ca1e64</anchor>
      <arglist>(const sva::PTransformd &amp;dtr) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>set_ef_pose</name>
      <anchorfile>a02441.html</anchorfile>
      <anchor>a8130a99d7ea7d7e1d064021df41e2de2</anchor>
      <arglist>(const sva::PTransformd &amp;tf) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual sva::PTransformd</type>
      <name>get_ef_pose</name>
      <anchorfile>a02441.html</anchorfile>
      <anchor>a7037b03d6b2cd7b5c50b49577216ec39</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>a02441.html</anchorfile>
      <anchor>a7bf4110ad02234504fb7e89ff8c9301b</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;gui) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::RemoveContactTask</name>
    <filename>a02341.html</filename>
    <base>mc_tasks::AddRemoveContactTask</base>
    <member kind="function">
      <type></type>
      <name>RemoveContactTask</name>
      <anchorfile>a02341.html</anchorfile>
      <anchor>a6be76449c889b558b10232dc9e21f62a</anchor>
      <arglist>(mc_rbdyn::Robots &amp;robots, std::shared_ptr&lt; mc_solver::BoundedSpeedConstr &gt; constSpeedConstr, mc_rbdyn::Contact &amp;contact, double speed=0.01, double stiffness=2, double weight=1000, Eigen::Vector3d *userT_0_s=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RemoveContactTask</name>
      <anchorfile>a02341.html</anchorfile>
      <anchor>a2015e5fecd242b335889e417ef01f98b</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, mc_rbdyn::Contact &amp;contact, double speed=0.01, double stiffness=2, double weight=1000, Eigen::Vector3d *userT_0_s=nullptr)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::details::ReturnType</name>
    <filename>a01897.html</filename>
    <templarg>GetT</templarg>
    <member kind="typedef">
      <type>typename std::decay&lt; decltype(std::declval&lt; GetT &gt;()())&gt;::type</type>
      <name>type</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>a291be608e98513ddcf10a3131ba17974</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::Robot</name>
    <filename>a01733.html</filename>
    <member kind="typedef">
      <type>std::shared_ptr&lt; sch::S_Object &gt;</type>
      <name>S_ObjectPtr</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a28270fdeec598bc23d8761191a6226d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; std::string, S_ObjectPtr &gt;</type>
      <name>convex_pair_t</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>aeaf56b7bf79a4e2be37e3c8615d156ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Robot</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a023a2a4a841760ae65a2d868bb6139fa</anchor>
      <arglist>(Robot &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>Robot &amp;</type>
      <name>operator=</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a2e0f6aac369cb793546b62a13809a897</anchor>
      <arglist>(Robot &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>name</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a9f0c4c44861063b684d43d4ad78a995e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>name</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>ab69e0cccc0995337a26218a242136e70</anchor>
      <arglist>(const std::string &amp;n)</arglist>
    </member>
    <member kind="function">
      <type>const RobotModule &amp;</type>
      <name>module</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a3e734d771ca6cf96801de8765cee637d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasJoint</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>aafb78a38ec8b2037519f030140a95976</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasBody</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a8353aa6a66630a85c9249298ed960c6a</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSurface</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a47874ad9d5abdcd85701b02e2c85cefb</anchor>
      <arglist>(const std::string &amp;surface) const</arglist>
    </member>
    <member kind="function">
      <type>mc_rbdyn::Surface &amp;</type>
      <name>surface</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>aa4b724e51881215dd4293f9578656755</anchor>
      <arglist>(const std::string &amp;sName)</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::Surface &amp;</type>
      <name>surface</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a032e4252cb8c2c1d2ab82bd353b1cfb2</anchor>
      <arglist>(const std::string &amp;sName) const</arglist>
    </member>
    <member kind="function">
      <type>sva::PTransformd</type>
      <name>surfacePose</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a0c21632fb2dc076e87cc4f4b6f840ddb</anchor>
      <arglist>(const std::string &amp;sName) const</arglist>
    </member>
    <member kind="function">
      <type>mc_rbdyn::Surface &amp;</type>
      <name>copySurface</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a9eac94be22b1481eaae48d110d97c49e</anchor>
      <arglist>(const std::string &amp;sName, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSurface</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a02691447f1d554276f01339ba6c3aad7</anchor>
      <arglist>(mc_rbdyn::SurfacePtr surface, bool doNotReplace=true)</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; std::string, mc_rbdyn::SurfacePtr &gt; &amp;</type>
      <name>surfaces</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>aee61e66a131e6f3e24982d4c68ffe958</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>availableSurfaces</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>aac0e0346563b3ba8d3fda355e27367a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasConvex</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a75aa71c0145f03a620619e8fe8b96107</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>convex_pair_t &amp;</type>
      <name>convex</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a7fa487585e4b6d447c69ba78d9eca203</anchor>
      <arglist>(const std::string &amp;cName)</arglist>
    </member>
    <member kind="function">
      <type>const convex_pair_t &amp;</type>
      <name>convex</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a2b2dc756cfb84c337de115384febab34</anchor>
      <arglist>(const std::string &amp;cName) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addConvex</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>ae30c16125ec220e6525f86339d894a3c</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;body, S_ObjectPtr convex, const sva::PTransformd &amp;X_b_c=sva::PTransformd::Identity())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeConvex</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a3296b923f06db47d80641b7acf46e5bf</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>bodyTransform</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a91bd5ae09effe07a9a766050bcfee859</anchor>
      <arglist>(const std::string &amp;bName) const</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>bodyTransform</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a022bd9c9318d298da53c823ca93b5f1c</anchor>
      <arglist>(int bodyIndex) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; sva::PTransformd &gt; &amp;</type>
      <name>bodyTransforms</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a135b6be808af82a5b0d21ffda5a8fe17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>collisionTransform</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>af239b709cd1907f1aa264dfa2cb9fd15</anchor>
      <arglist>(const std::string &amp;cName) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadRSDFFromDir</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a1554209253be449c1fb4cdd7e3d2478d</anchor>
      <arglist>(const std::string &amp;surfaceDir)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, std::vector&lt; double &gt; &gt;</type>
      <name>stance</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>ac4b932fc4c4956b16490006dd8591d0e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>robotIndex</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>af110c909887516af9f6758118978b643</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forwardKinematics</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>ae46b693d4431e61db9f1d4a05f66dd5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forwardKinematics</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a9520af131693e9b873ce4c37513cfa1d</anchor>
      <arglist>(rbd::MultiBodyConfig &amp;mbc) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forwardVelocity</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>afd93342dd86da6803288346a3798d374</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forwardVelocity</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a73998aca81be7062371f39ce5d60756a</anchor>
      <arglist>(rbd::MultiBodyConfig &amp;mbc) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forwardAcceleration</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>ab7c546ec0809807016d316229d1d29c0</anchor>
      <arglist>(const sva::MotionVecd &amp;A_0=sva::MotionVecd(Eigen::Vector6d::Zero()))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forwardAcceleration</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>ad5564b8d60b3dd8fa3e88e31f8f93a02</anchor>
      <arglist>(rbd::MultiBodyConfig &amp;mbc, const sva::MotionVecd &amp;A_0=sva::MotionVecd(Eigen::Vector6d::Zero())) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eulerIntegration</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>acd1794c11cac282d7c042216d431ebb7</anchor>
      <arglist>(double step)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eulerIntegration</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>ae8d130fc22dda8e9bfbecad28acc26a5</anchor>
      <arglist>(rbd::MultiBodyConfig &amp;mbc, double step) const</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>posW</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a48843047df8893808f80971fa3f9257f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>posW</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a54fe0da3fe099906b79cb20de8076659</anchor>
      <arglist>(const sva::PTransformd &amp;pt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>velW</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a50f3f6250f68bac91a2594e9e6383b2f</anchor>
      <arglist>(const sva::MotionVecd &amp;vel)</arglist>
    </member>
    <member kind="function">
      <type>const sva::MotionVecd &amp;</type>
      <name>velW</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a38618f0ff197fccef53069f51e9fcafc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>mc_control::Gripper &amp;</type>
      <name>gripper</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a8b970df4059237f37021b47d5aaf2494</anchor>
      <arglist>(const std::string &amp;gripper)</arglist>
    </member>
    <member kind="function">
      <type>const std::unordered_map&lt; std::string, mc_control::GripperPtr &gt; &amp;</type>
      <name>grippersByName</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a6b0c83dbee42dff616909c21b90825b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; mc_control::GripperRef &gt; &amp;</type>
      <name>grippers</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>afa96f71ad7e9c085d622c4885c15f1bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BodySensor &amp;</type>
      <name>bodySensor</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a3effaf63deb70c0d2463cf374cc2e7c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BodySensor &amp;</type>
      <name>bodySensor</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a3e34acaf5dc3b279cc97e5cd4c215708</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasBodySensor</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a2572eb64a1ab6318f715e0163400e4bf</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>bodyHasBodySensor</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a558d26564bdb4888db21b2ae13d32f39</anchor>
      <arglist>(const std::string &amp;body) const</arglist>
    </member>
    <member kind="function">
      <type>BodySensor &amp;</type>
      <name>bodySensor</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a439af8f5d3edc70f1f8cf8b947c61cdd</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const BodySensor &amp;</type>
      <name>bodySensor</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a6e04286463ae6f91105c0b83ef370da8</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>BodySensor &amp;</type>
      <name>bodyBodySensor</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a4a5ebf8a9421a34de48c2b31449478cc</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const BodySensor &amp;</type>
      <name>bodyBodySensor</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>ac4faa529e12f2d401c2d7a805f07ae75</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>BodySensorVector &amp;</type>
      <name>bodySensors</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a0a7aeb8979e469e5d34c4ffea9267a70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BodySensorVector &amp;</type>
      <name>bodySensors</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>ace8a8b93689ec20b516f8d0ae460ea80</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>jointIndexByName</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a7ad6afc9dd0267860a325771e7f87ea1</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>jointIndexInMBC</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a3662367cdf4edb974bdad793b1189b20</anchor>
      <arglist>(size_t jointIndex) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>bodyIndexByName</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a5309b5ef9bb5b91bf0f1adb59813bde4</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>rbd::MultiBody &amp;</type>
      <name>mb</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a79bdab3efcd9ada4d2b3aefa53374af1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const rbd::MultiBody &amp;</type>
      <name>mb</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>ab09b1765903debcc06dce65ce830cfc0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>rbd::MultiBodyConfig &amp;</type>
      <name>mbc</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a0051e9ce612a34601d6934f7d5caaeb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const rbd::MultiBodyConfig &amp;</type>
      <name>mbc</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>aece5a00f65317b116f70ed2937239421</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>rbd::MultiBodyGraph &amp;</type>
      <name>mbg</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a900ba960e115fa967889ebdb842f6a3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const rbd::MultiBodyGraph &amp;</type>
      <name>mbg</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a78336b8d90c933da75cd138227072321</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>q</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a485eb8aa4ceb0a0a5010844d16e47f95</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>alpha</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a5773f91f2a9d0eb5cb4b6a0943551a1b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>alphaD</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>aeca1f147be470012cb1203f95d5c5abe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>jointTorque</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a95798f9588d0656c61558ab20ad935b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; sva::PTransformd &gt; &amp;</type>
      <name>bodyPosW</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a7e9415aa6bf2421a5e76bd85b04359b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; sva::MotionVecd &gt; &amp;</type>
      <name>bodyVelW</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>aad1bcd2edaa8eeb17033ae3fafe1bde8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; sva::MotionVecd &gt; &amp;</type>
      <name>bodyVelB</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>ac4ce1f653158bc3b79dd903ee1c05d9c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; sva::MotionVecd &gt; &amp;</type>
      <name>bodyAccB</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a1e4739f4a8c3d2ac6a20797e7287b959</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>q</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a8ad8d3434a21adb16f8c41a5444ea067</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>alpha</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>ad36db2265563e037f7b98f2a3b8ac826</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>alphaD</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a611ff3ed6802a623056076abba7283ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>jointTorque</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>af946d00c2f9e36ed5c0899f237f35c32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; sva::PTransformd &gt; &amp;</type>
      <name>bodyPosW</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>adf0aad75ddf11178d780abe0a64d7021</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; sva::MotionVecd &gt; &amp;</type>
      <name>bodyVelW</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a252c64f915ca619afcdcf27e9dd63dd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; sva::MotionVecd &gt; &amp;</type>
      <name>bodyVelB</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a54b38b6bbe93a7b6cc48d9091e9ee8b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; sva::MotionVecd &gt; &amp;</type>
      <name>bodyAccB</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>accfdb088e19e290eea18767e249ca79e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>bodyPosW</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>af7764d03bd41fedfa98443d4a0b262e9</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>sva::PTransformd</type>
      <name>X_b1_b2</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a76547cf0aab26354dad897265d6060ee</anchor>
      <arglist>(const std::string &amp;b1, const std::string &amp;b2) const</arglist>
    </member>
    <member kind="function">
      <type>const sva::MotionVecd &amp;</type>
      <name>bodyVelW</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>abc4808b0299894e9343b6c27b1cc6e14</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const sva::MotionVecd &amp;</type>
      <name>bodyVelB</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a86619b4049ec59d383a445bafe43830e</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const sva::MotionVecd &amp;</type>
      <name>bodyAccB</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a81e766814295ca73b3bf6da8e90f4421</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>com</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a4e858c693b7e94ded9704e13463e1ae5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>comVelocity</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>aa17c3d6b4bff8b9bcbedad822a86fdbc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>comAcceleration</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a68f1932b13b8a4589f66dd792522e1ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sva::ForceVecd</type>
      <name>surfaceWrench</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a928b9370f7643511d1ec80892245fb88</anchor>
      <arglist>(const std::string &amp;surfaceName) const</arglist>
    </member>
    <member kind="function">
      <type>sva::ForceVecd</type>
      <name>bodyWrench</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a207f3ea22bce722a3d68ac37aed8ca03</anchor>
      <arglist>(const std::string &amp;bodyName) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector2d</type>
      <name>cop</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a411485264496b268c8ace71adcc3e75e</anchor>
      <arglist>(const std::string &amp;surfaceName, double min_pressure=0.5) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>copW</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a2042bcdb8f612347b16e72c1853d0f1a</anchor>
      <arglist>(const std::string &amp;surfaceName, double min_pressure=0.5) const</arglist>
    </member>
    <member kind="function">
      <type>sva::ForceVecd</type>
      <name>netWrench</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a117494f13e48578a752a102e322189b0</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;sensorNames) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>zmp</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a3d2dbbe9a2cb2c0eb61790cd7f3dc9c4</anchor>
      <arglist>(const sva::ForceVecd &amp;netTotalWrench, const Eigen::Vector3d &amp;plane_p, const Eigen::Vector3d &amp;plane_n, double minimalNetNormalForce=1.) const</arglist>
      <docanchor file="a00766">zmpDoc</docanchor>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>zmp</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>aca98040d3ecdb597c65f3615a06d588d</anchor>
      <arglist>(const sva::ForceVecd &amp;netTotalWrench, const sva::PTransformd &amp;zmpFrame, double minimalNetNormalForce=1.) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>zmp</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a472551d6b434e3e5a2239b35cffc639b</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;sensorNames, const Eigen::Vector3d &amp;plane_p, const Eigen::Vector3d &amp;plane_n, double minimalNetNormalForce=1.) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>zmp</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a4b62d2a94e3c81f2c436828bc9ed5186</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;sensorNames, const sva::PTransformd &amp;zmpFrame, double minimalNetNormalForce=1.) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>ql</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>ac18cb6ecabada0aac1f823b7e9170308</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>qu</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>ac42c2ce3eea4e1100b4fc77b95821021</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>vl</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>ab63444fe66136d722426aca78449d62a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>vu</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>ac77b8ab43b004940508945dcb1234e60</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>tl</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>afd4cbabd88c9ee4565a2555dcc0208ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>tu</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a74f8c3970a3aff460fc5abad5b493eb6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>ql</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>afc061e1b33c4f633a04015ab3fb20f94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>qu</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>ac6915de62543382030defd22b9f8011c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>vl</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a8a8dbaec40be4ad0be51f4df67502d39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>vu</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>ae6c3ad6f7d81353b09689ea6e41eec34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>tl</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>adf6dfded6aa9e9c6ca6ff6d8e386b66d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>tu</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>afe854537bd0f1fb8ab64ce91f5f6105d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Flexibility &gt; &amp;</type>
      <name>flexibility</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>adada908603cd6527095ccb940d6405bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Flexibility &gt; &amp;</type>
      <name>flexibility</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a52b9f6334096f8f9534d4dfab3a89495</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zmpTarget</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>ad70ad9c81c418baf93ecccd6a75ff12f</anchor>
      <arglist>(const Eigen::Vector3d &amp;zmp)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>zmpTarget</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a8fa1d2571113230a15a6726fb06b91fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>mass</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a357a8bb518ee6ce00d8b25c5437b79c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>encoderValues</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a1191c63affb21cb0e15698a48ee83355</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>encoderValues</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>ab757a9c9f2f1a0c2f6a2d0ce73a4c89f</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;encoderValues)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>encoderVelocities</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>ad88153372c03f393b45a9d7ac88df0c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>encoderVelocities</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a02d2160fc0a6f5a7b206776fa9ac6242</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;encoderVelocities)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>flexibilityValues</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a4c07f58dbe7a2cba53e4bec2abc2bdff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flexibilityValues</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a458513fda098c7ddd3ffa9f1605dbc0a</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;flexibilityValues)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>jointTorques</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a91168b4930361d5a61a60a925ae0cc6d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jointTorques</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>abc6661a03573ba04f70c8cd14939dd0e</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;jointTorques)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>refJointOrder</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a00856f04c24c914b9197fe11f2d573eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasForceSensor</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>ae6addeeebfb0b899376ed338b212a33a</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>bodyHasForceSensor</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a183b8dbcdcda9c179b83c780bccea04b</anchor>
      <arglist>(const std::string &amp;body) const</arglist>
    </member>
    <member kind="function">
      <type>ForceSensor &amp;</type>
      <name>forceSensor</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a4c4b5161096f6e95ceaa57280f951dab</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const ForceSensor &amp;</type>
      <name>forceSensor</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a40d807280f230919ff00adf3d43a5caa</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>ForceSensor &amp;</type>
      <name>bodyForceSensor</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a49efc5c9284a39c13647ff5500138d33</anchor>
      <arglist>(const std::string &amp;body)</arglist>
    </member>
    <member kind="function">
      <type>const ForceSensor &amp;</type>
      <name>bodyForceSensor</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a7d8ac9af47c038fda22f721e9c1d3a89</anchor>
      <arglist>(const std::string &amp;body) const</arglist>
    </member>
    <member kind="function">
      <type>ForceSensor &amp;</type>
      <name>findBodyForceSensor</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a7e14cf2bdc70b09694f20ce361951f3a</anchor>
      <arglist>(const std::string &amp;body)</arglist>
    </member>
    <member kind="function">
      <type>const ForceSensor &amp;</type>
      <name>findBodyForceSensor</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a663bbb5cbdd28846262d23e2def39e83</anchor>
      <arglist>(const std::string &amp;body) const</arglist>
    </member>
    <member kind="function">
      <type>ForceSensor &amp;</type>
      <name>findSurfaceForceSensor</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a42d6eaf5f5a8bb51c29a400a29897d1d</anchor>
      <arglist>(const std::string &amp;surface)</arglist>
    </member>
    <member kind="function">
      <type>const ForceSensor &amp;</type>
      <name>findSurfaceForceSensor</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a2afa3baa0fc7aab41ca8e1670d4f13d3</anchor>
      <arglist>(const std::string &amp;surface) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; ForceSensor &gt; &amp;</type>
      <name>forceSensors</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>aa9ece4044d66c5fb62667f7dc91dd6d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; ForceSensor &gt; &amp;</type>
      <name>forceSensors</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>ad3fe91912f91e71eaff0a67af81b4ca0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasDevice</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>af183f29b2232cbc87cc8dc744f93424e</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSensor</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>ab011a5322c37711cf940653e7b814b50</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>device</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a4e3272e412d22bf6d382117300c9ee42</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>device</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a6cff71ca3ef36a1f5b5a945d6e70b64b</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>sensor</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>ac945ba1c44d9dfb2f2312d13c8ed24b4</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>sensor</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a72a8bd2c7daead0016449a6056fd2035</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDevice</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a1736b85ddedafef83111d6c67ff6f129</anchor>
      <arglist>(DevicePtr device)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSensor</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>abc302e460bc53880eb062681e9e50a54</anchor>
      <arglist>(SensorPtr sensor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Robot</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a36f2a1e6efba28f038f83f77f85e19d6</anchor>
      <arglist>(Robots &amp;robots, unsigned int robots_idx, bool loadFiles, const sva::PTransformd *base=nullptr, const std::string &amp;baseName=&quot;&quot;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>copy</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a36e2cb8d08978a8d62e117b9b6a7b8ce</anchor>
      <arglist>(Robots &amp;robots, unsigned int robots_idx, const Base &amp;base) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>copy</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a6bfb0930e7ae5c706851da1a1ae73cb8</anchor>
      <arglist>(Robots &amp;robots, unsigned int robots_idx) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fixSurfaces</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a218dfb7dbc50f94466e30871869b967d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fixCollisionTransforms</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a005d9859a7272ac6dbcab9c31aef8092</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>Robots</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a7ea6242bb22401bac23542e1db3a74ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>BodySensor &amp;</type>
      <name>bodySensor</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a3effaf63deb70c0d2463cf374cc2e7c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BodySensor &amp;</type>
      <name>bodySensor</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a3e34acaf5dc3b279cc97e5cd4c215708</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasBodySensor</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a2572eb64a1ab6318f715e0163400e4bf</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>bodyHasBodySensor</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a558d26564bdb4888db21b2ae13d32f39</anchor>
      <arglist>(const std::string &amp;body) const</arglist>
    </member>
    <member kind="function">
      <type>BodySensor &amp;</type>
      <name>bodySensor</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a439af8f5d3edc70f1f8cf8b947c61cdd</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const BodySensor &amp;</type>
      <name>bodySensor</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a6e04286463ae6f91105c0b83ef370da8</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>BodySensor &amp;</type>
      <name>bodyBodySensor</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a4a5ebf8a9421a34de48c2b31449478cc</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const BodySensor &amp;</type>
      <name>bodyBodySensor</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>ac4faa529e12f2d401c2d7a805f07ae75</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>BodySensorVector &amp;</type>
      <name>bodySensors</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a0a7aeb8979e469e5d34c4ffea9267a70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BodySensorVector &amp;</type>
      <name>bodySensors</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>ace8a8b93689ec20b516f8d0ae460ea80</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>jointIndexByName</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a7ad6afc9dd0267860a325771e7f87ea1</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>jointIndexInMBC</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a3662367cdf4edb974bdad793b1189b20</anchor>
      <arglist>(size_t jointIndex) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>bodyIndexByName</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a5309b5ef9bb5b91bf0f1adb59813bde4</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>rbd::MultiBody &amp;</type>
      <name>mb</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a79bdab3efcd9ada4d2b3aefa53374af1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const rbd::MultiBody &amp;</type>
      <name>mb</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>ab09b1765903debcc06dce65ce830cfc0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>rbd::MultiBodyConfig &amp;</type>
      <name>mbc</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a0051e9ce612a34601d6934f7d5caaeb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const rbd::MultiBodyConfig &amp;</type>
      <name>mbc</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>aece5a00f65317b116f70ed2937239421</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>rbd::MultiBodyGraph &amp;</type>
      <name>mbg</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a900ba960e115fa967889ebdb842f6a3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const rbd::MultiBodyGraph &amp;</type>
      <name>mbg</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a78336b8d90c933da75cd138227072321</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>q</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a485eb8aa4ceb0a0a5010844d16e47f95</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>alpha</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a5773f91f2a9d0eb5cb4b6a0943551a1b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>alphaD</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>aeca1f147be470012cb1203f95d5c5abe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>jointTorque</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a95798f9588d0656c61558ab20ad935b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; sva::PTransformd &gt; &amp;</type>
      <name>bodyPosW</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a7e9415aa6bf2421a5e76bd85b04359b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; sva::MotionVecd &gt; &amp;</type>
      <name>bodyVelW</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>aad1bcd2edaa8eeb17033ae3fafe1bde8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; sva::MotionVecd &gt; &amp;</type>
      <name>bodyVelB</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>ac4ce1f653158bc3b79dd903ee1c05d9c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; sva::MotionVecd &gt; &amp;</type>
      <name>bodyAccB</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a1e4739f4a8c3d2ac6a20797e7287b959</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>q</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a8ad8d3434a21adb16f8c41a5444ea067</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>alpha</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>ad36db2265563e037f7b98f2a3b8ac826</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>alphaD</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a611ff3ed6802a623056076abba7283ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>jointTorque</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>af946d00c2f9e36ed5c0899f237f35c32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; sva::PTransformd &gt; &amp;</type>
      <name>bodyPosW</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>adf0aad75ddf11178d780abe0a64d7021</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; sva::MotionVecd &gt; &amp;</type>
      <name>bodyVelW</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a252c64f915ca619afcdcf27e9dd63dd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; sva::MotionVecd &gt; &amp;</type>
      <name>bodyVelB</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a54b38b6bbe93a7b6cc48d9091e9ee8b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; sva::MotionVecd &gt; &amp;</type>
      <name>bodyAccB</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>accfdb088e19e290eea18767e249ca79e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>bodyPosW</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>af7764d03bd41fedfa98443d4a0b262e9</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>sva::PTransformd</type>
      <name>X_b1_b2</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a76547cf0aab26354dad897265d6060ee</anchor>
      <arglist>(const std::string &amp;b1, const std::string &amp;b2) const</arglist>
    </member>
    <member kind="function">
      <type>const sva::MotionVecd &amp;</type>
      <name>bodyVelW</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>abc4808b0299894e9343b6c27b1cc6e14</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const sva::MotionVecd &amp;</type>
      <name>bodyVelB</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a86619b4049ec59d383a445bafe43830e</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const sva::MotionVecd &amp;</type>
      <name>bodyAccB</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a81e766814295ca73b3bf6da8e90f4421</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>com</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a4e858c693b7e94ded9704e13463e1ae5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>comVelocity</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>aa17c3d6b4bff8b9bcbedad822a86fdbc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>comAcceleration</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a68f1932b13b8a4589f66dd792522e1ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sva::ForceVecd</type>
      <name>surfaceWrench</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a928b9370f7643511d1ec80892245fb88</anchor>
      <arglist>(const std::string &amp;surfaceName) const</arglist>
    </member>
    <member kind="function">
      <type>sva::ForceVecd</type>
      <name>bodyWrench</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a207f3ea22bce722a3d68ac37aed8ca03</anchor>
      <arglist>(const std::string &amp;bodyName) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector2d</type>
      <name>cop</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a411485264496b268c8ace71adcc3e75e</anchor>
      <arglist>(const std::string &amp;surfaceName, double min_pressure=0.5) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>copW</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a2042bcdb8f612347b16e72c1853d0f1a</anchor>
      <arglist>(const std::string &amp;surfaceName, double min_pressure=0.5) const</arglist>
    </member>
    <member kind="function">
      <type>sva::ForceVecd</type>
      <name>netWrench</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a117494f13e48578a752a102e322189b0</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;sensorNames) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>zmp</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a3d2dbbe9a2cb2c0eb61790cd7f3dc9c4</anchor>
      <arglist>(const sva::ForceVecd &amp;netTotalWrench, const Eigen::Vector3d &amp;plane_p, const Eigen::Vector3d &amp;plane_n, double minimalNetNormalForce=1.) const</arglist>
      <docanchor file="a00766">zmpDoc</docanchor>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>zmp</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>aca98040d3ecdb597c65f3615a06d588d</anchor>
      <arglist>(const sva::ForceVecd &amp;netTotalWrench, const sva::PTransformd &amp;zmpFrame, double minimalNetNormalForce=1.) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>zmp</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a472551d6b434e3e5a2239b35cffc639b</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;sensorNames, const Eigen::Vector3d &amp;plane_p, const Eigen::Vector3d &amp;plane_n, double minimalNetNormalForce=1.) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>zmp</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a4b62d2a94e3c81f2c436828bc9ed5186</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;sensorNames, const sva::PTransformd &amp;zmpFrame, double minimalNetNormalForce=1.) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>ql</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>ac18cb6ecabada0aac1f823b7e9170308</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>qu</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>ac42c2ce3eea4e1100b4fc77b95821021</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>vl</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>ab63444fe66136d722426aca78449d62a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>vu</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>ac77b8ab43b004940508945dcb1234e60</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>tl</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>afd4cbabd88c9ee4565a2555dcc0208ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>tu</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a74f8c3970a3aff460fc5abad5b493eb6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>ql</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>afc061e1b33c4f633a04015ab3fb20f94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>qu</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>ac6915de62543382030defd22b9f8011c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>vl</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a8a8dbaec40be4ad0be51f4df67502d39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>vu</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>ae6c3ad6f7d81353b09689ea6e41eec34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>tl</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>adf6dfded6aa9e9c6ca6ff6d8e386b66d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
      <name>tu</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>afe854537bd0f1fb8ab64ce91f5f6105d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Flexibility &gt; &amp;</type>
      <name>flexibility</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>adada908603cd6527095ccb940d6405bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Flexibility &gt; &amp;</type>
      <name>flexibility</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a52b9f6334096f8f9534d4dfab3a89495</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zmpTarget</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>ad70ad9c81c418baf93ecccd6a75ff12f</anchor>
      <arglist>(const Eigen::Vector3d &amp;zmp)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>zmpTarget</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a8fa1d2571113230a15a6726fb06b91fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>mass</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a357a8bb518ee6ce00d8b25c5437b79c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>encoderValues</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a1191c63affb21cb0e15698a48ee83355</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>encoderValues</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>ab757a9c9f2f1a0c2f6a2d0ce73a4c89f</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;encoderValues)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>encoderVelocities</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>ad88153372c03f393b45a9d7ac88df0c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>encoderVelocities</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a02d2160fc0a6f5a7b206776fa9ac6242</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;encoderVelocities)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>flexibilityValues</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a4c07f58dbe7a2cba53e4bec2abc2bdff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flexibilityValues</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a458513fda098c7ddd3ffa9f1605dbc0a</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;flexibilityValues)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>jointTorques</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a91168b4930361d5a61a60a925ae0cc6d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jointTorques</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>abc6661a03573ba04f70c8cd14939dd0e</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;jointTorques)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>refJointOrder</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a00856f04c24c914b9197fe11f2d573eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasForceSensor</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>ae6addeeebfb0b899376ed338b212a33a</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>bodyHasForceSensor</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a183b8dbcdcda9c179b83c780bccea04b</anchor>
      <arglist>(const std::string &amp;body) const</arglist>
    </member>
    <member kind="function">
      <type>ForceSensor &amp;</type>
      <name>forceSensor</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a4c4b5161096f6e95ceaa57280f951dab</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const ForceSensor &amp;</type>
      <name>forceSensor</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a40d807280f230919ff00adf3d43a5caa</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>ForceSensor &amp;</type>
      <name>bodyForceSensor</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a49efc5c9284a39c13647ff5500138d33</anchor>
      <arglist>(const std::string &amp;body)</arglist>
    </member>
    <member kind="function">
      <type>const ForceSensor &amp;</type>
      <name>bodyForceSensor</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a7d8ac9af47c038fda22f721e9c1d3a89</anchor>
      <arglist>(const std::string &amp;body) const</arglist>
    </member>
    <member kind="function">
      <type>ForceSensor &amp;</type>
      <name>findBodyForceSensor</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a7e14cf2bdc70b09694f20ce361951f3a</anchor>
      <arglist>(const std::string &amp;body)</arglist>
    </member>
    <member kind="function">
      <type>const ForceSensor &amp;</type>
      <name>findBodyForceSensor</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a663bbb5cbdd28846262d23e2def39e83</anchor>
      <arglist>(const std::string &amp;body) const</arglist>
    </member>
    <member kind="function">
      <type>ForceSensor &amp;</type>
      <name>findSurfaceForceSensor</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a42d6eaf5f5a8bb51c29a400a29897d1d</anchor>
      <arglist>(const std::string &amp;surface)</arglist>
    </member>
    <member kind="function">
      <type>const ForceSensor &amp;</type>
      <name>findSurfaceForceSensor</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a2afa3baa0fc7aab41ca8e1670d4f13d3</anchor>
      <arglist>(const std::string &amp;surface) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; ForceSensor &gt; &amp;</type>
      <name>forceSensors</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>aa9ece4044d66c5fb62667f7dc91dd6d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; ForceSensor &gt; &amp;</type>
      <name>forceSensors</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>ad3fe91912f91e71eaff0a67af81b4ca0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasDevice</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>af183f29b2232cbc87cc8dc744f93424e</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSensor</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>ab011a5322c37711cf940653e7b814b50</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>device</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a4e3272e412d22bf6d382117300c9ee42</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>device</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a6cff71ca3ef36a1f5b5a945d6e70b64b</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>sensor</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>ac945ba1c44d9dfb2f2312d13c8ed24b4</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>sensor</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a72a8bd2c7daead0016449a6056fd2035</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDevice</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a1736b85ddedafef83111d6c67ff6f129</anchor>
      <arglist>(DevicePtr device)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSensor</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>abc302e460bc53880eb062681e9e50a54</anchor>
      <arglist>(SensorPtr sensor)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_solver::RobotEnvCollisionsConstraint</name>
    <filename>a02181.html</filename>
    <base>mc_solver::ConstraintSet</base>
    <member kind="function">
      <type></type>
      <name>RobotEnvCollisionsConstraint</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>a39287b8c789b11ede7208c03a199ca74</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, double timeStep)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEnvCollision</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>ae1da1cc998ffcad31638d384cd6e09c5</anchor>
      <arglist>(QPSolver &amp;solver, const std::string &amp;rBodyName, const std::string &amp;eBodyName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEnvCollisionByBody</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>a618ee70816991cf1c4911a4ce5631dc7</anchor>
      <arglist>(QPSolver &amp;solver, const std::string &amp;rBodyName, const std::string &amp;eBodyName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeSelfCollision</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>a1a2afa771fb34c646081db42ea78f549</anchor>
      <arglist>(QPSolver &amp;solver, const std::string &amp;body1Name, const std::string &amp;body2Name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addEnvCollision</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>afbce8ca7f72ce83dd61060a2b1526237</anchor>
      <arglist>(QPSolver &amp;solver, const mc_rbdyn::Collision &amp;col)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSelfCollision</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>abf0d85d3b3c319dc2482f67c05d22968</anchor>
      <arglist>(QPSolver &amp;solver, const mc_rbdyn::Collision &amp;col)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnvCollisions</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>aa8ec417a8fe966ff8fd516ee32c2e029</anchor>
      <arglist>(QPSolver &amp;solver, const std::vector&lt; mc_rbdyn::Contact &gt; &amp;contacts, const std::vector&lt; mc_rbdyn::Collision &gt; &amp;cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSelfCollisions</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>a7da0970955748569829288d534c7d6c4</anchor>
      <arglist>(QPSolver &amp;solver, const std::vector&lt; mc_rbdyn::Contact &gt; &amp;contacts, const std::vector&lt; mc_rbdyn::Collision &gt; &amp;cols)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addToSolver</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>a958e2813a9368f8e2628e367aac46449</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, tasks::qp::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeFromSolver</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>a1c44940f9826474f5b4c894c1014a610</anchor>
      <arglist>(tasks::qp::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="variable">
      <type>CollisionsConstraint</type>
      <name>selfCollConstrMng</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>af4e19d19f4f444ec1597600ea3fb43ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CollisionsConstraint</type>
      <name>envCollConstrMng</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>a8a12fce61aaa56f6d8d698ab7c925b6d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_rbdyn::RobotLoader</name>
    <filename>a01749.html</filename>
    <member kind="function" static="yes">
      <type>static mc_rbdyn::RobotModulePtr</type>
      <name>get_robot_module</name>
      <anchorfile>a01749.html</anchorfile>
      <anchor>ad660aedc7dbf7cd0cd0e60da5fffe4c2</anchor>
      <arglist>(const std::string &amp;name, const Args &amp;... args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>update_robot_module_path</name>
      <anchorfile>a01749.html</anchorfile>
      <anchor>a48f1ada05ff7db2152a00da892183c8b</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;paths)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>clear</name>
      <anchorfile>a01749.html</anchorfile>
      <anchor>a86f7b35ed2a4b3d37508f51aa2b29a38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>has_robot</name>
      <anchorfile>a01749.html</anchorfile>
      <anchor>a3edda7983edda591b3664eef5c450144</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>enable_sandboxing</name>
      <anchorfile>a01749.html</anchorfile>
      <anchor>a730c3f67a0bc12f73633c42b121b219e</anchor>
      <arglist>(bool enable_sandbox)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set_verbosity</name>
      <anchorfile>a01749.html</anchorfile>
      <anchor>a6126ced85ec52c8445755948d1060a6f</anchor>
      <arglist>(bool verbose)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::vector&lt; std::string &gt;</type>
      <name>available_robots</name>
      <anchorfile>a01749.html</anchorfile>
      <anchor>aae5fb8baa5acee06c3af0dd976808a2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load_aliases</name>
      <anchorfile>a01749.html</anchorfile>
      <anchor>a6286734468abc8c146eaad6902dbdd01</anchor>
      <arglist>(const std::string &amp;fname)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::RobotModule</name>
    <filename>a01761.html</filename>
    <class kind="struct">mc_rbdyn::RobotModule::Gripper</class>
    <member kind="typedef">
      <type>std::vector&lt; std::map&lt; std::string, std::vector&lt; double &gt; &gt;&gt;</type>
      <name>bounds_t</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a5b8304a1ea905fa0378a31dcf65b1460</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RobotModule</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>ae2153d9cef8cbcb7d0d87a0ac21ac5ad</anchor>
      <arglist>(const std::string &amp;path, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RobotModule</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>aeb69ff6b27d5a88ee2271aacf6b5e409</anchor>
      <arglist>(const std::string &amp;path, const std::string &amp;name, const std::string &amp;urdf_path)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RobotModule</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a21cf968dd81a9b554ce1001b8a2c6fb8</anchor>
      <arglist>(const std::string &amp;name, const rbd::parsers::ParserResult &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>MC_RTC_DEPRECATED</type>
      <name>RobotModule</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a0077211acf3f9d4c52aa43a23eb01943</anchor>
      <arglist>(const std::string &amp;name, const mc_rbdyn_urdf::URDFParserResult &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a33637f65346a81c078c9c04de9e4be0e</anchor>
      <arglist>(const rbd::parsers::ParserResult &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::map&lt; std::string, std::vector&lt; double &gt; &gt; &gt; &amp;</type>
      <name>bounds</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>ae05a5aab8f1a3edbecad4e4c7b29380d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; std::string, std::vector&lt; double &gt; &gt; &amp;</type>
      <name>stance</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>ae00ee36a0f17eaf23aadcb7643186fa4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; std::string, std::pair&lt; std::string, std::string &gt; &gt; &amp;</type>
      <name>convexHull</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>aea7c7858c175df032d33990e71ceb7ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; std::string, std::pair&lt; std::string, std::string &gt; &gt; &amp;</type>
      <name>stpbvHull</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a76b091f815bbbe008acd5f1923d680b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; std::string, sva::PTransformd &gt; &amp;</type>
      <name>collisionTransforms</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>acb767324196546f71a47674f8c23c1fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Flexibility &gt; &amp;</type>
      <name>flexibility</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a0f2e303e32aeb00e4928808dc3e0760a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; ForceSensor &gt; &amp;</type>
      <name>forceSensors</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a17aa1885f3db7c16c3e06b2525be82d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const BodySensorVector &amp;</type>
      <name>bodySensors</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a4edb2a975531bfb2935c0d7b25f8f677</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Springs &amp;</type>
      <name>springs</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a27c7e09fee38804af1f74e980e97c988</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; mc_rbdyn::Collision &gt; &amp;</type>
      <name>minimalSelfCollisions</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a540c068db94dc49566ccda2ed3825630</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; mc_rbdyn::Collision &gt; &amp;</type>
      <name>commonSelfCollisions</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>af32bd5d7ffb07565257d75f210467c8f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Gripper &gt; &amp;</type>
      <name>grippers</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a10f22df2fe618e1d7ee0db3edec87f72</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Gripper::Safety &amp;</type>
      <name>gripperSafety</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>ae7ae59c52568b7bee2919530e97631fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>ref_joint_order</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>ad9e8a1a1287fa07848d959d3b10b76c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::array&lt; double, 7 &gt; &amp;</type>
      <name>default_attitude</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a2b42e01d0245ff4d59a8d3b512f3682e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::lipm_stabilizer::StabilizerConfiguration &amp;</type>
      <name>defaultLIPMStabilizerConfiguration</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>aeb83ff8a992c97412321d4a5ed135177</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>boundsFromURDF</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a7cf89fa63c77693092f774540a00838a</anchor>
      <arglist>(const rbd::parsers::Limits &amp;limits)</arglist>
    </member>
    <member kind="function">
      <type>MC_RTC_DEPRECATED void</type>
      <name>boundsFromURDF</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a53377fc73020723d47b5af09b942cf0c</anchor>
      <arglist>(const mc_rbdyn_urdf::Limits &amp;limits)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expand_stance</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>aa6f2c53b2567e6fbd62f8694db311a9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>make_default_ref_joint_order</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a1e78a7743c7a0b1c9b32b1acd727565e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CompoundJointConstraintDescriptionVector &amp;</type>
      <name>compoundJoints</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a28b00d3621296be062c8545316171a89</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>parameters</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a8361592b3630831c0cb57d8bb86afceb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>real_urdf</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>aacf9d200189fd184ab6fe0b88cf16fdb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DevicePtrVector &amp;</type>
      <name>devices</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a3bbfe1ae62d9e98aa1bbbc1c518623f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>path</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a5de4bf236d1fa2f107fc27971009e979</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>ad888b6f335ade03b6628633d4a446bc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>urdf_path</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a7ba5a2868d56f57573de6baac60ce05f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>rsdf_dir</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a964a0cee9de236a3143a69e384fde6d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>calib_dir</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a2ce60a43b6c7fcf4df10d1777e5021bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>rbd::MultiBody</type>
      <name>mb</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>ab4acadd6d4c3d607b929be70f3ba94e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>rbd::MultiBodyConfig</type>
      <name>mbc</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>ae47568494c5eda60278ca824cabec3fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>rbd::MultiBodyGraph</type>
      <name>mbg</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a6f8d5e7c1d3c2df1113120dd61d6cef6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bounds_t</type>
      <name>_bounds</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>af19dd43ad8642aabc8c406e0972c5d65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; std::string, std::vector&lt; double &gt; &gt;</type>
      <name>_stance</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a82b20e5c4af771dd7778ea81e7fb0dcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; std::string, std::pair&lt; std::string, std::string &gt; &gt;</type>
      <name>_convexHull</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a65db2f156200c10f888f52bf12875e64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; std::string, std::pair&lt; std::string, std::string &gt; &gt;</type>
      <name>_stpbvHull</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a0a6e511b53b2be9ca1258dc7e39857ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VisualMap</type>
      <name>_visual</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a2cbb7d9c42ddcac022ccb2166381ec12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; std::string, sva::PTransformd &gt;</type>
      <name>_collisionTransforms</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a57b63a2f82b40741398b3a167b43592c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Flexibility &gt;</type>
      <name>_flexibility</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a664972f2b2163e90aab92a3903385b28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; ForceSensor &gt;</type>
      <name>_forceSensors</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a0c1a839a89c823bd31ca95f6caa371b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BodySensorVector</type>
      <name>_bodySensors</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a850abf7b9eb7e6ef1f3ca70fc495c6e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Springs</type>
      <name>_springs</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>ae5ef0e8c1b616ffae6dc46f704d8fd3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; mc_rbdyn::Collision &gt;</type>
      <name>_minimalSelfCollisions</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>ad23bb6df3b05cf0105ca6cfbfdb2ee9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; mc_rbdyn::Collision &gt;</type>
      <name>_commonSelfCollisions</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a064f95b0a8e134739d1f7ab194afe42f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Gripper &gt;</type>
      <name>_grippers</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>aff92408eda408fe95d5320918db67674</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Gripper::Safety</type>
      <name>_gripperSafety</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a58c75925a8766c6148fbb6a1385e61c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>_ref_joint_order</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>ae0d4fcfe71467be0aef41abe99458339</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::array&lt; double, 7 &gt;</type>
      <name>_default_attitude</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a1699dbd63835da199d52d232980c6b7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CompoundJointConstraintDescriptionVector</type>
      <name>_compoundJoints</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a0b4dd720e3b699b37947c3453a93e126</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>_parameters</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a0f8cfd4ca7e7772f68266003e7b8fc3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mc_rbdyn::lipm_stabilizer::StabilizerConfiguration</type>
      <name>_lipmStabilizerConfig</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a7da8429458a11c340c168aa0eade6694</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>_real_urdf</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a581c9d2efa5a52e3850b8858ac0b58c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DevicePtrVector</type>
      <name>_devices</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>ab6b79da885f0935ee568f416025466e0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_solver::RobotMsg</name>
    <filename>a02285.html</filename>
    <member kind="variable">
      <type>std::map&lt; std::string, std::vector&lt; double &gt; &gt;</type>
      <name>q</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a2266d5ca2aace35d45464180feda1768</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; std::string, std::vector&lt; double &gt; &gt;</type>
      <name>alphaVec</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>ab4e17120478e2a800aa790e32be96e84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::VectorXd</type>
      <name>alphaDVec</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a006a571037b605b0b5c9e749fac3e06c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::Robots</name>
    <filename>a01773.html</filename>
    <member kind="typedef">
      <type>mc_rbdyn::Robot</type>
      <name>value_type</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a857c321c4be0d8fa2443e4a8c2afaa27</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Robots</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a52932f4a6548f1b47f3e57423af136fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Robots</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a5e8b223f84189c50bf163d3648811422</anchor>
      <arglist>(const Robots &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Robots &amp;</type>
      <name>operator=</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a3090013b978cf1dd68e0b4ca5279cc18</anchor>
      <arglist>(const Robots &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; mc_rbdyn::RobotModule &gt; &amp;</type>
      <name>robotModules</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>adcd2485c334658f2c83b7f1e343963ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Robot &gt; &amp;</type>
      <name>robots</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a983b7d961886e155c660d77a71be0553</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Robot &gt; &amp;</type>
      <name>robots</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a8f9e3200bd791886a6e2742b3970a0da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; rbd::MultiBody &gt; &amp;</type>
      <name>mbs</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>adc4af4449c285c66835c5e511cd424d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; rbd::MultiBody &gt; &amp;</type>
      <name>mbs</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a968bbc1fc61e7a992a7759c8b920a72f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; rbd::MultiBodyConfig &gt; &amp;</type>
      <name>mbcs</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>aaa4805f358230c5c30680e14a1d036cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;</type>
      <name>mbcs</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>ad3cc8d1971325b497614377e6a6383b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasRobot</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a19ff172c4ffea776fc1d7d43c4b7c4ad</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>robotIndex</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a6b8424f1c2946197d3f2528a8fba02b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>envIndex</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a450727e6fa924ffe64088165bacac5ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>robotIndex</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a2c3772d82fdee696f58cb282a3658dfd</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const RobotModule &amp;</type>
      <name>robotModule</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a9369f09e1f26a46c62a0a0dab3f5a6f4</anchor>
      <arglist>(size_t idx) const</arglist>
    </member>
    <member kind="function">
      <type>Robot &amp;</type>
      <name>robot</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a570c3637d3567b90bfedb8156b4f8f87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Robot &amp;</type>
      <name>robot</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a1ad3d599f48c5ebf62add75a4da29ab9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Robot &amp;</type>
      <name>env</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a3fad514c57d731873b3d4395f58ced2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Robot &amp;</type>
      <name>env</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a8cfc417942dcc3a73ee5b9cfbbf862fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Robot &amp;</type>
      <name>robot</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a8756bc3dcfdd1d5fb0a9fda13322835b</anchor>
      <arglist>(size_t idx)</arglist>
    </member>
    <member kind="function">
      <type>const Robot &amp;</type>
      <name>robot</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a3e160f2c75f75740bcec75b3a2f2a881</anchor>
      <arglist>(size_t idx) const</arglist>
    </member>
    <member kind="function">
      <type>Robot &amp;</type>
      <name>robot</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>aebe182308c2902e6b5f5df2be921d6d1</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const Robot &amp;</type>
      <name>robot</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>aea26684de58321f309fc79f9c91d5161</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a0fe7360e8745aa349a770d489d5585ee</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>aa353ea3d25202a5870a7f65e503a1b2a</anchor>
      <arglist>(size_type new_cap)</arglist>
    </member>
    <member kind="function">
      <type>Robot &amp;</type>
      <name>load</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>aff5d4cb6dbea1f169c866ec6004793ee</anchor>
      <arglist>(const RobotModule &amp;module, sva::PTransformd *base=nullptr, const std::string &amp;bName=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a560aec7c6ac306acd1e9eb9e2048cb5e</anchor>
      <arglist>(const RobotModule &amp;module, const RobotModule &amp;envModule, sva::PTransformd *base=nullptr, const std::string &amp;bName=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>ae89485349d26868e40117fcaf670ddc4</anchor>
      <arglist>(const std::vector&lt; std::shared_ptr&lt; RobotModule &gt;&gt; &amp;modules)</arglist>
    </member>
    <member kind="function">
      <type>Robot &amp;</type>
      <name>loadFromUrdf</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>af75cbe7bed91ed0d48c5896a0f99aa71</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;urdf, bool withVirtualLinks=true, const std::vector&lt; std::string &gt; &amp;filteredLinks={}, bool fixed=false, sva::PTransformd *base=nullptr, const std::string &amp;baseName=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>robotCopy</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a2ee7fb2f2bdb6fcaefcbbdf62971a290</anchor>
      <arglist>(const Robot &amp;robot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createRobotWithBase</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a3882c33b607d637474ad14d7f6b540b7</anchor>
      <arglist>(Robots &amp;robots, unsigned int robots_idx, const Base &amp;base, const Eigen::Vector3d &amp;baseAxis=Eigen::Vector3d::UnitZ())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createRobotWithBase</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>abe0d347ac71a45399ef83b0417cd4204</anchor>
      <arglist>(Robot &amp;robot, const Base &amp;base, const Eigen::Vector3d &amp;baseAxis=Eigen::Vector3d::UnitZ())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeRobot</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a661cd23a4aec4c17e0c6edbbbecec720</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeRobot</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a344e4ad7f16f3d41dea30e93e5486087</anchor>
      <arglist>(unsigned int idx)</arglist>
    </member>
    <member kind="function">
      <type>MC_RTC_DEPRECATED Robot &amp;</type>
      <name>load</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>ad651f8e7c889ab9d32b932afaa0a1088</anchor>
      <arglist>(const RobotModule &amp;module, const std::string &amp;surfaceDir, sva::PTransformd *base=nullptr, const std::string &amp;bName=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>MC_RTC_DEPRECATED void</type>
      <name>load</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a5517d600a4bee40ca47150d2ec857865</anchor>
      <arglist>(const RobotModule &amp;module, const std::string &amp;surfaceDir, const RobotModule &amp;envModule, const std::string &amp;envSurfaceDir, sva::PTransformd *base=nullptr, const std::string &amp;baseName=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>MC_RTC_DEPRECATED void</type>
      <name>load</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>ae46599c49aa8ea2bd68be14c906ea215</anchor>
      <arglist>(const std::vector&lt; std::shared_ptr&lt; RobotModule &gt;&gt; &amp;modules, const std::vector&lt; std::string &gt; &amp;surfaceDirs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateIndexes</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a577b02e4a3e2384c60bfe983ad362448</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; mc_rbdyn::Robot &gt;::const_iterator</type>
      <name>getRobot</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>aabc7fbd508dd6967d445866f8966c131</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RobotModuleVector</type>
      <name>robot_modules_</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a393d65c7732ca980aaef77638076565a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; mc_rbdyn::Robot &gt;</type>
      <name>robots_</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>acc9294aa220cbbee47b28ec1322237b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; rbd::MultiBody &gt;</type>
      <name>mbs_</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a898afa6275886be6bd9ed57346d02cef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; rbd::MultiBodyConfig &gt;</type>
      <name>mbcs_</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>afa146e9e579f283e5bc64acc3fc40807</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; rbd::MultiBodyGraph &gt;</type>
      <name>mbgs_</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a6b3262231180412489be91286feae99d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>robotIndex_</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>ad61b4c8a27b1c5cf841bbeae8ae9cb8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>envIndex_</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>af035c10ad185cddd84fdd05611b88bae</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>Robot</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>ad03b49f51df2ba1d492ced03d923fdd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; mc_rbdyn::Robot &gt;::iterator</type>
      <name>iterator</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a5c5a80393f128789275bf1a722068ac9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; mc_rbdyn::Robot &gt;::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a2c367ec34b94d945c42020ed21dfe103</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; mc_rbdyn::Robot &gt;::reverse_iterator</type>
      <name>reverse_iterator</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a1869fe884d98ff31d558ae3fea4420db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; mc_rbdyn::Robot &gt;::const_reverse_iterator</type>
      <name>const_reverse_iterator</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>ad3db2fb8b4476c17f61b8e86c10bfeb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; mc_rbdyn::Robot &gt;::size_type</type>
      <name>size_type</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a264d2ce2a02a54afc9ecf14a06f0f268</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a8f2c4bc6ea6bb34ca3ef4e5d275662ca</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a09f6546226fbe07a290f4bcfcb33f264</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a4587be460f55daf6554325fde6c0b310</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a0230b7c453f04f0198b6a3ba5913d105</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a1921af851c0b4138dee79b1ebc17c52b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>af142da97b6512f79162efc33ace70e45</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>aa37c7715d7c713f0334363dd26452d38</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a2ed7a640a3cc1e1eda61613e89fd7486</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crbegin</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a8e4985f868d855ec5153a210fa22f555</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rend</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>aa05a25568265c5e17388f1c4e300d41e</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a02be61ed3972aeae42d94bbe242a839c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crend</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a54a0069d6ac9debe385ba1f1f311ee51</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Robot &amp;</type>
      <name>load</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>aff5d4cb6dbea1f169c866ec6004793ee</anchor>
      <arglist>(const RobotModule &amp;module, sva::PTransformd *base=nullptr, const std::string &amp;bName=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a560aec7c6ac306acd1e9eb9e2048cb5e</anchor>
      <arglist>(const RobotModule &amp;module, const RobotModule &amp;envModule, sva::PTransformd *base=nullptr, const std::string &amp;bName=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>ae89485349d26868e40117fcaf670ddc4</anchor>
      <arglist>(const std::vector&lt; std::shared_ptr&lt; RobotModule &gt;&gt; &amp;modules)</arglist>
    </member>
    <member kind="function">
      <type>Robot &amp;</type>
      <name>loadFromUrdf</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>af75cbe7bed91ed0d48c5896a0f99aa71</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;urdf, bool withVirtualLinks=true, const std::vector&lt; std::string &gt; &amp;filteredLinks={}, bool fixed=false, sva::PTransformd *base=nullptr, const std::string &amp;baseName=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>robotCopy</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a2ee7fb2f2bdb6fcaefcbbdf62971a290</anchor>
      <arglist>(const Robot &amp;robot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createRobotWithBase</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a3882c33b607d637474ad14d7f6b540b7</anchor>
      <arglist>(Robots &amp;robots, unsigned int robots_idx, const Base &amp;base, const Eigen::Vector3d &amp;baseAxis=Eigen::Vector3d::UnitZ())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createRobotWithBase</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>abe0d347ac71a45399ef83b0417cd4204</anchor>
      <arglist>(Robot &amp;robot, const Base &amp;base, const Eigen::Vector3d &amp;baseAxis=Eigen::Vector3d::UnitZ())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeRobot</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a661cd23a4aec4c17e0c6edbbbecec720</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeRobot</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a344e4ad7f16f3d41dea30e93e5486087</anchor>
      <arglist>(unsigned int idx)</arglist>
    </member>
    <member kind="function">
      <type>MC_RTC_DEPRECATED Robot &amp;</type>
      <name>load</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>ad651f8e7c889ab9d32b932afaa0a1088</anchor>
      <arglist>(const RobotModule &amp;module, const std::string &amp;surfaceDir, sva::PTransformd *base=nullptr, const std::string &amp;bName=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>MC_RTC_DEPRECATED void</type>
      <name>load</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a5517d600a4bee40ca47150d2ec857865</anchor>
      <arglist>(const RobotModule &amp;module, const std::string &amp;surfaceDir, const RobotModule &amp;envModule, const std::string &amp;envSurfaceDir, sva::PTransformd *base=nullptr, const std::string &amp;baseName=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>MC_RTC_DEPRECATED void</type>
      <name>load</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>ae46599c49aa8ea2bd68be14c906ea215</anchor>
      <arglist>(const std::vector&lt; std::shared_ptr&lt; RobotModule &gt;&gt; &amp;modules, const std::vector&lt; std::string &gt; &amp;surfaceDirs)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::RotationImpl</name>
    <filename>a02037.html</filename>
    <templarg>GetT</templarg>
    <templarg>SetT</templarg>
    <base>mc_rtc::gui::CommonInputImpl</base>
    <member kind="function">
      <type></type>
      <name>RotationImpl</name>
      <anchorfile>a02037.html</anchorfile>
      <anchor>a7661413981acb1ca272bd40dcbdfec76</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, SetT set_fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02037.html</anchorfile>
      <anchor>a5db74bd06e02788dcf943ecb1ba51267</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RotationImpl</name>
      <anchorfile>a02037.html</anchorfile>
      <anchor>ad38cdbde21b335061f261683a3540046</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>a02037.html</anchorfile>
      <anchor>a90964aa0cd30be5f543ca7a75433d17a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>a02037.html</anchorfile>
      <anchor>acc77cdef75bb1767eb3e80c2db36afc0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::RotationROImpl</name>
    <filename>a02033.html</filename>
    <templarg>GetT</templarg>
    <base>mc_rtc::gui::DataElement</base>
    <member kind="function">
      <type></type>
      <name>RotationROImpl</name>
      <anchorfile>a02033.html</anchorfile>
      <anchor>a09c1c750a2be23f5554b148d0bdc0355</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02033.html</anchorfile>
      <anchor>ac51a9c31ab21b7f4fab3c2888cc728a6</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RotationROImpl</name>
      <anchorfile>a02033.html</anchorfile>
      <anchor>a4fd7310d27046f65c062596a31abda2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>a02033.html</anchorfile>
      <anchor>afc5b2ee991da77eae0a2ef1623ca19c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>a02033.html</anchorfile>
      <anchor>aa295eb5ebba63beadb8f2d9f9348b0fa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::RobotModule::Gripper::Safety</name>
    <filename>a01769.html</filename>
    <member kind="function">
      <type></type>
      <name>Safety</name>
      <anchorfile>a01769.html</anchorfile>
      <anchor>a2b38f18523213a233bff74f28f1a40c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Safety</name>
      <anchorfile>a01769.html</anchorfile>
      <anchor>a8dd63f7c20eda1e3f4f891a8d4171095</anchor>
      <arglist>(double percentVMax, double actualCommandDiffTrigger=DEFAULT_ACTUAL_COMMAND_DIFF_TRIGGER, double releaseSafetyOffset=DEFAULT_RELEASE_OFFSET, unsigned int overCommandLimitIterN=DEFAULT_OVER_COMMAND_LIMIT_ITER_N)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>percentVMax</name>
      <anchorfile>a01769.html</anchorfile>
      <anchor>a8556afeb181b6a2f843c5d644591e1bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>actualCommandDiffTrigger</name>
      <anchorfile>a01769.html</anchorfile>
      <anchor>a2a4bf1ff512e79166cf636fe3b556965</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>releaseSafetyOffset</name>
      <anchorfile>a01769.html</anchorfile>
      <anchor>af60b48d54cac8b27249a3f0031b588cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>overCommandLimitIterN</name>
      <anchorfile>a01769.html</anchorfile>
      <anchor>abc220529be43405fe7ce241a436568ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>DEFAULT_PERCENT_VMAX</name>
      <anchorfile>a01769.html</anchorfile>
      <anchor>a504d3086fb274f2e70a80821e9fe11c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>DEFAULT_ACTUAL_COMMAND_DIFF_TRIGGER</name>
      <anchorfile>a01769.html</anchorfile>
      <anchor>a4d905fe3f8e145803a512c078408da2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>DEFAULT_RELEASE_OFFSET</name>
      <anchorfile>a01769.html</anchorfile>
      <anchor>a2d05528318c8cb3f09e7708fa7466d53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr unsigned int</type>
      <name>DEFAULT_OVER_COMMAND_LIMIT_ITER_N</name>
      <anchorfile>a01769.html</anchorfile>
      <anchor>a4c51f2971f6867bb737b48cfbe389169</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::SchemaImpl</name>
    <filename>a02041.html</filename>
    <templarg>Callback</templarg>
    <base>CallbackElement&lt; Element, Callback &gt;</base>
    <member kind="function">
      <type></type>
      <name>SchemaImpl</name>
      <anchorfile>a02041.html</anchorfile>
      <anchor>a3b43196dfda7475d0924cc29e2db22fb</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;schema, Callback cb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02041.html</anchorfile>
      <anchor>ac2fad63fbecf2126101c4bb4bfca5397</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>a02041.html</anchorfile>
      <anchor>ad53e00175461bd0bd4facd164cabf656</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>a02041.html</anchorfile>
      <anchor>a2e77582fcb4cdc8af5919f0d3f8ffa0d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_control::SimulationContactPair</name>
    <filename>a01513.html</filename>
    <member kind="function">
      <type></type>
      <name>SimulationContactPair</name>
      <anchorfile>a01513.html</anchorfile>
      <anchor>a074d699740f8b69b15c5fdbdde5519c0</anchor>
      <arglist>(const std::shared_ptr&lt; mc_rbdyn::Surface &gt; &amp;robotSurface, const std::shared_ptr&lt; mc_rbdyn::Surface &gt; &amp;envSurface)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>update</name>
      <anchorfile>a01513.html</anchorfile>
      <anchor>aeb88b53261805f73d79e348835e44c65</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;robot, const mc_rbdyn::Robot &amp;env)</arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; mc_rbdyn::Surface &gt;</type>
      <name>robotSurface</name>
      <anchorfile>a01513.html</anchorfile>
      <anchor>a6580a421bf730ccc06b9a3777d480466</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; mc_rbdyn::Surface &gt;</type>
      <name>envSurface</name>
      <anchorfile>a01513.html</anchorfile>
      <anchor>a2b50f1a3fa514431d9c5552bf88f0181</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; sch::S_Object &gt;</type>
      <name>robotSch</name>
      <anchorfile>a01513.html</anchorfile>
      <anchor>ac7198289925ffc6917bcdf14848bcde8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; sch::S_Object &gt;</type>
      <name>envSch</name>
      <anchorfile>a01513.html</anchorfile>
      <anchor>a4a31ea1a5854da861e8a4f1c827386d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sch::CD_Pair</type>
      <name>pair</name>
      <anchorfile>a01513.html</anchorfile>
      <anchor>a1b9a7de72470d0d2d433a7c3f9843ad0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_control::fsm::SlidingFootContactState</name>
    <filename>a01461.html</filename>
    <base>mc_control::fsm::State</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SlidingFootContactState</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>adc42e4c9f7e35e0b30319912ae2a93ae</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configure</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>af3760a5193d09c9fc906f5b5dd487109</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a04910ba585bee970e1d7da7de06a3f23</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a1ce5fc9378b92615e5ba504f5b8a5e4d</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>teardown</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a2c0f8dade39902329f9976df85f7329b</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="enumeration" protection="protected">
      <type></type>
      <name>Phase</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a28b4bbcf2a082a21bdb917678feda880</anchor>
      <arglist></arglist>
      <enumvalue file="a01461.html" anchor="a28b4bbcf2a082a21bdb917678feda880a80162f9ee0a84e0f098e9b827fb5085c">REACH_SUPPORT</enumvalue>
      <enumvalue file="a01461.html" anchor="a28b4bbcf2a082a21bdb917678feda880a61d108b143a6f57a082bd05773c31ed1">ADJUST_SLIDING_FORCE</enumvalue>
      <enumvalue file="a01461.html" anchor="a28b4bbcf2a082a21bdb917678feda880a3dd1569ff2a14e94284f1f9f4ee2c5f3">SLIDE_FOOT</enumvalue>
      <enumvalue file="a01461.html" anchor="a28b4bbcf2a082a21bdb917678feda880abd50bfdaa74e237144552ad497048642">BALANCE</enumvalue>
      <enumvalue file="a01461.html" anchor="a28b4bbcf2a082a21bdb917678feda880a6c27028730b6063884e319617236e7af">REGULATE_FOOT_ORIENTATION</enumvalue>
    </member>
    <member kind="function" protection="protected">
      <type>tasks::qp::ContactId</type>
      <name>getContactId</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a28aed7c86d4346359b961032b51e0616</anchor>
      <arglist>(Controller &amp;ctl, const std::string &amp;s)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setHandDofContact</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a77a96104208d2ebed5e8fbc4e4e57d62</anchor>
      <arglist>(Controller &amp;ctl)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>controlCoM</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>ace20faece4b3b0f4af3e7c09d9b5f7e1</anchor>
      <arglist>(Controller &amp;ctl)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>controlSlidingForce</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a0a863a4ea794a8aaeb32c8dae8b59a07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resetAndRestoreBalance</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a8a78b672e31cca06c0ac81768b50e4d3</anchor>
      <arglist>(Controller &amp;ctl)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>kinematic_</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a9e3b5656c9c6f645bd62bbf973546eb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>slidingSurface_</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a6b9672879e70a7220fc474ac8aec7d6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>supportSurface_</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a6b5b93da636466144e8c964dee5400f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>handSurface_</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>abcf340943b898e1ceccba165db81f07b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>slidingForceTarget_</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a79bca4acc0c153adf507709c39143275</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>supportForceTarget_</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a7ff906a2c7b36fa3316c2f8daadbb719</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>handForceTarget_</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>ae3c12a6f0b16e06ef63ec62b38fef760</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>tickSupport_</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a552c3ebf585edce583c25aa3243a5f35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>tickAdjust_</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>ada26f5e58e99ad85b69e3e423677db85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector2d</type>
      <name>move_</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a2539fcb9abf89be7b686e1fbfc41127a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>com_init_z_</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a3b849e2dc5e2e15cd6cd3daa25e87fd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>com_offset_</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>abc3ca39b3247340c6bb268c1a37ea0e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>com_offset_sliding_</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a078e5c2153c3f189e1a71c848bd82247</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>move_com_z_</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>adb65024ba60652e39f024bf416084223</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>rot_angle_</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a9b45b6ebec94b8502bfe6717ba09d19b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>wait_for_slide_trigger_</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a8b25d92b03812283e931182d1eee6c87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>slide_triggered_</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a665997b64f03654ec4c9575f339c11fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>next_</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a86d39e5463745584c5c42c467d1f1dff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; mc_tasks::CoMTask &gt;</type>
      <name>comTask_</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>ab6d4b0fcecc806087c717afbc93eb583</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; mc_tasks::force::CoPTask &gt;</type>
      <name>copHandTask_</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>afda5669e54ad14f6b81c7ef6c7c0381b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; mc_tasks::force::CoPTask &gt;</type>
      <name>copSlidingFootTask_</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a7c1b4a8a3223bf5ac6f6a8638ff38f85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; mc_tasks::force::CoPTask &gt;</type>
      <name>copSupportFootTask_</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>aa95d9e4bbf8ffb75a92bde4c6b9a81d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; mc_tasks::OrientationTask &gt;</type>
      <name>chestOriTask_</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a77c30eaae49a34dd505171a7a5b8a12f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; mc_tasks::RelativeEndEffectorTask &gt;</type>
      <name>lhRelEf_</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a8b7ae1f2d491a5ec0e1a3205196eeff5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; mc_tasks::RelativeEndEffectorTask &gt;</type>
      <name>rhRelEf_</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a5dcf62d573648894713cc580ecb34bd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mg_</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>ad20921ba34f910877289a3673482feb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>tasks::qp::ContactId</type>
      <name>slidingContactId_</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a13411646c587fdd4aa88d8a1b0cf4da3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Phase</type>
      <name>phase_</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a3fdec465c10879591e4ef2ce3e74c8dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>tick_</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a402ca0bb671aa0c11378e1153e60cf92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>forceDistChanged_</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a70f7cedb74095a3619f37ee71088bff7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>initial_com</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>aca2139273c699c55c684164f558d936e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>com_target0</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>ae5ddb84b899c5fcd09b93082ac7a775c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>com_sensor</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>ad539a0ce669c79cbb3469fae8f668e70</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::SmoothTask</name>
    <filename>a02445.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::function&lt; void(double)&gt;</type>
      <name>w_set_fn</name>
      <anchorfile>a02445.html</anchorfile>
      <anchor>ad0b3cad2b0a949faddd0259779446d7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; double(void)&gt;</type>
      <name>w_get_fn</name>
      <anchorfile>a02445.html</anchorfile>
      <anchor>a5a0447137eacf8f3c534ecc568b5aec1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(const objT &amp;)&gt;</type>
      <name>obj_set_fn</name>
      <anchorfile>a02445.html</anchorfile>
      <anchor>a5ea4109a61bfbaec12d0b0831c5b01cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; const objT(void)&gt;</type>
      <name>obj_get_fn</name>
      <anchorfile>a02445.html</anchorfile>
      <anchor>ad253e94eb032bbb85f32e85be175fe81</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SmoothTask</name>
      <anchorfile>a02445.html</anchorfile>
      <anchor>a9ceb8c25b164dea48c57db36aae1f788</anchor>
      <arglist>(w_set_fn w_set, w_get_fn w_get, obj_set_fn obj_set, obj_get_fn obj_get, double weight, const objT &amp;obj, double percent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02445.html</anchorfile>
      <anchor>a2615cd1f68019e4b4b8947c9271e2062</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a02445.html</anchorfile>
      <anchor>a739c37ff2c58b2b906fe1ac7eb08adbe</anchor>
      <arglist>(double weight, const objT &amp;obj, double percent)</arglist>
    </member>
    <member kind="variable">
      <type>w_set_fn</type>
      <name>w_set</name>
      <anchorfile>a02445.html</anchorfile>
      <anchor>ad8423422fde0f1394bc52751fe14dcfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>w_get_fn</type>
      <name>w_get</name>
      <anchorfile>a02445.html</anchorfile>
      <anchor>a0c30bbb84a3b062b0992c022f782ecfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>obj_set_fn</type>
      <name>obj_set</name>
      <anchorfile>a02445.html</anchorfile>
      <anchor>adee8384a9d270de1bc58484c584974d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>obj_get_fn</type>
      <name>obj_get</name>
      <anchorfile>a02445.html</anchorfile>
      <anchor>a1c18f13463da565c13cb7b7f27b6cbfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>weight</name>
      <anchorfile>a02445.html</anchorfile>
      <anchor>a5b8834e3bf77ffe9c7f4626dbc6c64c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>objT</type>
      <name>obj</name>
      <anchorfile>a02445.html</anchorfile>
      <anchor>a37bce28bfb36f35247f40e400fa1d33e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>stepW</name>
      <anchorfile>a02445.html</anchorfile>
      <anchor>a28924d882b21a72fe7998f0ed7ab9d6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>objT</type>
      <name>stepO</name>
      <anchorfile>a02445.html</anchorfile>
      <anchor>aade06f21c4fbdee53fc75491a02c7db4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>nrIter</name>
      <anchorfile>a02445.html</anchorfile>
      <anchor>a884b8bb76b6c9a855075927986d4b26f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>iter</name>
      <anchorfile>a02445.html</anchorfile>
      <anchor>a5477c67f01c202cf9a659558e71700ce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_trajectory::Spline</name>
    <filename>a02477.html</filename>
    <templarg>T</templarg>
    <templarg>WaypointsT</templarg>
    <member kind="function">
      <type></type>
      <name>Spline</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>afe26e8f1495983c2e3f9917b8ef20e76</anchor>
      <arglist>(double duration, const T &amp;start, const T &amp;target, const WaypointsT &amp;waypoints={})</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>waypoints</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>aa6f82c833829bc385839b1ec94542417</anchor>
      <arglist>(const WaypointsT &amp;waypoints)</arglist>
    </member>
    <member kind="function">
      <type>const WaypointsT &amp;</type>
      <name>waypoints</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a12881d75288abe5b0539601a7038fb02</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a8378e992bf3e1bbad575ce977e3f73ab</anchor>
      <arglist>(const T &amp;start)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>start</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a2ff62b0a83ab31052558810918ed950c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>target</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a45494f7a53e0aca7460a61422267a6e3</anchor>
      <arglist>(const T &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>target</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>ac9d0e0942c1fbfaeade4bc6350221f6e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>samplingPoints</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a65aa9924d2dffdf77e6b393514287aee</anchor>
      <arglist>(unsigned s)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>samplingPoints</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>ab65b7eb21021b049516c60e986a4ee88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a824b339123da0e9aa52b431aef4f768b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>duration_</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>ad1c51f62601c8adaf5e25ff4df9ce969</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>start_</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a161c31b1e093a1e57fc5671039efb942</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>target_</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a02ba52495ba023e463cd553403881343</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>WaypointsT</type>
      <name>waypoints_</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a0eccc7db9edfd9fe6691b380ae4b3f1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>samplingPoints_</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a1031ee75323cacfec14d8cde228a9684</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; T &gt;</type>
      <name>samples_</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a98f852018150c074fd1f367f8435dcb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>needsUpdate_</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a431372cc08984a2a6b37be089b90cbb8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Spline&lt; Eigen::Matrix3d, std::vector&lt; std::pair&lt; double, Eigen::Matrix3d &gt; &gt; &gt;</name>
    <filename>a02477.html</filename>
    <member kind="function">
      <type></type>
      <name>Spline</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>afe26e8f1495983c2e3f9917b8ef20e76</anchor>
      <arglist>(double duration, const Eigen::Matrix3d &amp;start, const Eigen::Matrix3d &amp;target, const std::vector&lt; std::pair&lt; double, Eigen::Matrix3d &gt; &gt; &amp;waypoints={})</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>waypoints</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>aa6f82c833829bc385839b1ec94542417</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; double, Eigen::Matrix3d &gt; &gt; &amp;waypoints)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::pair&lt; double, Eigen::Matrix3d &gt; &gt; &amp;</type>
      <name>waypoints</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a12881d75288abe5b0539601a7038fb02</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a8378e992bf3e1bbad575ce977e3f73ab</anchor>
      <arglist>(const Eigen::Matrix3d &amp;start)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Matrix3d &amp;</type>
      <name>start</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a2ff62b0a83ab31052558810918ed950c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>target</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a45494f7a53e0aca7460a61422267a6e3</anchor>
      <arglist>(const Eigen::Matrix3d &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Matrix3d &amp;</type>
      <name>target</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>ac9d0e0942c1fbfaeade4bc6350221f6e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>samplingPoints</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a65aa9924d2dffdf77e6b393514287aee</anchor>
      <arglist>(unsigned s)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>samplingPoints</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>ab65b7eb21021b049516c60e986a4ee88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a824b339123da0e9aa52b431aef4f768b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>duration_</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>ad1c51f62601c8adaf5e25ff4df9ce969</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Matrix3d</type>
      <name>start_</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a161c31b1e093a1e57fc5671039efb942</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Matrix3d</type>
      <name>target_</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a02ba52495ba023e463cd553403881343</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::pair&lt; double, Eigen::Matrix3d &gt; &gt;</type>
      <name>waypoints_</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a0eccc7db9edfd9fe6691b380ae4b3f1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>samplingPoints_</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a1031ee75323cacfec14d8cde228a9684</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Eigen::Matrix3d &gt;</type>
      <name>samples_</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a98f852018150c074fd1f367f8435dcb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>needsUpdate_</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a431372cc08984a2a6b37be089b90cbb8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Spline&lt; Eigen::Vector3d, std::vector&lt; Eigen::Vector3d &gt; &gt;</name>
    <filename>a02477.html</filename>
    <member kind="function">
      <type></type>
      <name>Spline</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>afe26e8f1495983c2e3f9917b8ef20e76</anchor>
      <arglist>(double duration, const Eigen::Vector3d &amp;start, const Eigen::Vector3d &amp;target, const std::vector&lt; Eigen::Vector3d &gt; &amp;waypoints={})</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>waypoints</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>aa6f82c833829bc385839b1ec94542417</anchor>
      <arglist>(const std::vector&lt; Eigen::Vector3d &gt; &amp;waypoints)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Eigen::Vector3d &gt; &amp;</type>
      <name>waypoints</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a12881d75288abe5b0539601a7038fb02</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a8378e992bf3e1bbad575ce977e3f73ab</anchor>
      <arglist>(const Eigen::Vector3d &amp;start)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>start</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a2ff62b0a83ab31052558810918ed950c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>target</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a45494f7a53e0aca7460a61422267a6e3</anchor>
      <arglist>(const Eigen::Vector3d &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>target</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>ac9d0e0942c1fbfaeade4bc6350221f6e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>samplingPoints</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a65aa9924d2dffdf77e6b393514287aee</anchor>
      <arglist>(unsigned s)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>samplingPoints</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>ab65b7eb21021b049516c60e986a4ee88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a824b339123da0e9aa52b431aef4f768b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>duration_</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>ad1c51f62601c8adaf5e25ff4df9ce969</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>start_</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a161c31b1e093a1e57fc5671039efb942</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>target_</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a02ba52495ba023e463cd553403881343</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Eigen::Vector3d &gt;</type>
      <name>waypoints_</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a0eccc7db9edfd9fe6691b380ae4b3f1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>samplingPoints_</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a1031ee75323cacfec14d8cde228a9684</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Eigen::Vector3d &gt;</type>
      <name>samples_</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a98f852018150c074fd1f367f8435dcb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>needsUpdate_</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a431372cc08984a2a6b37be089b90cbb8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Spline&lt; Eigen::Vector3d, std::vector&lt; std::pair&lt; double, Eigen::Vector3d &gt; &gt; &gt;</name>
    <filename>a02477.html</filename>
    <member kind="function">
      <type></type>
      <name>Spline</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>afe26e8f1495983c2e3f9917b8ef20e76</anchor>
      <arglist>(double duration, const Eigen::Vector3d &amp;start, const Eigen::Vector3d &amp;target, const std::vector&lt; std::pair&lt; double, Eigen::Vector3d &gt; &gt; &amp;waypoints={})</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>waypoints</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>aa6f82c833829bc385839b1ec94542417</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; double, Eigen::Vector3d &gt; &gt; &amp;waypoints)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::pair&lt; double, Eigen::Vector3d &gt; &gt; &amp;</type>
      <name>waypoints</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a12881d75288abe5b0539601a7038fb02</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a8378e992bf3e1bbad575ce977e3f73ab</anchor>
      <arglist>(const Eigen::Vector3d &amp;start)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>start</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a2ff62b0a83ab31052558810918ed950c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>target</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a45494f7a53e0aca7460a61422267a6e3</anchor>
      <arglist>(const Eigen::Vector3d &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>target</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>ac9d0e0942c1fbfaeade4bc6350221f6e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>samplingPoints</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a65aa9924d2dffdf77e6b393514287aee</anchor>
      <arglist>(unsigned s)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>samplingPoints</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>ab65b7eb21021b049516c60e986a4ee88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a824b339123da0e9aa52b431aef4f768b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>duration_</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>ad1c51f62601c8adaf5e25ff4df9ce969</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>start_</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a161c31b1e093a1e57fc5671039efb942</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>target_</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a02ba52495ba023e463cd553403881343</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::pair&lt; double, Eigen::Vector3d &gt; &gt;</type>
      <name>waypoints_</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a0eccc7db9edfd9fe6691b380ae4b3f1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>samplingPoints_</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a1031ee75323cacfec14d8cde228a9684</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Eigen::Vector3d &gt;</type>
      <name>samples_</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a98f852018150c074fd1f367f8435dcb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>needsUpdate_</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a431372cc08984a2a6b37be089b90cbb8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::SplineTrajectoryTask</name>
    <filename>a02449.html</filename>
    <templarg>Derived</templarg>
    <base>TrajectoryTaskGeneric&lt; tasks::qp::TransformTask &gt;</base>
    <member kind="typedef">
      <type>SplineTrajectoryTask&lt; Derived &gt;</type>
      <name>SplineTrajectoryBase</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a649052a5fbf326990d2b3d20ec66ab19</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TrajectoryTaskGeneric&lt; tasks::qp::TransformTask &gt;</type>
      <name>TrajectoryTask</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a8a14f83ca09f800540bae6ce5b29c376</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SplineTrajectoryTask</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a24faf75e67bb09033e53d780455257f2</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, const std::string &amp;surfaceName, double duration, double stiffness, double weight, const Eigen::Matrix3d &amp;target, const std::vector&lt; std::pair&lt; double, Eigen::Matrix3d &gt;&gt; &amp;oriWp={})</arglist>
    </member>
    <member kind="function">
      <type>std::function&lt; bool(const mc_tasks::MetaTask &amp;, std::string &amp;)&gt;</type>
      <name>buildCompletionCriteria</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a552e7c8b7ef80649a462476c30ef6cc6</anchor>
      <arglist>(double dt, const mc_rtc::Configuration &amp;config) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>oriWaypoints</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>ae50ea72643de837337187120c989c42b</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; double, Eigen::Matrix3d &gt;&gt; &amp;oriWp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dimWeight</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>aa8050ca9492c78eb14d0ab1750b90421</anchor>
      <arglist>(const Eigen::VectorXd &amp;dimW) override</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>dimWeight</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a501a30432b64fcb91f8cd5eeb1881d39</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>timeElapsed</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a0f4207fc91c4eedd0617759dd4c92ab8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>eval</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a46526962a3e24819c84aa77182abdb7f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Eigen::VectorXd</type>
      <name>evalTracking</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>ae456950d2eafdbc888d0a92b0d87f66a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>target</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a2f94ae2cfc7521582ffd1b5720bda580</anchor>
      <arglist>(const sva::PTransformd &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd</type>
      <name>target</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a8a915671172878e474be2514db659fb1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Eigen::Vector3d &gt;</type>
      <name>controlPoints</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a848034873f24f9e38dcc12d657e04741</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>displaySamples</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a49b467df085bf4289a5c90276be9e9d9</anchor>
      <arglist>(unsigned s)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>displaySamples</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>ab6c7b78884488afa4df3bc6e7db18353</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pause</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>aea7ce56cb05ec2f4fa98d4980e9cd356</anchor>
      <arglist>(bool paused)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pause</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a5f8841fa4606b3b4629f1e91933aaca8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>currentTime</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a86462d1e1779f47f938fb59feb6ad0e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>duration</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a68502aa9d2bc8e43c6a0ed79b7cc898f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>refPose</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a6d3a61eea75bf5fa5125564e9d5752e2</anchor>
      <arglist>(const sva::PTransformd &amp;pose)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const sva::PTransformd &amp;</type>
      <name>refPose</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a3b6ce55a9a60ddf211b8221be9507603</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>afa99dd9c136ee9039a844a4ffb814640</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;gui) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToSolver</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a95d2b8b64b8f57fd92bbe82f98a4ec8e</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToLogger</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>aa7147dba544550aa616caa164a40209a</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeFromLogger</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a415719c2bcc08727bbaa09b5c3172188</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a6b58c786b84e0d4f82f6e434589c0e80</anchor>
      <arglist>(mc_solver::QPSolver &amp;) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>rIndex_</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>ab5848b8fafba3f0791e5286718cce390</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>surfaceName_</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>abc56ce5c0be70edcccba265b5a94284c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>duration_</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a47c76bbfd6ed1275bfada4c8b238af4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_trajectory::InterpolatedRotation</type>
      <name>oriSpline_</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a99908fd6b6923222cd523025bd2e1c23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::pair&lt; double, Eigen::Matrix3d &gt; &gt;</type>
      <name>oriWp_</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a8bc85c80baae71fc2dcc41a577edb1d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>paused_</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>af5a5ee124caa955429dbe83416c8b8d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>currTime_</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a221a83c509eb1b24df8a96a6eb4ac7da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>timeStep_</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a2efc437fba8274cbbdc46fce7f9e6856</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>samples_</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a55ddc08175e2c18024ba3aba28c9caa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>inSolver_</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>ab58684bba10bad5cbcbe7414e04fb6f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SplineTrajectoryTask&lt; BSplineTrajectoryTask &gt;</name>
    <filename>a02449.html</filename>
    <base>TrajectoryTaskGeneric&lt; tasks::qp::TransformTask &gt;</base>
    <member kind="typedef">
      <type>SplineTrajectoryTask&lt; BSplineTrajectoryTask &gt;</type>
      <name>SplineTrajectoryBase</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a649052a5fbf326990d2b3d20ec66ab19</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TrajectoryTaskGeneric&lt; tasks::qp::TransformTask &gt;</type>
      <name>TrajectoryTask</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a8a14f83ca09f800540bae6ce5b29c376</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SplineTrajectoryTask</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a24faf75e67bb09033e53d780455257f2</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, const std::string &amp;surfaceName, double duration, double stiffness, double weight, const Eigen::Matrix3d &amp;target, const std::vector&lt; std::pair&lt; double, Eigen::Matrix3d &gt;&gt; &amp;oriWp={})</arglist>
    </member>
    <member kind="function">
      <type>std::function&lt; bool(const mc_tasks::MetaTask &amp;, std::string &amp;)&gt;</type>
      <name>buildCompletionCriteria</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a552e7c8b7ef80649a462476c30ef6cc6</anchor>
      <arglist>(double dt, const mc_rtc::Configuration &amp;config) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>oriWaypoints</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>ae50ea72643de837337187120c989c42b</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; double, Eigen::Matrix3d &gt;&gt; &amp;oriWp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dimWeight</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>aa8050ca9492c78eb14d0ab1750b90421</anchor>
      <arglist>(const Eigen::VectorXd &amp;dimW) override</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>dimWeight</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a501a30432b64fcb91f8cd5eeb1881d39</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>timeElapsed</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a0f4207fc91c4eedd0617759dd4c92ab8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>eval</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a46526962a3e24819c84aa77182abdb7f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Eigen::VectorXd</type>
      <name>evalTracking</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>ae456950d2eafdbc888d0a92b0d87f66a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>target</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a2f94ae2cfc7521582ffd1b5720bda580</anchor>
      <arglist>(const sva::PTransformd &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd</type>
      <name>target</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a8a915671172878e474be2514db659fb1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Eigen::Vector3d &gt;</type>
      <name>controlPoints</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a848034873f24f9e38dcc12d657e04741</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>displaySamples</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a49b467df085bf4289a5c90276be9e9d9</anchor>
      <arglist>(unsigned s)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>displaySamples</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>ab6c7b78884488afa4df3bc6e7db18353</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pause</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>aea7ce56cb05ec2f4fa98d4980e9cd356</anchor>
      <arglist>(bool paused)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pause</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a5f8841fa4606b3b4629f1e91933aaca8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>currentTime</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a86462d1e1779f47f938fb59feb6ad0e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>duration</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a68502aa9d2bc8e43c6a0ed79b7cc898f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>refPose</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a6d3a61eea75bf5fa5125564e9d5752e2</anchor>
      <arglist>(const sva::PTransformd &amp;pose)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const sva::PTransformd &amp;</type>
      <name>refPose</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a3b6ce55a9a60ddf211b8221be9507603</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>afa99dd9c136ee9039a844a4ffb814640</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;gui) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToSolver</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a95d2b8b64b8f57fd92bbe82f98a4ec8e</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToLogger</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>aa7147dba544550aa616caa164a40209a</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeFromLogger</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a415719c2bcc08727bbaa09b5c3172188</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a6b58c786b84e0d4f82f6e434589c0e80</anchor>
      <arglist>(mc_solver::QPSolver &amp;) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>rIndex_</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>ab5848b8fafba3f0791e5286718cce390</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>surfaceName_</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>abc56ce5c0be70edcccba265b5a94284c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>duration_</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a47c76bbfd6ed1275bfada4c8b238af4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_trajectory::InterpolatedRotation</type>
      <name>oriSpline_</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a99908fd6b6923222cd523025bd2e1c23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::pair&lt; double, Eigen::Matrix3d &gt; &gt;</type>
      <name>oriWp_</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a8bc85c80baae71fc2dcc41a577edb1d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>paused_</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>af5a5ee124caa955429dbe83416c8b8d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>currTime_</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a221a83c509eb1b24df8a96a6eb4ac7da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>timeStep_</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a2efc437fba8274cbbdc46fce7f9e6856</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>samples_</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a55ddc08175e2c18024ba3aba28c9caa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>inSolver_</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>ab58684bba10bad5cbcbe7414e04fb6f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SplineTrajectoryTask&lt; ExactCubicTrajectoryTask &gt;</name>
    <filename>a02449.html</filename>
    <base>TrajectoryTaskGeneric&lt; tasks::qp::TransformTask &gt;</base>
    <member kind="typedef">
      <type>SplineTrajectoryTask&lt; ExactCubicTrajectoryTask &gt;</type>
      <name>SplineTrajectoryBase</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a649052a5fbf326990d2b3d20ec66ab19</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TrajectoryTaskGeneric&lt; tasks::qp::TransformTask &gt;</type>
      <name>TrajectoryTask</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a8a14f83ca09f800540bae6ce5b29c376</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SplineTrajectoryTask</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a24faf75e67bb09033e53d780455257f2</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, const std::string &amp;surfaceName, double duration, double stiffness, double weight, const Eigen::Matrix3d &amp;target, const std::vector&lt; std::pair&lt; double, Eigen::Matrix3d &gt;&gt; &amp;oriWp={})</arglist>
    </member>
    <member kind="function">
      <type>std::function&lt; bool(const mc_tasks::MetaTask &amp;, std::string &amp;)&gt;</type>
      <name>buildCompletionCriteria</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a552e7c8b7ef80649a462476c30ef6cc6</anchor>
      <arglist>(double dt, const mc_rtc::Configuration &amp;config) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>oriWaypoints</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>ae50ea72643de837337187120c989c42b</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; double, Eigen::Matrix3d &gt;&gt; &amp;oriWp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dimWeight</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>aa8050ca9492c78eb14d0ab1750b90421</anchor>
      <arglist>(const Eigen::VectorXd &amp;dimW) override</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>dimWeight</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a501a30432b64fcb91f8cd5eeb1881d39</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>timeElapsed</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a0f4207fc91c4eedd0617759dd4c92ab8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>eval</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a46526962a3e24819c84aa77182abdb7f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Eigen::VectorXd</type>
      <name>evalTracking</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>ae456950d2eafdbc888d0a92b0d87f66a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>target</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a2f94ae2cfc7521582ffd1b5720bda580</anchor>
      <arglist>(const sva::PTransformd &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd</type>
      <name>target</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a8a915671172878e474be2514db659fb1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Eigen::Vector3d &gt;</type>
      <name>controlPoints</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a848034873f24f9e38dcc12d657e04741</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>displaySamples</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a49b467df085bf4289a5c90276be9e9d9</anchor>
      <arglist>(unsigned s)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>displaySamples</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>ab6c7b78884488afa4df3bc6e7db18353</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pause</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>aea7ce56cb05ec2f4fa98d4980e9cd356</anchor>
      <arglist>(bool paused)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pause</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a5f8841fa4606b3b4629f1e91933aaca8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>currentTime</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a86462d1e1779f47f938fb59feb6ad0e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>duration</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a68502aa9d2bc8e43c6a0ed79b7cc898f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>refPose</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a6d3a61eea75bf5fa5125564e9d5752e2</anchor>
      <arglist>(const sva::PTransformd &amp;pose)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const sva::PTransformd &amp;</type>
      <name>refPose</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a3b6ce55a9a60ddf211b8221be9507603</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>afa99dd9c136ee9039a844a4ffb814640</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;gui) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToSolver</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a95d2b8b64b8f57fd92bbe82f98a4ec8e</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToLogger</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>aa7147dba544550aa616caa164a40209a</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeFromLogger</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a415719c2bcc08727bbaa09b5c3172188</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a6b58c786b84e0d4f82f6e434589c0e80</anchor>
      <arglist>(mc_solver::QPSolver &amp;) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>rIndex_</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>ab5848b8fafba3f0791e5286718cce390</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>surfaceName_</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>abc56ce5c0be70edcccba265b5a94284c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>duration_</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a47c76bbfd6ed1275bfada4c8b238af4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_trajectory::InterpolatedRotation</type>
      <name>oriSpline_</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a99908fd6b6923222cd523025bd2e1c23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::pair&lt; double, Eigen::Matrix3d &gt; &gt;</type>
      <name>oriWp_</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a8bc85c80baae71fc2dcc41a577edb1d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>paused_</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>af5a5ee124caa955429dbe83416c8b8d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>currTime_</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a221a83c509eb1b24df8a96a6eb4ac7da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>timeStep_</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a2efc437fba8274cbbdc46fce7f9e6856</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>samples_</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a55ddc08175e2c18024ba3aba28c9caa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>inSolver_</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>ab58684bba10bad5cbcbe7414e04fb6f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::Springs</name>
    <filename>a01777.html</filename>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>springsBodies</name>
      <anchorfile>a01777.html</anchorfile>
      <anchor>a6c66bef3fc4e0dc969d0924fc01e028b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>afterSpringsBodies</name>
      <anchorfile>a01777.html</anchorfile>
      <anchor>abe9081480e52ed8822a43e5807407324</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::vector&lt; std::string &gt; &gt;</type>
      <name>springsJoints</name>
      <anchorfile>a01777.html</anchorfile>
      <anchor>acb0fbbe6da7929023e50ef5f4a3471d4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::lipm_stabilizer::StabilizerConfiguration</name>
    <filename>a01693.html</filename>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>ad62077263c1af6f677dd4645b663eb8e</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>mc_rtc::Configuration</type>
      <name>save</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>afb389e9e183efdcad0db023e57383b98</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>EIGEN_MAKE_ALIGNED_OPERATOR_NEW FDQPWeights</type>
      <name>fdqpWeights</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>a39b284b68673264191221eca6778d189</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>friction</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>a2711f393aa208d546265f1ccdaa4f927</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>leftFootSurface</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>a30cc86b398c8b84bb07fd032e35d76e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>rightFootSurface</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>ac0c774614c0a1f30b19d139295f48c89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::Vector2d</type>
      <name>copAdmittance</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>af5eb02096ad548196e57cd8a5aad7a32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sva::MotionVecd</type>
      <name>copMaxVel</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>a254b96dec351e68787a55ac10130c6d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ZMPCCConfiguration</type>
      <name>zmpcc</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>a7202444717b6eb8868bf2478e45901b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>dfzAdmittance</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>ad3f20459a99d3de2b16e882b592bffbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>dfzDamping</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>ac97586a249bbe2430e958b9fa1e7f7d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>dcmPropGain</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>aaae1753ce0d0a7154330565e0788ffb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>dcmIntegralGain</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>a26e250e0c089b2808642057977c2af01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>dcmDerivGain</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>a1a17a20ec9324108f9313e97cc7f5910</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>dcmIntegratorTimeConstant</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>a6cf18b92b08365adf4dfdbdbb041d5c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>dcmDerivatorTimeConstant</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>ae59b68251ee3fe90880e6da86212c935</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>comActiveJoints</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>af0f590199c5cb9ba6aa7b25f56447811</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::Vector3d</type>
      <name>comStiffness</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>abaec169e8fcf147bf63785088fd3c896</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>comWeight</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>abd7dd049c8ac626404fc3af328f09a85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>comHeight</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>abd54fe3cf92a100a19f0a5bf408272d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>torsoBodyName</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>abaf5f231ddd92e45c3947448560a43ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>torsoPitch</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>a4342762c90bd3857760f991d3424cf47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>torsoStiffness</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>a4c91236b2c0d11ebfe65ab78668a873a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>torsoWeight</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>a6ea68278767553d037dba6b104327cdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>pelvisStiffness</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>a42b1aa4d6be73c7a9986292e8ca1e3e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>pelvisWeight</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>a8bc2c7d4a6964408929e7b23ff63667c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sva::MotionVecd</type>
      <name>contactDamping</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>a5d438686041a3aedaf93629936510ed8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sva::MotionVecd</type>
      <name>contactStiffness</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>a9e3bade64b2388a1ceb550b86699f594</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>contactWeight</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>ac682b8740dbc4d8f1af7ec01a3d9062b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>vdcFrequency</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>a0b4dc848ffc84548ed88a2c6059ff5de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>vdcStiffness</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>a34a4b63e93b00c661f926721e284f3e9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_control::fsm::StabilizerStandingState</name>
    <filename>a01465.html</filename>
    <base>mc_control::fsm::State</base>
    <member kind="function">
      <type>void</type>
      <name>configure</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>a4ae65ee8eda22d7e926e2d9aecbbbfb8</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>a6e8df7ef63d968bdfe366e5c12d224e7</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>a57fdd73a5287a112295a179b3dc3a834</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>teardown</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>a398141d42554616c96b06784c46e1c1e</anchor>
      <arglist>(Controller &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>targetCoP</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>a174cd1cafc870e7251577d1057ec340f</anchor>
      <arglist>(const Eigen::Vector3d &amp;cop)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>targetCoM</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>af2dcb13246f2146455596c75fa75eb62</anchor>
      <arglist>(const Eigen::Vector3d &amp;com)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>copHeight</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>af13d0e8b9e94acd0cfc3e6a7a42516ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; mc_tasks::lipm_stabilizer::StabilizerTask &gt;</type>
      <name>stabilizerTask_</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>ac1b5a6462db239740800b703e5ef6d38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rtc::Configuration</type>
      <name>config_</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>aa6c74bc9e24d8446290e7f48820019bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>hasCompletion_</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>aefa6ecfbc94489eec5d0cac0ae5b82ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>dcmThreshold_</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>a5bf7aa7e62f87ec4ab70e7fdfc9fb656</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_planning::Pendulum</type>
      <name>pendulum_</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>ab540aeb0263d7368a8f0f28c6cf8db01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>K_</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>a21831be19e200ffe66e41d74e496dcda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>D_</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>aa3d152c14ec40bfb43fbd96c46335d8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>comHeight_</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>aef9d57338a8967af8f645abde17fe235</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>comTarget_</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>aec95cfe1bf344ed978a0f427916c457c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>copTarget_</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>a7d628fb75354ff6eed63d59a49677694</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>optionalGUI_</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>a9d66966f079f819c302800335ed8aeaa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::lipm_stabilizer::StabilizerTask</name>
    <filename>a02393.html</filename>
    <base>mc_tasks::MetaTask</base>
    <class kind="struct">mc_tasks::lipm_stabilizer::StabilizerTask::EnumClassHash</class>
    <member kind="function">
      <type></type>
      <name>StabilizerTask</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>afe79a5d39b9aaf14d33026354d81280d</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, const mc_rbdyn::Robots &amp;realRobots, unsigned int robotIndex, const std::string &amp;leftSurface, const std::string &amp;rightSurface, const std::string &amp;torsoBodyName, double dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a65b51a83fbd47db891199fdafdc50220</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>eval</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>ada370921b62caa185b6eaeaa9638cd06</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>speed</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a291e8bd69f054b3cce5117e721356185</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a04089abb785bdade64b4c8309c33c4c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disable</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a45f17fc7c444f8a9ccaebaf287574108</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configure</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a92ca7d350b4d444eaf183ea61e4c8491</anchor>
      <arglist>(const mc_rbdyn::lipm_stabilizer::StabilizerConfiguration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commitConfig</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a6e994881ac1a1355243361b1a280ab12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>aea4976e383f665df47a0396b85a2db32</anchor>
      <arglist>(mc_solver::QPSolver &amp;, const mc_rtc::Configuration &amp;config) override</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::lipm_stabilizer::StabilizerConfiguration &amp;</type>
      <name>config</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>aa65a9b2c018ada2906213964b9c15248</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const mc_rbdyn::lipm_stabilizer::StabilizerConfiguration &amp;</type>
      <name>commitedConfig</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a64ccf8d3b99e44891b58df7df76c296f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reconfigure</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a9c93d88492cb1541133d83c8072be280</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a834eb99d2717aacb38b5eee307bd0773</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContacts</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a91e33c4eb45fcea0a744aeb63accb306</anchor>
      <arglist>(const ContactDescriptionVector &amp;contacts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContacts</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a694edac11eca809a1faaafed3971cbca</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; ContactState, sva::PTransformd &gt;&gt; &amp;contacts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContacts</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a2284666da172e5bc40f90525f800a0c0</anchor>
      <arglist>(const std::vector&lt; ContactState &gt; &amp;contacts)</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>contactAnklePose</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a18cf3bbe16d6f31b76fb67a4db7bf216</anchor>
      <arglist>(ContactState s) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>footSurface</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a4f59f1f61174faf255e2fd32e61a72fa</anchor>
      <arglist>(ContactState s) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>leftFootRatio</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>aad11d62616938f7b665640ee5dbf0dc7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sva::PTransformd</type>
      <name>anchorFrame</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>ab4e37b7fc5368d0727c18cbca19cebc0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sva::PTransformd</type>
      <name>anchorFrameReal</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>af8bf27488a2f076443dce128a71d8fe1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>staticTarget</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>aeca8ec3501161284eebe42d34b7433d3</anchor>
      <arglist>(const Eigen::Vector3d &amp;com, double zmpHeight=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>target</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>acbe9f9871a4c131a6c2176eeaf0a5dc4</anchor>
      <arglist>(const Eigen::Vector3d &amp;com, const Eigen::Vector3d &amp;comd, const Eigen::Vector3d &amp;comdd, const Eigen::Vector3d &amp;zmp)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>measuredDCM</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a8701a57a809d6623b80306bd6cc9609a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>measuredZMP</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a52698baf31cd96e73a65d30009db86ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>measuredCoM</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a297f2b26b3156ed4ebae0ee789b89a8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>measuredCoMd</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a0b4613e8df107c406a9b434c06b9b27a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inContact</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a93b9dbba22bc61bcba9c36af64167b0e</anchor>
      <arglist>(ContactState state) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inDoubleSupport</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>ae33cd7a56736b6d070f229493ba14ed5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static EIGEN_MAKE_ALIGNED_OPERATOR_NEW constexpr double</type>
      <name>MAX_AVERAGE_DCM_ERROR</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a536b0c459e134eb9f65b5688d20437a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>MAX_COP_ADMITTANCE</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>afeaae9007994ca1a28123f130ac40a62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>MAX_DCM_D_GAIN</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>afd042284edded71ef5a11fa3338cd474</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>MAX_DCM_I_GAIN</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>ab4e24167d33878c916253d40cdb35df8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>MAX_DCM_P_GAIN</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>accb3d0657c3d76b48410d17e70ba8e66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>MAX_DFZ_ADMITTANCE</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>ac3b0b19db008d81607d673433e888e61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>MAX_DFZ_DAMPING</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>abe1f288c9f4f825a150cb952ca56d02a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>MAX_FDC_RX_VEL</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a5d9aa68a658b6c84416e7aa2603f07dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>MAX_FDC_RY_VEL</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>ab2e64e0d5c2fba868860809414d228c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>MAX_FDC_RZ_VEL</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a254e6d570a19e2fc9c6e0b55f1c40e34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>MIN_DS_PRESSURE</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a9645bcc1b8e2296b6b060c2285b5eb6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>MIN_NET_TOTAL_FORCE_ZMP</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>aeba1f1684be4d513d2140d25b908a20d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToSolver</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>ac7709c43f16a9b418ecf2619d69821a6</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeFromSolver</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a1bef48c5f1f58cf958f55c9fb2c9e6e1</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeFromGUI</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a47f242d0db7ed96a17dc3aea2726c473</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a5015b2c830f229580727098d7b769d1d</anchor>
      <arglist>(mc_solver::QPSolver &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToLogger</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a0806e753efb5d4a75ea474d775ccadf4</anchor>
      <arglist>(mc_rtc::Logger &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeFromLogger</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a18352e8c8269aabbd125f8d49a9c5b2f</anchor>
      <arglist>(mc_rtc::Logger &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a50bd7771e0e45cd45b507af97b285544</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const mc_rbdyn::Robot &amp;</type>
      <name>robot</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>aa5456b94e95138e35e7e5738de51512a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const mc_rbdyn::Robot &amp;</type>
      <name>realRobot</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a3ad771c0db927eff99269276ef551e86</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>configure_</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a19464c74ed88aa569d1b0a3a5f4c505b</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; ContactState, internal::Contact, EnumClassHash, std::equal_to&lt; ContactState &gt;, Eigen::aligned_allocator&lt; std::pair&lt; const ContactState, internal::Contact &gt; &gt; &gt;</type>
      <name>contacts_</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>ac03c45acb87ced70cf86b77ac9bd20ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ContactState &gt;</type>
      <name>addContacts_</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>af0aa6726e77f2dc1d7f371980426fdef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; ContactState, std::shared_ptr&lt; mc_tasks::force::CoPTask &gt;, EnumClassHash &gt;</type>
      <name>footTasks</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a7c3405e9317cfb1104b0b18658ef3b43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::shared_ptr&lt; mc_tasks::force::CoPTask &gt; &gt;</type>
      <name>contactTasks</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>ac619cfcd7785d886845a724f361f8e71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::vector&lt; Eigen::Vector3d &gt; &gt;</type>
      <name>supportPolygons_</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>ad55b59e574799dcf11bc7598b8a6cea9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector2d</type>
      <name>supportMin_</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a37b5b7e6f2acd693711f6b1e8c7310db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector2d</type>
      <name>supportMax_</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>ae1133e256a909367f839ecef2528c7be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; mc_tasks::CoMTask &gt;</type>
      <name>comTask</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a0878448d283b4e2aa4a0dae3aff044cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; mc_tasks::OrientationTask &gt;</type>
      <name>pelvisTask</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a6476ed836d208897809eb8eb5e404689</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; mc_tasks::OrientationTask &gt;</type>
      <name>torsoTask</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a207abdb63fcc13968352a6c7fffd47fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const mc_rbdyn::Robots &amp;</type>
      <name>robots_</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>ac252cd1d8af9703038aa40b61c0686ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const mc_rbdyn::Robots &amp;</type>
      <name>realRobots_</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a01584b7cc75fc92846251632bec2e835</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>robotIndex_</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a23a5f961e6993f20ebe16f246736e1cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>comTarget_</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>af6f2964c1be8b168193c80636bc0b583</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>comdTarget_</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>aa3aac681a66c5968dde54b17f47d27fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>comddTarget_</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a1a9150a5ae2456a5943fef824a02febf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>zmpTarget_</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>aae15134e2c9dad716a90a85d146969e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>dcmTarget_</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>af0234fd0ce9a193f6a591b70f29448db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>omega_</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a9eccc2bdf062ef36fc1f2647bc87f6d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>t_</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a4da2c074568197514ca356b776540601</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rbdyn::lipm_stabilizer::StabilizerConfiguration</type>
      <name>defaultConfig_</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a3f8e78508d61b22ab56478c951d55245</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rbdyn::lipm_stabilizer::StabilizerConfiguration</type>
      <name>lastConfig_</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a84f489e1db3b2a021d02ddd6c5b074b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rbdyn::lipm_stabilizer::StabilizerConfiguration</type>
      <name>c_</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>ae5cb6dea903cd77c34f1f30f7ab8e754</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>reconfigure_</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a39e9122dda239e200cec4a503d02cb4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>enabled_</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a604de2ee35e031d51bfe6c637e53ec3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::QuadProgDense</type>
      <name>qpSolver_</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a017bc4102822276a88a60ae683c46627</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>dcmAverageError_</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>aa588b56d52973ccad6a81e719f669614</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>dcmError_</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>ae1f0f546550766ef228fc687e556c8eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>dcmVelError_</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a488812c1669547a3b416bc203026832c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>measuredCoM_</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a5ba652e24e17842a3a0e7d00157a0416</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>measuredCoMd_</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>aa44333b1b7aa2db2ae3f82162fe00536</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>measuredZMP_</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a6863d425eff4e098af4abc8a38ee2326</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>measuredDCM_</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a0b4b1c28b4e34a2f4c4600b4f2ec2245</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::ForceVecd</type>
      <name>measuredNetWrench_</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a1d3d079514e89bcafe3d35b1ea2c1018</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>zmpccOnlyDS_</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>aafe66416fe947aab7f6de7cd369df88f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ZMPCC</type>
      <name>zmpcc_</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a0e3c1c45795642a29285fa96ef46808f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_filter::ExponentialMovingAverage&lt; Eigen::Vector3d &gt;</type>
      <name>dcmIntegrator_</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>abe50c92ded00ad8f22e9da9433dee655</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_filter::StationaryOffset&lt; Eigen::Vector3d &gt;</type>
      <name>dcmDerivator_</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a0238d047704d0cdaca32fe09153e4688</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>inTheAir_</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a22569ac33f8c0e99bb674520373c41c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>dfzForceError_</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a29892a01046ffddb485441466a5dfbe0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>dfzHeightError_</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>aac424f24910f5856c99a44c359865dc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>dt_</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a78355a7b3bb963abe0bc160f0d51bcb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>leftFootRatio_</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a077f98071aa5d9ae2b861aba4edbc606</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mass_</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>aadea2267fb6365e262900d3da4e40d98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>runTime_</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a1c5ff776bf36beaee2182776ba4feca0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>vdcHeightError_</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>ab459d6ba167857323daefe6a3fbef750</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::ForceVecd</type>
      <name>distribWrench_</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>acea47979a383c106e0eedc05a02e52bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>sensorNames_</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>ae6ca6cea95b8b7489553d88bf9e4d4e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sva::PTransformd</type>
      <name>zmpFrame_</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>aeca99cf5f7b08a8d39bc3a7045d2e46d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_control::fsm::State</name>
    <filename>a01413.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~State</name>
      <anchorfile>a01413.html</anchorfile>
      <anchor>a361292f4c1af52fb11fb081142832e06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configure_</name>
      <anchorfile>a01413.html</anchorfile>
      <anchor>a32a8ea03359d52b9c7b096c3b9c6a890</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start_</name>
      <anchorfile>a01413.html</anchorfile>
      <anchor>acb573a0d4be2001f1e6820d9d75d3a94</anchor>
      <arglist>(Controller &amp;ctl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>teardown_</name>
      <anchorfile>a01413.html</anchorfile>
      <anchor>a70d93ac4ef5012911b48890e8108141f</anchor>
      <arglist>(Controller &amp;ctl)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>run</name>
      <anchorfile>a01413.html</anchorfile>
      <anchor>a88b6bae6fed3e5b9897bcab3feb27621</anchor>
      <arglist>(Controller &amp;ctl)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>stop</name>
      <anchorfile>a01413.html</anchorfile>
      <anchor>a8a7a9e7bb388af127cf54b748c01c069</anchor>
      <arglist>(Controller &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read_msg</name>
      <anchorfile>a01413.html</anchorfile>
      <anchor>a282c4e94aea17f84229e16f2496560df</anchor>
      <arglist>(std::string &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read_write_msg</name>
      <anchorfile>a01413.html</anchorfile>
      <anchor>a870b4c681a830419af9f482d1891893f</anchor>
      <arglist>(std::string &amp;, std::string &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>output</name>
      <anchorfile>a01413.html</anchorfile>
      <anchor>a0a94b4c21887b3bc710d040a31c5a2dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>name</name>
      <anchorfile>a01413.html</anchorfile>
      <anchor>a6a5b441d6b4c08f462903b243484e02e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>name</name>
      <anchorfile>a01413.html</anchorfile>
      <anchor>af62e0496fbbe60350808ba3cfe574fd1</anchor>
      <arglist>(const std::string &amp;n)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>output</name>
      <anchorfile>a01413.html</anchorfile>
      <anchor>a1e115a009309410f0eadabf118a6fb49</anchor>
      <arglist>(const std::string &amp;o)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>configure</name>
      <anchorfile>a01413.html</anchorfile>
      <anchor>a8eb8bdd1c15a9dc5f5aed402e4dc885d</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>a01413.html</anchorfile>
      <anchor>aabbb5ad8636a504d50d0fe5a6b4b6267</anchor>
      <arglist>(Controller &amp;ctl)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>teardown</name>
      <anchorfile>a01413.html</anchorfile>
      <anchor>a0feca48f8402f89d6e453d7739b7dab3</anchor>
      <arglist>(Controller &amp;ctl)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rtc::Configuration</type>
      <name>add_contacts_config_</name>
      <anchorfile>a01413.html</anchorfile>
      <anchor>ad5e8acab9275900efb0a32ffaf155bed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rtc::Configuration</type>
      <name>remove_contacts_config_</name>
      <anchorfile>a01413.html</anchorfile>
      <anchor>a902a5522347fbb8aa78872ae4ee0042c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rtc::Configuration</type>
      <name>add_contacts_after_config_</name>
      <anchorfile>a01413.html</anchorfile>
      <anchor>a57c8d5de04fd74feef0699a82a72123f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rtc::Configuration</type>
      <name>remove_contacts_after_config_</name>
      <anchorfile>a01413.html</anchorfile>
      <anchor>a68a4a86a3ee1b873a53add96ead9c064</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rtc::Configuration</type>
      <name>add_collisions_config_</name>
      <anchorfile>a01413.html</anchorfile>
      <anchor>a6f84b8e24821763df3524fa551df0875</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rtc::Configuration</type>
      <name>remove_collisions_config_</name>
      <anchorfile>a01413.html</anchorfile>
      <anchor>abb0a79ae8a940e3138f9bbce2a508b60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rtc::Configuration</type>
      <name>add_collisions_after_config_</name>
      <anchorfile>a01413.html</anchorfile>
      <anchor>ac82605212b9b9341bebc091bd24922d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_rtc::Configuration</type>
      <name>remove_collisions_after_config_</name>
      <anchorfile>a01413.html</anchorfile>
      <anchor>a0b2e5163abce708367767793befab639</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>remove_posture_task_</name>
      <anchorfile>a01413.html</anchorfile>
      <anchor>a0a086f5c210f8149fc3cc6627bd2dd74</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_planning::linear_control_system::LinearTimeVariantInvertedPendulum::State</name>
    <filename>a01589.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>cog_pos</name>
      <anchorfile>a01589.html</anchorfile>
      <anchor>a43181cc4182888bc3c914534e882e45d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>cog_vel</name>
      <anchorfile>a01589.html</anchorfile>
      <anchor>ad4633c96c23a4ff2b763d33d1142462b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>cog_acc</name>
      <anchorfile>a01589.html</anchorfile>
      <anchor>a8d3c98cb8a5aad30e315a29a85fe26ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>p</name>
      <anchorfile>a01589.html</anchorfile>
      <anchor>a61dcd3e2b8ba4c1c80da38d4d9ba75a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>pdot</name>
      <anchorfile>a01589.html</anchorfile>
      <anchor>a52c4c505efd51e9eac5b70b436c0fadd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::StateBuilder</name>
    <filename>a02045.html</filename>
    <member kind="function">
      <type></type>
      <name>StateBuilder</name>
      <anchorfile>a02045.html</anchorfile>
      <anchor>a3aa8133f132bbcedc5520b0b69ee7e89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addElement</name>
      <anchorfile>a02045.html</anchorfile>
      <anchor>aed8f9f487c0f4c2eb629bccfdf262bd0</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;category, T element)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addElement</name>
      <anchorfile>a02045.html</anchorfile>
      <anchor>a34dca1ccbd1c170433f4265d4952d89c</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;category, T element, Args... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addElement</name>
      <anchorfile>a02045.html</anchorfile>
      <anchor>a46ae231a115404bd810b7d3c3477d048</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;category, ElementsStacking stacking, T element)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addElement</name>
      <anchorfile>a02045.html</anchorfile>
      <anchor>a78762a4504185f92715143948ddd37e5</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;category, ElementsStacking stacking, T element, Args... args)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasElement</name>
      <anchorfile>a02045.html</anchorfile>
      <anchor>a24c22667330cfd452b165afeff3979d0</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;category, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a02045.html</anchorfile>
      <anchor>a6668b50fa6ceaf6beaa730f401ab553c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeCategory</name>
      <anchorfile>a02045.html</anchorfile>
      <anchor>a3c57321e693a7631a5f06800817bbe5d</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;category)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeElement</name>
      <anchorfile>a02045.html</anchorfile>
      <anchor>a1b626d1b71f63fe2741232e8e3881db8</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;category, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addXYPlot</name>
      <anchorfile>a02045.html</anchorfile>
      <anchor>a400d3e9949fb4856b4e37ea8b9904210</anchor>
      <arglist>(const std::string &amp;name, plot::AxisConfiguration xConfig, plot::AxisConfiguration yLeftConfig, plot::AxisConfiguration yRightConfig, T data, Args... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addXYPlot</name>
      <anchorfile>a02045.html</anchorfile>
      <anchor>a1b1094572270ec977ddbe805dd4a85b4</anchor>
      <arglist>(const std::string &amp;name, plot::AxisConfiguration xConfig, plot::AxisConfiguration yLeftConfig, T data, Args... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addXYPlot</name>
      <anchorfile>a02045.html</anchorfile>
      <anchor>a0bb64442811706a8b932a6c5c53c39d0</anchor>
      <arglist>(const std::string &amp;name, plot::AxisConfiguration xConfig, T data, Args... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addXYPlot</name>
      <anchorfile>a02045.html</anchorfile>
      <anchor>a5244426886f56ab4589d19c9a237f488</anchor>
      <arglist>(const std::string &amp;name, T data, Args... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPlot</name>
      <anchorfile>a02045.html</anchorfile>
      <anchor>a6416827891d83ecc4f45db66072c59a4</anchor>
      <arglist>(const std::string &amp;name, T abscissa, plot::AxisConfiguration yLeftConfig, plot::AxisConfiguration yRightConfig, Args... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPlot</name>
      <anchorfile>a02045.html</anchorfile>
      <anchor>ad6961d06ac675bd1229a7ca91b8ae20e</anchor>
      <arglist>(const std::string &amp;name, T abscissa, plot::AxisConfiguration yLeftConfig, Args... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPlot</name>
      <anchorfile>a02045.html</anchorfile>
      <anchor>a03129def93d1437c326595686cba93ef</anchor>
      <arglist>(const std::string &amp;name, T abscissa, Args... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePlot</name>
      <anchorfile>a02045.html</anchorfile>
      <anchor>a8988ff74a597f9a7aa546524e6287e9c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>update</name>
      <anchorfile>a02045.html</anchorfile>
      <anchor>aa251549720e40fd68b267308e5fdc765</anchor>
      <arglist>(std::vector&lt; char &gt; &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>handleRequest</name>
      <anchorfile>a02045.html</anchorfile>
      <anchor>a42d3a738f1e4e019d740b8b6870d3a6c</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;category, const std::string &amp;name, const mc_rtc::Configuration &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>mc_rtc::Configuration</type>
      <name>data</name>
      <anchorfile>a02045.html</anchorfile>
      <anchor>ac8808344c0006e52d845f38ed202afd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int8_t</type>
      <name>PROTOCOL_VERSION</name>
      <anchorfile>a02045.html</anchorfile>
      <anchor>a2b426f74f8ce2efd0a881684a8eaa52e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_control::fsm::StateFactory</name>
    <filename>a01417.html</filename>
    <base>ObjectLoader&lt; State &gt;</base>
    <member kind="function">
      <type></type>
      <name>StateFactory</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>a8617d64660e701cd57508cff626c673b</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;paths, const std::vector&lt; std::string &gt; &amp;files, bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load_libraries</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>a0825995ae6cfda039a931a8c17681931</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;paths)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load_files</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>a8218cc8f646019ae30eb81aecd9344f7</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;files)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>af1f40204d80bc5ec43239f56d8d7c88d</anchor>
      <arglist>(const std::map&lt; std::string, mc_rtc::Configuration &gt; &amp;states)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>ad5370f6e17ce0cfc1c99702b410ca99e</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;base, const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>StatePtr</type>
      <name>create</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>a482d7fc90e58abcb0ab8390e54be3ed8</anchor>
      <arglist>(const std::string &amp;state, Controller &amp;ctl, const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>StatePtr</type>
      <name>create</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>abd6942d6b9061d9c1c7de1b6a7ff33d2</anchor>
      <arglist>(const std::string &amp;state, Controller &amp;ctl)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasState</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>a1302d798bbbbe79d0d5c9df9a1cdc506</anchor>
      <arglist>(const std::string &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>states</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>a5f07722fb8e17b4711973ff782face63</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load_with_loader</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>a22fb3a0cea2bbb2e18ca6e4bed3f18b0</anchor>
      <arglist>(const std::string &amp;state)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_planning::StateP</name>
    <filename>a01609.html</filename>
    <member kind="function">
      <type></type>
      <name>StateP</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>aa70eabc6ab14014518cf43b2bb3ff0dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateP</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>ad635c4cfa84e7870169f0ca8d76fcf87</anchor>
      <arglist>(const Eigen::Vector3d &amp;p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateP</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>afc3dfb710d0dca983fb4dbf6c63ab129</anchor>
      <arglist>(const StateP &amp;i_state)</arglist>
    </member>
    <member kind="function">
      <type>StateP &amp;</type>
      <name>operator=</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>a323ac05f38b3e648a08922e6ee8fe427</anchor>
      <arglist>(const StateP &amp;i_state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>a8c6c68a5ae5030aca65c6c3266f3d703</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Copy</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>aa4810719793a3b0828168c4b173ab82f</anchor>
      <arglist>(const StateP &amp;i_state)</arglist>
    </member>
    <member kind="variable">
      <type>Eigen::Vector3d</type>
      <name>P</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>a182ed07e44c51a690835f300cdde12b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>a4a60170fc8063f980cb5bb737571cbd0</anchor>
      <arglist>(std::ostream &amp;os, const StateP &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_planning::StatePV</name>
    <filename>a01613.html</filename>
    <base virtualness="virtual">mc_planning::StateP</base>
    <member kind="function">
      <type></type>
      <name>StatePV</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>ae8a780ff1b7241ea65345caf17e6f0d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StatePV</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>aeb9ea75e44b30a78672b20ab5b73a675</anchor>
      <arglist>(const Eigen::Vector3d &amp;p, const Eigen::Vector3d &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StatePV</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>a9e8b621afa697184a69f8a1045371134</anchor>
      <arglist>(const StatePV &amp;i_state)</arglist>
    </member>
    <member kind="function">
      <type>StatePV &amp;</type>
      <name>operator=</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>aad0afaabdcff1e0ee294205567aed9df</anchor>
      <arglist>(const StatePV &amp;i_state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>a8feaa96fbb2eb4e4a71de6dead9d2ce0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Copy</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>a42eaaee95b1c90f806a3b9b2238f9288</anchor>
      <arglist>(const StatePV &amp;i_state)</arglist>
    </member>
    <member kind="variable">
      <type>Eigen::Vector3d</type>
      <name>V</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>a1145b941b92646c110e47af422724f97</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>aec95a9d9552b685a4ff584f073605d9b</anchor>
      <arglist>(std::ostream &amp;os, const StatePV &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_planning::StatePVA</name>
    <filename>a01617.html</filename>
    <base virtualness="virtual">mc_planning::StatePV</base>
    <member kind="function">
      <type></type>
      <name>StatePVA</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>aefffc7d312d0d9c3b5289f3c3e78ebb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StatePVA</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a2c99192491b7229db9c198a35d4bfc4f</anchor>
      <arglist>(const Eigen::Vector3d &amp;p, const Eigen::Vector3d &amp;v, const Eigen::Vector3d &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StatePVA</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>adc22b2bbfa4cafc7ebf83d60e6434462</anchor>
      <arglist>(const StatePVA &amp;i_state)</arglist>
    </member>
    <member kind="function">
      <type>StatePVA &amp;</type>
      <name>operator=</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a6c3011d86a83dc2954ce303c40608c1e</anchor>
      <arglist>(const StatePVA &amp;i_state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a2e6013042a6b48d8914a437d92144aec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Copy</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a2673bd190f845ef7e3c2bd0703051ef9</anchor>
      <arglist>(const StatePVA &amp;i_state)</arglist>
    </member>
    <member kind="variable">
      <type>Eigen::Vector3d</type>
      <name>Vdot</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>ac3ffdfb87863c25360ce90e2ac246128</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>afdadb73fc0c56698cb555020586c32a6</anchor>
      <arglist>(std::ostream &amp;os, const StatePVA &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_filter::StationaryOffset</name>
    <filename>a01533.html</filename>
    <templarg>VectorT</templarg>
    <member kind="function">
      <type></type>
      <name>StationaryOffset</name>
      <anchorfile>a01533.html</anchorfile>
      <anchor>aa24fa819655846548ac382ba218e051b</anchor>
      <arglist>(double dt, double timeConstant, const VectorT &amp;initValue=VectorT::Zero())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01533.html</anchorfile>
      <anchor>ac9dfa7c0425d04a71c179ee05f477d0a</anchor>
      <arglist>(const VectorT &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const VectorT &amp;</type>
      <name>eval</name>
      <anchorfile>a01533.html</anchorfile>
      <anchor>a5db8a63c61b7305d04f3fcd20793ba79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a01533.html</anchorfile>
      <anchor>aa529e044d21dfc42d5a5e6ff8938a7c6</anchor>
      <arglist>(const VectorT &amp;initValue)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>timeConstant</name>
      <anchorfile>a01533.html</anchorfile>
      <anchor>ac19e584e7e9172a67709b2187f533069</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeConstant</name>
      <anchorfile>a01533.html</anchorfile>
      <anchor>a19bbac77cc974f0b7463e493965d5999</anchor>
      <arglist>(double T)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saturation</name>
      <anchorfile>a01533.html</anchorfile>
      <anchor>afd7e9222057cfac1eb12fa155e4c97d8</anchor>
      <arglist>(double limit)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StationaryOffset&lt; Eigen::Vector3d &gt;</name>
    <filename>a01533.html</filename>
    <member kind="function">
      <type></type>
      <name>StationaryOffset</name>
      <anchorfile>a01533.html</anchorfile>
      <anchor>aa24fa819655846548ac382ba218e051b</anchor>
      <arglist>(double dt, double timeConstant, const Eigen::Vector3d &amp;initValue=Eigen::Vector3d ::Zero())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01533.html</anchorfile>
      <anchor>ac9dfa7c0425d04a71c179ee05f477d0a</anchor>
      <arglist>(const Eigen::Vector3d &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>eval</name>
      <anchorfile>a01533.html</anchorfile>
      <anchor>a5db8a63c61b7305d04f3fcd20793ba79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a01533.html</anchorfile>
      <anchor>aa529e044d21dfc42d5a5e6ff8938a7c6</anchor>
      <arglist>(const Eigen::Vector3d &amp;initValue)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>timeConstant</name>
      <anchorfile>a01533.html</anchorfile>
      <anchor>ac19e584e7e9172a67709b2187f533069</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeConstant</name>
      <anchorfile>a01533.html</anchorfile>
      <anchor>a19bbac77cc974f0b7463e493965d5999</anchor>
      <arglist>(double T)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saturation</name>
      <anchorfile>a01533.html</anchorfile>
      <anchor>afd7e9222057cfac1eb12fa155e4c97d8</anchor>
      <arglist>(double limit)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::StringInputImpl</name>
    <filename>a02057.html</filename>
    <templarg>GetT</templarg>
    <templarg>SetT</templarg>
    <base>mc_rtc::gui::CommonInputImpl</base>
    <member kind="function">
      <type></type>
      <name>StringInputImpl</name>
      <anchorfile>a02057.html</anchorfile>
      <anchor>a7bb61ec13b057633c8fde818c5013a52</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, SetT set_fn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringInputImpl</name>
      <anchorfile>a02057.html</anchorfile>
      <anchor>a350ed0e71968dfab7a2abe8ff9429b68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>a02057.html</anchorfile>
      <anchor>a252d8382e7f5b9df9d46d805f8265fa1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::Surface</name>
    <filename>a01781.html</filename>
    <member kind="function">
      <type></type>
      <name>Surface</name>
      <anchorfile>a01781.html</anchorfile>
      <anchor>a8c4fe07a3ad4392974c63722916b28db</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;bodyName, const sva::PTransformd &amp;X_b_s, const std::string &amp;materialName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Surface</name>
      <anchorfile>a01781.html</anchorfile>
      <anchor>a3f8d3cd62afe2e13709b86f5b027a699</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>name</name>
      <anchorfile>a01781.html</anchorfile>
      <anchor>aca2614ce25d784597de6ef3e53f68c96</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>name</name>
      <anchorfile>a01781.html</anchorfile>
      <anchor>a4fc1541848283d5095e25bbbd044020a</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>bodyName</name>
      <anchorfile>a01781.html</anchorfile>
      <anchor>a9dbcfd0f33b37801a81c2229a84466e8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>materialName</name>
      <anchorfile>a01781.html</anchorfile>
      <anchor>a6a83f90ee05eb45299d239c701a40f99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; sva::PTransformd &gt; &amp;</type>
      <name>points</name>
      <anchorfile>a01781.html</anchorfile>
      <anchor>a9ba0501f73d2f4907de1bbffc0933bc1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>bodyIndex</name>
      <anchorfile>a01781.html</anchorfile>
      <anchor>a1ac46d99ec12cfb01e58745b5a364588</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;robot) const</arglist>
    </member>
    <member kind="function">
      <type>sva::PTransformd</type>
      <name>X_0_s</name>
      <anchorfile>a01781.html</anchorfile>
      <anchor>a66394541590f20a259e662ee995833b4</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;robot) const</arglist>
    </member>
    <member kind="function">
      <type>sva::PTransformd</type>
      <name>X_0_s</name>
      <anchorfile>a01781.html</anchorfile>
      <anchor>af30be45b61b6a2d617ff2e18bb2f4903</anchor>
      <arglist>(const mc_rbdyn::Robot &amp;robot, const rbd::MultiBodyConfig &amp;mbc) const</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>X_b_s</name>
      <anchorfile>a01781.html</anchorfile>
      <anchor>a608e48ae09decafa9c66caf47368a800</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>X_b_s</name>
      <anchorfile>a01781.html</anchorfile>
      <anchor>a2ce6f078f8d8822cc9f5fa230ad4edee</anchor>
      <arglist>(const sva::PTransformd &amp;X_b_s)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computePoints</name>
      <anchorfile>a01781.html</anchorfile>
      <anchor>a33acf44c62df472853a89de4d24b8c93</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toStr</name>
      <anchorfile>a01781.html</anchorfile>
      <anchor>adc29cfce0c121597c6805119fd4419b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::shared_ptr&lt; Surface &gt;</type>
      <name>copy</name>
      <anchorfile>a01781.html</anchorfile>
      <anchor>a7c7f119cc271f7ff2c076a31cbe9b4df</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>type</name>
      <anchorfile>a01781.html</anchorfile>
      <anchor>ad9239b4ea2aad13c55bd6ba6698826ad</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01781.html</anchorfile>
      <anchor>ac98cc668051445fd3b94aaac36c4db58</anchor>
      <arglist>(const Surface &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a01781.html</anchorfile>
      <anchor>a80309f23f677b1441f6e8c922b67fe8f</anchor>
      <arglist>(const Surface &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; sva::PTransformd &gt; &amp;</type>
      <name>points</name>
      <anchorfile>a01781.html</anchorfile>
      <anchor>ad714df25bed40fed15f512f0a09db694</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::SurfaceTransformTask</name>
    <filename>a02453.html</filename>
    <base>TrajectoryTaskGeneric&lt; tasks::qp::SurfaceTransformTask &gt;</base>
    <member kind="typedef">
      <type>TrajectoryTaskGeneric&lt; tasks::qp::SurfaceTransformTask &gt;</type>
      <name>TrajectoryBase</name>
      <anchorfile>a02453.html</anchorfile>
      <anchor>a6373dca6e354783c884576662960c10d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SurfaceTransformTask</name>
      <anchorfile>a02453.html</anchorfile>
      <anchor>a11dcb669bfded6027ba8d80f9a79a58c</anchor>
      <arglist>(const std::string &amp;surfaceName, const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, double stiffness=2.0, double weight=500)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>a02453.html</anchorfile>
      <anchor>aac928f09ec7213f7c50c889e8eb3e4ff</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>sva::PTransformd</type>
      <name>target</name>
      <anchorfile>a02453.html</anchorfile>
      <anchor>a486a21e87c98de6f9edd93c5b8f4bf12</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>target</name>
      <anchorfile>a02453.html</anchorfile>
      <anchor>aec2befb7f10e1aaeaeb43a877e7cc877</anchor>
      <arglist>(const sva::PTransformd &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>targetSurface</name>
      <anchorfile>a02453.html</anchorfile>
      <anchor>a5cf828fa175ab56a7d7c4b774bda7296</anchor>
      <arglist>(unsigned int robotIndex, const std::string &amp;surfaceName, const sva::PTransformd &amp;offset)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>surface</name>
      <anchorfile>a02453.html</anchorfile>
      <anchor>a564f6ac88615f5bf2abcd1defc0c6d57</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd</type>
      <name>surfacePose</name>
      <anchorfile>a02453.html</anchorfile>
      <anchor>a3f8efaafe91d5f6504a8b2e6c7b2dda1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToLogger</name>
      <anchorfile>a02453.html</anchorfile>
      <anchor>a71392150c13f91caba0fcc4e6ecdacdf</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromLogger</name>
      <anchorfile>a02453.html</anchorfile>
      <anchor>af33254a8afa6aa88580e7c54a9b0ac77</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGains</name>
      <anchorfile>a02453.html</anchorfile>
      <anchor>ac29bc12be1a65a9d5315be15d6667a36</anchor>
      <arglist>(const sva::MotionVecd &amp;stiffness, const sva::MotionVecd &amp;damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stiffness</name>
      <anchorfile>a02453.html</anchorfile>
      <anchor>a8a87753605a11f7a552bfa86d6bf0cc7</anchor>
      <arglist>(const sva::MotionVecd &amp;stiffness)</arglist>
    </member>
    <member kind="function">
      <type>sva::MotionVecd</type>
      <name>mvStiffness</name>
      <anchorfile>a02453.html</anchorfile>
      <anchor>ae93b59f50cc0e9733bbc7551f4c7d294</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>damping</name>
      <anchorfile>a02453.html</anchorfile>
      <anchor>abeea24142cd101aeb8308950b145e875</anchor>
      <arglist>(const sva::MotionVecd &amp;damping)</arglist>
    </member>
    <member kind="function">
      <type>sva::MotionVecd</type>
      <name>mvDamping</name>
      <anchorfile>a02453.html</anchorfile>
      <anchor>a93f19fb156ea70632d753c7a461b98b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refVelB</name>
      <anchorfile>a02453.html</anchorfile>
      <anchor>a54085b38c073b75186447157a232ede5</anchor>
      <arglist>(const sva::MotionVecd &amp;velB)</arglist>
    </member>
    <member kind="function">
      <type>sva::MotionVecd</type>
      <name>refVelB</name>
      <anchorfile>a02453.html</anchorfile>
      <anchor>af3fa4281d33fd5fb846a9863aa27798e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refAccel</name>
      <anchorfile>a02453.html</anchorfile>
      <anchor>a336aa38ae2eda15f73c3a606427e5188</anchor>
      <arglist>(const sva::MotionVecd &amp;accel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>a02453.html</anchorfile>
      <anchor>a9ff367856026ec4e3adf4db88aab281b</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const mc_rtc::Configuration &amp;config) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>a02453.html</anchorfile>
      <anchor>a1dcacdc717af669648c0d06ff0b29e11</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;gui) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>surfaceName</name>
      <anchorfile>a02453.html</anchorfile>
      <anchor>a9f9f378bfa6b2f92ec99af3cff7d450a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_control::fsm::MetaTasksState::TaskCriteria</name>
    <filename>a01445.html</filename>
    <member kind="variable">
      <type>size_t</type>
      <name>idx</name>
      <anchorfile>a01445.html</anchorfile>
      <anchor>a15631f7cb4afab3665d62197f9b0aa67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mc_control::CompletionCriteria</type>
      <name>criteria</name>
      <anchorfile>a01445.html</anchorfile>
      <anchor>aa1d90135dc97508bf146a086b7b8305e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>use_output</name>
      <anchorfile>a01445.html</anchorfile>
      <anchor>abc76ec57de7ebd6ad839c05d4d391cde</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::TrajectoryImpl</name>
    <filename>a02061.html</filename>
    <templarg>GetT</templarg>
    <base>mc_rtc::gui::DataElement</base>
    <member kind="function">
      <type></type>
      <name>TrajectoryImpl</name>
      <anchorfile>a02061.html</anchorfile>
      <anchor>aa5739c5b73ee002d3bd0857c1daf5695</anchor>
      <arglist>(const std::string &amp;name, const LineConfig &amp;config, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrajectoryImpl</name>
      <anchorfile>a02061.html</anchorfile>
      <anchor>ad07155be02930a5f4ca5ad25527f5180</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02061.html</anchorfile>
      <anchor>ab4ad9750f804e593ee1fcc52e35ff0e1</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>a02061.html</anchorfile>
      <anchor>addbe3e273eb652e9b31e8fb2d15d0738</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>a02061.html</anchorfile>
      <anchor>ad6c1b7129408a35fa938b3a4e594e669</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::TrajectoryTaskGeneric</name>
    <filename>a02457.html</filename>
    <templarg>T</templarg>
    <base>mc_tasks::MetaTask</base>
    <member kind="typedef">
      <type>TrajectoryTaskGeneric&lt; T &gt;</type>
      <name>TrajectoryBase</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a477fb8de593f7ccaaea505e9e11229f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrajectoryTaskGeneric</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a3b341ee69d33864500eb7e0f68ffe599</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, double stiffness, double weight)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrajectoryTaskGeneric</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a723271227584b9a8af649ce887d9c947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a400018484b0f1d1799e02a1af09b8167</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refVel</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a4f8873db735f6c3cbb37761999059cdc</anchor>
      <arglist>(const Eigen::VectorXd &amp;vel)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>refVel</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a2f59cefb29eab9e55ceb6295e105de1b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refAccel</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a161a905db0c9a784de4e11ff07d5b064</anchor>
      <arglist>(const Eigen::VectorXd &amp;accel)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>refAccel</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a834542365fd040ef9b29142329d9b573</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stiffness</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a38374ba4bc699b91a3f49cbc9bcf2f11</anchor>
      <arglist>(double stiffness)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stiffness</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>ae901348ef6b40b04af30f6796714b4ff</anchor>
      <arglist>(const Eigen::VectorXd &amp;stiffness)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>damping</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a82155cafc3a49ae1218ebd02e45c08b2</anchor>
      <arglist>(double damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>damping</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a0c4ccf6b3221b8b5f3de002b2eaf663b</anchor>
      <arglist>(const Eigen::VectorXd &amp;damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGains</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a418d47e753fc31eb16454bd4e3d8fd2d</anchor>
      <arglist>(double stiffness, double damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGains</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a67e5b618af03d13ba68512d2e0b9bc0e</anchor>
      <arglist>(const Eigen::VectorXd &amp;stiffness, const Eigen::VectorXd &amp;damping)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stiffness</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>abb15c105235008d7c43b813f581c1c92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>damping</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a6c2aaa9a80d595b564c0bf982662ee72</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>dimStiffness</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a869ba83dfc87a3f4d29625d84231d804</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>dimDamping</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a7d35bbf3041054f4cd69aa772c2f5d9b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>weight</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>ae4bc16bb954fcdc7c75870b594eb2548</anchor>
      <arglist>(double w)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weight</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>addeac3a07caaeef74f6f62c7509767c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dimWeight</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a65007da65141c139006058f34b1f48ef</anchor>
      <arglist>(const Eigen::VectorXd &amp;dimW) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Eigen::VectorXd</type>
      <name>dimWeight</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>ab69cebe473f8c5f8a152726476655e6b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>selectActiveJoints</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a568cbb2dd1a32fa24a3d257dbc7f7ab7</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;activeJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;activeDofs={}, bool checkJoints=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>selectActiveJoints</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a401e0e9e9dc4acade920f05779540078</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const std::vector&lt; std::string &gt; &amp;activeJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;activeDofs={}) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>selectUnactiveJoints</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a17f76beb2ace280540b5687701343fa8</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;unactiveJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;unactiveDofs={}, bool checkJoints=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>selectUnactiveJoints</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>aad2277ab64458789c4b2e278cf7ff6c7</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const std::vector&lt; std::string &gt; &amp;unactiveJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;unactiveDofs={}) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetJointsSelector</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a28bd17d1de6e94cc16c84ec4057f763f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetJointsSelector</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a3db0df307cb2a7d9aeb8d8b4afc1c138</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Eigen::VectorXd</type>
      <name>eval</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a464299be73754bdde996cac844877175</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Eigen::VectorXd</type>
      <name>speed</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>aee6254ed615e98f3b2d96a76fac08166</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a1cbf0f303b3ece9dc97cfe33cef66045</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a446992512e198c8292d758d5ec6c044b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a8de1586c9761e5f14d1d66c7e6a09fbf</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const mc_rtc::Configuration &amp;config) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>finalize</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a57652be181ca173ac4a7fa8e8fa33509</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a28ff909c35eac08fad9710f9eb03251a</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToLogger</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>ab04252eb80e09da19eb1a0919998d3f1</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeFromLogger</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a349f7130d24ba00e1cf360403c8d507a</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::function&lt; bool(const mc_tasks::MetaTask &amp;task, std::string &amp;)&gt;</type>
      <name>buildCompletionCriteria</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a6b12fa2e9307d9fb9c760d05b1c04133</anchor>
      <arglist>(double dt, const mc_rtc::Configuration &amp;config) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>addToSolver</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a1af5b0e8d37ab0976c14641471493bc5</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const mc_rbdyn::Robots &amp;</type>
      <name>robots</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a77260d6774cb69d24d22e53890e7fa16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>rIndex</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a3c68bc924e1df10c374363d0aaaa15ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; T &gt;</type>
      <name>errorT</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a89a472bd695ceec1bbbe1b932ec014fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>refVel_</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a9ceb455c41f015c22deaec76b8bd928e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>refAccel_</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a597121365d28a8e2ff4f8c550a5ac81c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>inSolver_</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>adea0ae231ddadbfdffa3f5355a3c9aab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; tasks::qp::TrajectoryTask &gt;</type>
      <name>trajectoryT_</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a779f644750cc4acd6692681dd255ea06</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrajectoryTaskGeneric&lt; tasks::qp::CoMTask &gt;</name>
    <filename>a02457.html</filename>
    <base>mc_tasks::MetaTask</base>
    <member kind="typedef">
      <type>TrajectoryTaskGeneric&lt; tasks::qp::CoMTask &gt;</type>
      <name>TrajectoryBase</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a477fb8de593f7ccaaea505e9e11229f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrajectoryTaskGeneric</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a3b341ee69d33864500eb7e0f68ffe599</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, double stiffness, double weight)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrajectoryTaskGeneric</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a723271227584b9a8af649ce887d9c947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a400018484b0f1d1799e02a1af09b8167</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refVel</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a4f8873db735f6c3cbb37761999059cdc</anchor>
      <arglist>(const Eigen::VectorXd &amp;vel)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>refVel</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a2f59cefb29eab9e55ceb6295e105de1b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refAccel</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a161a905db0c9a784de4e11ff07d5b064</anchor>
      <arglist>(const Eigen::VectorXd &amp;accel)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>refAccel</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a834542365fd040ef9b29142329d9b573</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stiffness</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a38374ba4bc699b91a3f49cbc9bcf2f11</anchor>
      <arglist>(double stiffness)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stiffness</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>ae901348ef6b40b04af30f6796714b4ff</anchor>
      <arglist>(const Eigen::VectorXd &amp;stiffness)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stiffness</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>abb15c105235008d7c43b813f581c1c92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>damping</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a82155cafc3a49ae1218ebd02e45c08b2</anchor>
      <arglist>(double damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>damping</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a0c4ccf6b3221b8b5f3de002b2eaf663b</anchor>
      <arglist>(const Eigen::VectorXd &amp;damping)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>damping</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a6c2aaa9a80d595b564c0bf982662ee72</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGains</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a418d47e753fc31eb16454bd4e3d8fd2d</anchor>
      <arglist>(double stiffness, double damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGains</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a67e5b618af03d13ba68512d2e0b9bc0e</anchor>
      <arglist>(const Eigen::VectorXd &amp;stiffness, const Eigen::VectorXd &amp;damping)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>dimStiffness</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a869ba83dfc87a3f4d29625d84231d804</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>dimDamping</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a7d35bbf3041054f4cd69aa772c2f5d9b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>weight</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>ae4bc16bb954fcdc7c75870b594eb2548</anchor>
      <arglist>(double w)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weight</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>addeac3a07caaeef74f6f62c7509767c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dimWeight</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a65007da65141c139006058f34b1f48ef</anchor>
      <arglist>(const Eigen::VectorXd &amp;dimW) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Eigen::VectorXd</type>
      <name>dimWeight</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>ab69cebe473f8c5f8a152726476655e6b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>selectActiveJoints</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a568cbb2dd1a32fa24a3d257dbc7f7ab7</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;activeJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;activeDofs={}, bool checkJoints=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>selectActiveJoints</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a401e0e9e9dc4acade920f05779540078</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const std::vector&lt; std::string &gt; &amp;activeJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;activeDofs={}) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>selectUnactiveJoints</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a17f76beb2ace280540b5687701343fa8</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;unactiveJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;unactiveDofs={}, bool checkJoints=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>selectUnactiveJoints</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>aad2277ab64458789c4b2e278cf7ff6c7</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const std::vector&lt; std::string &gt; &amp;unactiveJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;unactiveDofs={}) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetJointsSelector</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a28bd17d1de6e94cc16c84ec4057f763f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetJointsSelector</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a3db0df307cb2a7d9aeb8d8b4afc1c138</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Eigen::VectorXd</type>
      <name>eval</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a464299be73754bdde996cac844877175</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Eigen::VectorXd</type>
      <name>speed</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>aee6254ed615e98f3b2d96a76fac08166</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a1cbf0f303b3ece9dc97cfe33cef66045</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a446992512e198c8292d758d5ec6c044b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a8de1586c9761e5f14d1d66c7e6a09fbf</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const mc_rtc::Configuration &amp;config) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>finalize</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a57652be181ca173ac4a7fa8e8fa33509</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a28ff909c35eac08fad9710f9eb03251a</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToLogger</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>ab04252eb80e09da19eb1a0919998d3f1</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeFromLogger</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a349f7130d24ba00e1cf360403c8d507a</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::function&lt; bool(const mc_tasks::MetaTask &amp;task, std::string &amp;)&gt;</type>
      <name>buildCompletionCriteria</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a6b12fa2e9307d9fb9c760d05b1c04133</anchor>
      <arglist>(double dt, const mc_rtc::Configuration &amp;config) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>addToSolver</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a1af5b0e8d37ab0976c14641471493bc5</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const mc_rbdyn::Robots &amp;</type>
      <name>robots</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a77260d6774cb69d24d22e53890e7fa16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>rIndex</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a3c68bc924e1df10c374363d0aaaa15ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; tasks::qp::CoMTask &gt;</type>
      <name>errorT</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a89a472bd695ceec1bbbe1b932ec014fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>refVel_</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a9ceb455c41f015c22deaec76b8bd928e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>refAccel_</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a597121365d28a8e2ff4f8c550a5ac81c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>inSolver_</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>adea0ae231ddadbfdffa3f5355a3c9aab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; tasks::qp::TrajectoryTask &gt;</type>
      <name>trajectoryT_</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a779f644750cc4acd6692681dd255ea06</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrajectoryTaskGeneric&lt; tasks::qp::GazeTask &gt;</name>
    <filename>a02457.html</filename>
    <base>mc_tasks::MetaTask</base>
    <member kind="typedef">
      <type>TrajectoryTaskGeneric&lt; tasks::qp::GazeTask &gt;</type>
      <name>TrajectoryBase</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a477fb8de593f7ccaaea505e9e11229f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrajectoryTaskGeneric</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a3b341ee69d33864500eb7e0f68ffe599</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, double stiffness, double weight)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrajectoryTaskGeneric</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a723271227584b9a8af649ce887d9c947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a400018484b0f1d1799e02a1af09b8167</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refVel</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a4f8873db735f6c3cbb37761999059cdc</anchor>
      <arglist>(const Eigen::VectorXd &amp;vel)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>refVel</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a2f59cefb29eab9e55ceb6295e105de1b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refAccel</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a161a905db0c9a784de4e11ff07d5b064</anchor>
      <arglist>(const Eigen::VectorXd &amp;accel)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>refAccel</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a834542365fd040ef9b29142329d9b573</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stiffness</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a38374ba4bc699b91a3f49cbc9bcf2f11</anchor>
      <arglist>(double stiffness)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stiffness</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>ae901348ef6b40b04af30f6796714b4ff</anchor>
      <arglist>(const Eigen::VectorXd &amp;stiffness)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stiffness</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>abb15c105235008d7c43b813f581c1c92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>damping</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a82155cafc3a49ae1218ebd02e45c08b2</anchor>
      <arglist>(double damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>damping</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a0c4ccf6b3221b8b5f3de002b2eaf663b</anchor>
      <arglist>(const Eigen::VectorXd &amp;damping)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>damping</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a6c2aaa9a80d595b564c0bf982662ee72</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGains</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a418d47e753fc31eb16454bd4e3d8fd2d</anchor>
      <arglist>(double stiffness, double damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGains</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a67e5b618af03d13ba68512d2e0b9bc0e</anchor>
      <arglist>(const Eigen::VectorXd &amp;stiffness, const Eigen::VectorXd &amp;damping)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>dimStiffness</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a869ba83dfc87a3f4d29625d84231d804</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>dimDamping</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a7d35bbf3041054f4cd69aa772c2f5d9b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>weight</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>ae4bc16bb954fcdc7c75870b594eb2548</anchor>
      <arglist>(double w)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weight</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>addeac3a07caaeef74f6f62c7509767c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dimWeight</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a65007da65141c139006058f34b1f48ef</anchor>
      <arglist>(const Eigen::VectorXd &amp;dimW) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Eigen::VectorXd</type>
      <name>dimWeight</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>ab69cebe473f8c5f8a152726476655e6b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>selectActiveJoints</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a568cbb2dd1a32fa24a3d257dbc7f7ab7</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;activeJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;activeDofs={}, bool checkJoints=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>selectActiveJoints</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a401e0e9e9dc4acade920f05779540078</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const std::vector&lt; std::string &gt; &amp;activeJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;activeDofs={}) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>selectUnactiveJoints</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a17f76beb2ace280540b5687701343fa8</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;unactiveJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;unactiveDofs={}, bool checkJoints=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>selectUnactiveJoints</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>aad2277ab64458789c4b2e278cf7ff6c7</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const std::vector&lt; std::string &gt; &amp;unactiveJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;unactiveDofs={}) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetJointsSelector</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a28bd17d1de6e94cc16c84ec4057f763f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetJointsSelector</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a3db0df307cb2a7d9aeb8d8b4afc1c138</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Eigen::VectorXd</type>
      <name>eval</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a464299be73754bdde996cac844877175</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Eigen::VectorXd</type>
      <name>speed</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>aee6254ed615e98f3b2d96a76fac08166</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a1cbf0f303b3ece9dc97cfe33cef66045</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a446992512e198c8292d758d5ec6c044b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a8de1586c9761e5f14d1d66c7e6a09fbf</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const mc_rtc::Configuration &amp;config) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>finalize</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a57652be181ca173ac4a7fa8e8fa33509</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a28ff909c35eac08fad9710f9eb03251a</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToLogger</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>ab04252eb80e09da19eb1a0919998d3f1</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeFromLogger</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a349f7130d24ba00e1cf360403c8d507a</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::function&lt; bool(const mc_tasks::MetaTask &amp;task, std::string &amp;)&gt;</type>
      <name>buildCompletionCriteria</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a6b12fa2e9307d9fb9c760d05b1c04133</anchor>
      <arglist>(double dt, const mc_rtc::Configuration &amp;config) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>addToSolver</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a1af5b0e8d37ab0976c14641471493bc5</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const mc_rbdyn::Robots &amp;</type>
      <name>robots</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a77260d6774cb69d24d22e53890e7fa16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>rIndex</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a3c68bc924e1df10c374363d0aaaa15ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; tasks::qp::GazeTask &gt;</type>
      <name>errorT</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a89a472bd695ceec1bbbe1b932ec014fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>refVel_</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a9ceb455c41f015c22deaec76b8bd928e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>refAccel_</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a597121365d28a8e2ff4f8c550a5ac81c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>inSolver_</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>adea0ae231ddadbfdffa3f5355a3c9aab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; tasks::qp::TrajectoryTask &gt;</type>
      <name>trajectoryT_</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a779f644750cc4acd6692681dd255ea06</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrajectoryTaskGeneric&lt; tasks::qp::MomentumTask &gt;</name>
    <filename>a02457.html</filename>
    <base>mc_tasks::MetaTask</base>
    <member kind="typedef">
      <type>TrajectoryTaskGeneric&lt; tasks::qp::MomentumTask &gt;</type>
      <name>TrajectoryBase</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a477fb8de593f7ccaaea505e9e11229f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrajectoryTaskGeneric</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a3b341ee69d33864500eb7e0f68ffe599</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, double stiffness, double weight)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrajectoryTaskGeneric</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a723271227584b9a8af649ce887d9c947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a400018484b0f1d1799e02a1af09b8167</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refVel</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a4f8873db735f6c3cbb37761999059cdc</anchor>
      <arglist>(const Eigen::VectorXd &amp;vel)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>refVel</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a2f59cefb29eab9e55ceb6295e105de1b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refAccel</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a161a905db0c9a784de4e11ff07d5b064</anchor>
      <arglist>(const Eigen::VectorXd &amp;accel)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>refAccel</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a834542365fd040ef9b29142329d9b573</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stiffness</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a38374ba4bc699b91a3f49cbc9bcf2f11</anchor>
      <arglist>(double stiffness)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stiffness</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>ae901348ef6b40b04af30f6796714b4ff</anchor>
      <arglist>(const Eigen::VectorXd &amp;stiffness)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stiffness</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>abb15c105235008d7c43b813f581c1c92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>damping</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a82155cafc3a49ae1218ebd02e45c08b2</anchor>
      <arglist>(double damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>damping</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a0c4ccf6b3221b8b5f3de002b2eaf663b</anchor>
      <arglist>(const Eigen::VectorXd &amp;damping)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>damping</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a6c2aaa9a80d595b564c0bf982662ee72</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGains</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a418d47e753fc31eb16454bd4e3d8fd2d</anchor>
      <arglist>(double stiffness, double damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGains</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a67e5b618af03d13ba68512d2e0b9bc0e</anchor>
      <arglist>(const Eigen::VectorXd &amp;stiffness, const Eigen::VectorXd &amp;damping)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>dimStiffness</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a869ba83dfc87a3f4d29625d84231d804</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>dimDamping</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a7d35bbf3041054f4cd69aa772c2f5d9b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>weight</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>ae4bc16bb954fcdc7c75870b594eb2548</anchor>
      <arglist>(double w)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weight</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>addeac3a07caaeef74f6f62c7509767c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dimWeight</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a65007da65141c139006058f34b1f48ef</anchor>
      <arglist>(const Eigen::VectorXd &amp;dimW) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Eigen::VectorXd</type>
      <name>dimWeight</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>ab69cebe473f8c5f8a152726476655e6b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>selectActiveJoints</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a568cbb2dd1a32fa24a3d257dbc7f7ab7</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;activeJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;activeDofs={}, bool checkJoints=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>selectActiveJoints</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a401e0e9e9dc4acade920f05779540078</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const std::vector&lt; std::string &gt; &amp;activeJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;activeDofs={}) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>selectUnactiveJoints</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a17f76beb2ace280540b5687701343fa8</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;unactiveJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;unactiveDofs={}, bool checkJoints=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>selectUnactiveJoints</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>aad2277ab64458789c4b2e278cf7ff6c7</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const std::vector&lt; std::string &gt; &amp;unactiveJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;unactiveDofs={}) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetJointsSelector</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a28bd17d1de6e94cc16c84ec4057f763f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetJointsSelector</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a3db0df307cb2a7d9aeb8d8b4afc1c138</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Eigen::VectorXd</type>
      <name>eval</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a464299be73754bdde996cac844877175</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Eigen::VectorXd</type>
      <name>speed</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>aee6254ed615e98f3b2d96a76fac08166</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a1cbf0f303b3ece9dc97cfe33cef66045</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a446992512e198c8292d758d5ec6c044b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a8de1586c9761e5f14d1d66c7e6a09fbf</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const mc_rtc::Configuration &amp;config) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>finalize</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a57652be181ca173ac4a7fa8e8fa33509</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a28ff909c35eac08fad9710f9eb03251a</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToLogger</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>ab04252eb80e09da19eb1a0919998d3f1</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeFromLogger</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a349f7130d24ba00e1cf360403c8d507a</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::function&lt; bool(const mc_tasks::MetaTask &amp;task, std::string &amp;)&gt;</type>
      <name>buildCompletionCriteria</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a6b12fa2e9307d9fb9c760d05b1c04133</anchor>
      <arglist>(double dt, const mc_rtc::Configuration &amp;config) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>addToSolver</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a1af5b0e8d37ab0976c14641471493bc5</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const mc_rbdyn::Robots &amp;</type>
      <name>robots</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a77260d6774cb69d24d22e53890e7fa16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>rIndex</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a3c68bc924e1df10c374363d0aaaa15ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; tasks::qp::MomentumTask &gt;</type>
      <name>errorT</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a89a472bd695ceec1bbbe1b932ec014fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>refVel_</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a9ceb455c41f015c22deaec76b8bd928e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>refAccel_</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a597121365d28a8e2ff4f8c550a5ac81c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>inSolver_</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>adea0ae231ddadbfdffa3f5355a3c9aab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; tasks::qp::TrajectoryTask &gt;</type>
      <name>trajectoryT_</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a779f644750cc4acd6692681dd255ea06</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrajectoryTaskGeneric&lt; tasks::qp::OrientationTask &gt;</name>
    <filename>a02457.html</filename>
    <base>mc_tasks::MetaTask</base>
    <member kind="typedef">
      <type>TrajectoryTaskGeneric&lt; tasks::qp::OrientationTask &gt;</type>
      <name>TrajectoryBase</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a477fb8de593f7ccaaea505e9e11229f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrajectoryTaskGeneric</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a3b341ee69d33864500eb7e0f68ffe599</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, double stiffness, double weight)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrajectoryTaskGeneric</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a723271227584b9a8af649ce887d9c947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a400018484b0f1d1799e02a1af09b8167</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refVel</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a4f8873db735f6c3cbb37761999059cdc</anchor>
      <arglist>(const Eigen::VectorXd &amp;vel)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>refVel</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a2f59cefb29eab9e55ceb6295e105de1b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refAccel</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a161a905db0c9a784de4e11ff07d5b064</anchor>
      <arglist>(const Eigen::VectorXd &amp;accel)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>refAccel</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a834542365fd040ef9b29142329d9b573</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stiffness</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a38374ba4bc699b91a3f49cbc9bcf2f11</anchor>
      <arglist>(double stiffness)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stiffness</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>ae901348ef6b40b04af30f6796714b4ff</anchor>
      <arglist>(const Eigen::VectorXd &amp;stiffness)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stiffness</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>abb15c105235008d7c43b813f581c1c92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>damping</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a82155cafc3a49ae1218ebd02e45c08b2</anchor>
      <arglist>(double damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>damping</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a0c4ccf6b3221b8b5f3de002b2eaf663b</anchor>
      <arglist>(const Eigen::VectorXd &amp;damping)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>damping</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a6c2aaa9a80d595b564c0bf982662ee72</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGains</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a418d47e753fc31eb16454bd4e3d8fd2d</anchor>
      <arglist>(double stiffness, double damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGains</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a67e5b618af03d13ba68512d2e0b9bc0e</anchor>
      <arglist>(const Eigen::VectorXd &amp;stiffness, const Eigen::VectorXd &amp;damping)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>dimStiffness</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a869ba83dfc87a3f4d29625d84231d804</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>dimDamping</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a7d35bbf3041054f4cd69aa772c2f5d9b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>weight</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>ae4bc16bb954fcdc7c75870b594eb2548</anchor>
      <arglist>(double w)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weight</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>addeac3a07caaeef74f6f62c7509767c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dimWeight</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a65007da65141c139006058f34b1f48ef</anchor>
      <arglist>(const Eigen::VectorXd &amp;dimW) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Eigen::VectorXd</type>
      <name>dimWeight</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>ab69cebe473f8c5f8a152726476655e6b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>selectActiveJoints</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a568cbb2dd1a32fa24a3d257dbc7f7ab7</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;activeJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;activeDofs={}, bool checkJoints=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>selectActiveJoints</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a401e0e9e9dc4acade920f05779540078</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const std::vector&lt; std::string &gt; &amp;activeJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;activeDofs={}) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>selectUnactiveJoints</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a17f76beb2ace280540b5687701343fa8</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;unactiveJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;unactiveDofs={}, bool checkJoints=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>selectUnactiveJoints</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>aad2277ab64458789c4b2e278cf7ff6c7</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const std::vector&lt; std::string &gt; &amp;unactiveJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;unactiveDofs={}) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetJointsSelector</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a28bd17d1de6e94cc16c84ec4057f763f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetJointsSelector</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a3db0df307cb2a7d9aeb8d8b4afc1c138</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Eigen::VectorXd</type>
      <name>eval</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a464299be73754bdde996cac844877175</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Eigen::VectorXd</type>
      <name>speed</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>aee6254ed615e98f3b2d96a76fac08166</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a1cbf0f303b3ece9dc97cfe33cef66045</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a446992512e198c8292d758d5ec6c044b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a8de1586c9761e5f14d1d66c7e6a09fbf</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const mc_rtc::Configuration &amp;config) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>finalize</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a57652be181ca173ac4a7fa8e8fa33509</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a28ff909c35eac08fad9710f9eb03251a</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToLogger</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>ab04252eb80e09da19eb1a0919998d3f1</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeFromLogger</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a349f7130d24ba00e1cf360403c8d507a</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::function&lt; bool(const mc_tasks::MetaTask &amp;task, std::string &amp;)&gt;</type>
      <name>buildCompletionCriteria</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a6b12fa2e9307d9fb9c760d05b1c04133</anchor>
      <arglist>(double dt, const mc_rtc::Configuration &amp;config) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>addToSolver</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a1af5b0e8d37ab0976c14641471493bc5</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const mc_rbdyn::Robots &amp;</type>
      <name>robots</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a77260d6774cb69d24d22e53890e7fa16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>rIndex</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a3c68bc924e1df10c374363d0aaaa15ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; tasks::qp::OrientationTask &gt;</type>
      <name>errorT</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a89a472bd695ceec1bbbe1b932ec014fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>refVel_</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a9ceb455c41f015c22deaec76b8bd928e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>refAccel_</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a597121365d28a8e2ff4f8c550a5ac81c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>inSolver_</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>adea0ae231ddadbfdffa3f5355a3c9aab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; tasks::qp::TrajectoryTask &gt;</type>
      <name>trajectoryT_</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a779f644750cc4acd6692681dd255ea06</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrajectoryTaskGeneric&lt; tasks::qp::PositionBasedVisServoTask &gt;</name>
    <filename>a02457.html</filename>
    <base>mc_tasks::MetaTask</base>
    <member kind="typedef">
      <type>TrajectoryTaskGeneric&lt; tasks::qp::PositionBasedVisServoTask &gt;</type>
      <name>TrajectoryBase</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a477fb8de593f7ccaaea505e9e11229f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrajectoryTaskGeneric</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a3b341ee69d33864500eb7e0f68ffe599</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, double stiffness, double weight)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrajectoryTaskGeneric</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a723271227584b9a8af649ce887d9c947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a400018484b0f1d1799e02a1af09b8167</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refVel</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a4f8873db735f6c3cbb37761999059cdc</anchor>
      <arglist>(const Eigen::VectorXd &amp;vel)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>refVel</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a2f59cefb29eab9e55ceb6295e105de1b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refAccel</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a161a905db0c9a784de4e11ff07d5b064</anchor>
      <arglist>(const Eigen::VectorXd &amp;accel)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>refAccel</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a834542365fd040ef9b29142329d9b573</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stiffness</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a38374ba4bc699b91a3f49cbc9bcf2f11</anchor>
      <arglist>(double stiffness)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stiffness</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>ae901348ef6b40b04af30f6796714b4ff</anchor>
      <arglist>(const Eigen::VectorXd &amp;stiffness)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stiffness</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>abb15c105235008d7c43b813f581c1c92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>damping</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a82155cafc3a49ae1218ebd02e45c08b2</anchor>
      <arglist>(double damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>damping</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a0c4ccf6b3221b8b5f3de002b2eaf663b</anchor>
      <arglist>(const Eigen::VectorXd &amp;damping)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>damping</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a6c2aaa9a80d595b564c0bf982662ee72</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGains</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a418d47e753fc31eb16454bd4e3d8fd2d</anchor>
      <arglist>(double stiffness, double damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGains</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a67e5b618af03d13ba68512d2e0b9bc0e</anchor>
      <arglist>(const Eigen::VectorXd &amp;stiffness, const Eigen::VectorXd &amp;damping)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>dimStiffness</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a869ba83dfc87a3f4d29625d84231d804</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>dimDamping</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a7d35bbf3041054f4cd69aa772c2f5d9b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>weight</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>ae4bc16bb954fcdc7c75870b594eb2548</anchor>
      <arglist>(double w)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weight</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>addeac3a07caaeef74f6f62c7509767c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dimWeight</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a65007da65141c139006058f34b1f48ef</anchor>
      <arglist>(const Eigen::VectorXd &amp;dimW) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Eigen::VectorXd</type>
      <name>dimWeight</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>ab69cebe473f8c5f8a152726476655e6b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>selectActiveJoints</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a568cbb2dd1a32fa24a3d257dbc7f7ab7</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;activeJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;activeDofs={}, bool checkJoints=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>selectActiveJoints</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a401e0e9e9dc4acade920f05779540078</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const std::vector&lt; std::string &gt; &amp;activeJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;activeDofs={}) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>selectUnactiveJoints</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a17f76beb2ace280540b5687701343fa8</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;unactiveJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;unactiveDofs={}, bool checkJoints=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>selectUnactiveJoints</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>aad2277ab64458789c4b2e278cf7ff6c7</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const std::vector&lt; std::string &gt; &amp;unactiveJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;unactiveDofs={}) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetJointsSelector</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a28bd17d1de6e94cc16c84ec4057f763f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetJointsSelector</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a3db0df307cb2a7d9aeb8d8b4afc1c138</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Eigen::VectorXd</type>
      <name>eval</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a464299be73754bdde996cac844877175</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Eigen::VectorXd</type>
      <name>speed</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>aee6254ed615e98f3b2d96a76fac08166</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a1cbf0f303b3ece9dc97cfe33cef66045</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a446992512e198c8292d758d5ec6c044b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a8de1586c9761e5f14d1d66c7e6a09fbf</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const mc_rtc::Configuration &amp;config) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>finalize</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a57652be181ca173ac4a7fa8e8fa33509</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a28ff909c35eac08fad9710f9eb03251a</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToLogger</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>ab04252eb80e09da19eb1a0919998d3f1</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeFromLogger</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a349f7130d24ba00e1cf360403c8d507a</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::function&lt; bool(const mc_tasks::MetaTask &amp;task, std::string &amp;)&gt;</type>
      <name>buildCompletionCriteria</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a6b12fa2e9307d9fb9c760d05b1c04133</anchor>
      <arglist>(double dt, const mc_rtc::Configuration &amp;config) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>addToSolver</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a1af5b0e8d37ab0976c14641471493bc5</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const mc_rbdyn::Robots &amp;</type>
      <name>robots</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a77260d6774cb69d24d22e53890e7fa16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>rIndex</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a3c68bc924e1df10c374363d0aaaa15ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; tasks::qp::PositionBasedVisServoTask &gt;</type>
      <name>errorT</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a89a472bd695ceec1bbbe1b932ec014fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>refVel_</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a9ceb455c41f015c22deaec76b8bd928e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>refAccel_</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a597121365d28a8e2ff4f8c550a5ac81c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>inSolver_</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>adea0ae231ddadbfdffa3f5355a3c9aab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; tasks::qp::TrajectoryTask &gt;</type>
      <name>trajectoryT_</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a779f644750cc4acd6692681dd255ea06</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrajectoryTaskGeneric&lt; tasks::qp::PositionTask &gt;</name>
    <filename>a02457.html</filename>
    <base>mc_tasks::MetaTask</base>
    <member kind="typedef">
      <type>TrajectoryTaskGeneric&lt; tasks::qp::PositionTask &gt;</type>
      <name>TrajectoryBase</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a477fb8de593f7ccaaea505e9e11229f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrajectoryTaskGeneric</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a3b341ee69d33864500eb7e0f68ffe599</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, double stiffness, double weight)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrajectoryTaskGeneric</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a723271227584b9a8af649ce887d9c947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a400018484b0f1d1799e02a1af09b8167</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refVel</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a4f8873db735f6c3cbb37761999059cdc</anchor>
      <arglist>(const Eigen::VectorXd &amp;vel)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>refVel</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a2f59cefb29eab9e55ceb6295e105de1b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refAccel</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a161a905db0c9a784de4e11ff07d5b064</anchor>
      <arglist>(const Eigen::VectorXd &amp;accel)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>refAccel</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a834542365fd040ef9b29142329d9b573</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stiffness</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a38374ba4bc699b91a3f49cbc9bcf2f11</anchor>
      <arglist>(double stiffness)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stiffness</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>ae901348ef6b40b04af30f6796714b4ff</anchor>
      <arglist>(const Eigen::VectorXd &amp;stiffness)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stiffness</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>abb15c105235008d7c43b813f581c1c92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>damping</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a82155cafc3a49ae1218ebd02e45c08b2</anchor>
      <arglist>(double damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>damping</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a0c4ccf6b3221b8b5f3de002b2eaf663b</anchor>
      <arglist>(const Eigen::VectorXd &amp;damping)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>damping</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a6c2aaa9a80d595b564c0bf982662ee72</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGains</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a418d47e753fc31eb16454bd4e3d8fd2d</anchor>
      <arglist>(double stiffness, double damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGains</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a67e5b618af03d13ba68512d2e0b9bc0e</anchor>
      <arglist>(const Eigen::VectorXd &amp;stiffness, const Eigen::VectorXd &amp;damping)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>dimStiffness</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a869ba83dfc87a3f4d29625d84231d804</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>dimDamping</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a7d35bbf3041054f4cd69aa772c2f5d9b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>weight</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>ae4bc16bb954fcdc7c75870b594eb2548</anchor>
      <arglist>(double w)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weight</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>addeac3a07caaeef74f6f62c7509767c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dimWeight</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a65007da65141c139006058f34b1f48ef</anchor>
      <arglist>(const Eigen::VectorXd &amp;dimW) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Eigen::VectorXd</type>
      <name>dimWeight</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>ab69cebe473f8c5f8a152726476655e6b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>selectActiveJoints</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a568cbb2dd1a32fa24a3d257dbc7f7ab7</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;activeJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;activeDofs={}, bool checkJoints=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>selectActiveJoints</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a401e0e9e9dc4acade920f05779540078</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const std::vector&lt; std::string &gt; &amp;activeJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;activeDofs={}) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>selectUnactiveJoints</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a17f76beb2ace280540b5687701343fa8</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;unactiveJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;unactiveDofs={}, bool checkJoints=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>selectUnactiveJoints</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>aad2277ab64458789c4b2e278cf7ff6c7</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const std::vector&lt; std::string &gt; &amp;unactiveJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;unactiveDofs={}) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetJointsSelector</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a28bd17d1de6e94cc16c84ec4057f763f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetJointsSelector</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a3db0df307cb2a7d9aeb8d8b4afc1c138</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Eigen::VectorXd</type>
      <name>eval</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a464299be73754bdde996cac844877175</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Eigen::VectorXd</type>
      <name>speed</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>aee6254ed615e98f3b2d96a76fac08166</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a1cbf0f303b3ece9dc97cfe33cef66045</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a446992512e198c8292d758d5ec6c044b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a8de1586c9761e5f14d1d66c7e6a09fbf</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const mc_rtc::Configuration &amp;config) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>finalize</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a57652be181ca173ac4a7fa8e8fa33509</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a28ff909c35eac08fad9710f9eb03251a</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToLogger</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>ab04252eb80e09da19eb1a0919998d3f1</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeFromLogger</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a349f7130d24ba00e1cf360403c8d507a</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::function&lt; bool(const mc_tasks::MetaTask &amp;task, std::string &amp;)&gt;</type>
      <name>buildCompletionCriteria</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a6b12fa2e9307d9fb9c760d05b1c04133</anchor>
      <arglist>(double dt, const mc_rtc::Configuration &amp;config) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>addToSolver</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a1af5b0e8d37ab0976c14641471493bc5</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const mc_rbdyn::Robots &amp;</type>
      <name>robots</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a77260d6774cb69d24d22e53890e7fa16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>rIndex</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a3c68bc924e1df10c374363d0aaaa15ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; tasks::qp::PositionTask &gt;</type>
      <name>errorT</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a89a472bd695ceec1bbbe1b932ec014fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>refVel_</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a9ceb455c41f015c22deaec76b8bd928e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>refAccel_</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a597121365d28a8e2ff4f8c550a5ac81c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>inSolver_</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>adea0ae231ddadbfdffa3f5355a3c9aab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; tasks::qp::TrajectoryTask &gt;</type>
      <name>trajectoryT_</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a779f644750cc4acd6692681dd255ea06</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrajectoryTaskGeneric&lt; tasks::qp::SurfaceTransformTask &gt;</name>
    <filename>a02457.html</filename>
    <base>mc_tasks::MetaTask</base>
    <member kind="typedef">
      <type>TrajectoryTaskGeneric&lt; tasks::qp::SurfaceTransformTask &gt;</type>
      <name>TrajectoryBase</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a477fb8de593f7ccaaea505e9e11229f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrajectoryTaskGeneric</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a3b341ee69d33864500eb7e0f68ffe599</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, double stiffness, double weight)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrajectoryTaskGeneric</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a723271227584b9a8af649ce887d9c947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a400018484b0f1d1799e02a1af09b8167</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refVel</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a4f8873db735f6c3cbb37761999059cdc</anchor>
      <arglist>(const Eigen::VectorXd &amp;vel)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>refVel</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a2f59cefb29eab9e55ceb6295e105de1b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refAccel</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a161a905db0c9a784de4e11ff07d5b064</anchor>
      <arglist>(const Eigen::VectorXd &amp;accel)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>refAccel</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a834542365fd040ef9b29142329d9b573</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stiffness</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a38374ba4bc699b91a3f49cbc9bcf2f11</anchor>
      <arglist>(double stiffness)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stiffness</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>ae901348ef6b40b04af30f6796714b4ff</anchor>
      <arglist>(const Eigen::VectorXd &amp;stiffness)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stiffness</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>abb15c105235008d7c43b813f581c1c92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>damping</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a82155cafc3a49ae1218ebd02e45c08b2</anchor>
      <arglist>(double damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>damping</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a0c4ccf6b3221b8b5f3de002b2eaf663b</anchor>
      <arglist>(const Eigen::VectorXd &amp;damping)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>damping</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a6c2aaa9a80d595b564c0bf982662ee72</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGains</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a418d47e753fc31eb16454bd4e3d8fd2d</anchor>
      <arglist>(double stiffness, double damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGains</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a67e5b618af03d13ba68512d2e0b9bc0e</anchor>
      <arglist>(const Eigen::VectorXd &amp;stiffness, const Eigen::VectorXd &amp;damping)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>dimStiffness</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a869ba83dfc87a3f4d29625d84231d804</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>dimDamping</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a7d35bbf3041054f4cd69aa772c2f5d9b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>weight</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>ae4bc16bb954fcdc7c75870b594eb2548</anchor>
      <arglist>(double w)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weight</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>addeac3a07caaeef74f6f62c7509767c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dimWeight</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a65007da65141c139006058f34b1f48ef</anchor>
      <arglist>(const Eigen::VectorXd &amp;dimW) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Eigen::VectorXd</type>
      <name>dimWeight</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>ab69cebe473f8c5f8a152726476655e6b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>selectActiveJoints</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a568cbb2dd1a32fa24a3d257dbc7f7ab7</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;activeJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;activeDofs={}, bool checkJoints=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>selectActiveJoints</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a401e0e9e9dc4acade920f05779540078</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const std::vector&lt; std::string &gt; &amp;activeJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;activeDofs={}) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>selectUnactiveJoints</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a17f76beb2ace280540b5687701343fa8</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;unactiveJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;unactiveDofs={}, bool checkJoints=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>selectUnactiveJoints</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>aad2277ab64458789c4b2e278cf7ff6c7</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const std::vector&lt; std::string &gt; &amp;unactiveJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;unactiveDofs={}) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetJointsSelector</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a28bd17d1de6e94cc16c84ec4057f763f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetJointsSelector</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a3db0df307cb2a7d9aeb8d8b4afc1c138</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Eigen::VectorXd</type>
      <name>eval</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a464299be73754bdde996cac844877175</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Eigen::VectorXd</type>
      <name>speed</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>aee6254ed615e98f3b2d96a76fac08166</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a1cbf0f303b3ece9dc97cfe33cef66045</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a446992512e198c8292d758d5ec6c044b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a8de1586c9761e5f14d1d66c7e6a09fbf</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const mc_rtc::Configuration &amp;config) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>finalize</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a57652be181ca173ac4a7fa8e8fa33509</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a28ff909c35eac08fad9710f9eb03251a</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToLogger</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>ab04252eb80e09da19eb1a0919998d3f1</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeFromLogger</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a349f7130d24ba00e1cf360403c8d507a</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::function&lt; bool(const mc_tasks::MetaTask &amp;task, std::string &amp;)&gt;</type>
      <name>buildCompletionCriteria</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a6b12fa2e9307d9fb9c760d05b1c04133</anchor>
      <arglist>(double dt, const mc_rtc::Configuration &amp;config) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>addToSolver</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a1af5b0e8d37ab0976c14641471493bc5</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const mc_rbdyn::Robots &amp;</type>
      <name>robots</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a77260d6774cb69d24d22e53890e7fa16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>rIndex</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a3c68bc924e1df10c374363d0aaaa15ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; tasks::qp::SurfaceTransformTask &gt;</type>
      <name>errorT</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a89a472bd695ceec1bbbe1b932ec014fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>refVel_</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a9ceb455c41f015c22deaec76b8bd928e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>refAccel_</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a597121365d28a8e2ff4f8c550a5ac81c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>inSolver_</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>adea0ae231ddadbfdffa3f5355a3c9aab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; tasks::qp::TrajectoryTask &gt;</type>
      <name>trajectoryT_</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a779f644750cc4acd6692681dd255ea06</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrajectoryTaskGeneric&lt; tasks::qp::TransformTask &gt;</name>
    <filename>a02457.html</filename>
    <base>mc_tasks::MetaTask</base>
    <member kind="typedef">
      <type>TrajectoryTaskGeneric&lt; tasks::qp::TransformTask &gt;</type>
      <name>TrajectoryBase</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a477fb8de593f7ccaaea505e9e11229f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrajectoryTaskGeneric</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a3b341ee69d33864500eb7e0f68ffe599</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, double stiffness, double weight)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrajectoryTaskGeneric</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a723271227584b9a8af649ce887d9c947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a400018484b0f1d1799e02a1af09b8167</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refVel</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a4f8873db735f6c3cbb37761999059cdc</anchor>
      <arglist>(const Eigen::VectorXd &amp;vel)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>refVel</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a2f59cefb29eab9e55ceb6295e105de1b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refAccel</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a161a905db0c9a784de4e11ff07d5b064</anchor>
      <arglist>(const Eigen::VectorXd &amp;accel)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>refAccel</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a834542365fd040ef9b29142329d9b573</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stiffness</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a38374ba4bc699b91a3f49cbc9bcf2f11</anchor>
      <arglist>(double stiffness)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stiffness</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>ae901348ef6b40b04af30f6796714b4ff</anchor>
      <arglist>(const Eigen::VectorXd &amp;stiffness)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stiffness</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>abb15c105235008d7c43b813f581c1c92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>damping</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a82155cafc3a49ae1218ebd02e45c08b2</anchor>
      <arglist>(double damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>damping</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a0c4ccf6b3221b8b5f3de002b2eaf663b</anchor>
      <arglist>(const Eigen::VectorXd &amp;damping)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>damping</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a6c2aaa9a80d595b564c0bf982662ee72</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGains</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a418d47e753fc31eb16454bd4e3d8fd2d</anchor>
      <arglist>(double stiffness, double damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGains</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a67e5b618af03d13ba68512d2e0b9bc0e</anchor>
      <arglist>(const Eigen::VectorXd &amp;stiffness, const Eigen::VectorXd &amp;damping)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>dimStiffness</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a869ba83dfc87a3f4d29625d84231d804</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>dimDamping</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a7d35bbf3041054f4cd69aa772c2f5d9b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>weight</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>ae4bc16bb954fcdc7c75870b594eb2548</anchor>
      <arglist>(double w)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weight</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>addeac3a07caaeef74f6f62c7509767c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dimWeight</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a65007da65141c139006058f34b1f48ef</anchor>
      <arglist>(const Eigen::VectorXd &amp;dimW) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Eigen::VectorXd</type>
      <name>dimWeight</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>ab69cebe473f8c5f8a152726476655e6b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>selectActiveJoints</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a568cbb2dd1a32fa24a3d257dbc7f7ab7</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;activeJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;activeDofs={}, bool checkJoints=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>selectActiveJoints</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a401e0e9e9dc4acade920f05779540078</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const std::vector&lt; std::string &gt; &amp;activeJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;activeDofs={}) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>selectUnactiveJoints</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a17f76beb2ace280540b5687701343fa8</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;unactiveJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;unactiveDofs={}, bool checkJoints=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>selectUnactiveJoints</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>aad2277ab64458789c4b2e278cf7ff6c7</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const std::vector&lt; std::string &gt; &amp;unactiveJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;unactiveDofs={}) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetJointsSelector</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a28bd17d1de6e94cc16c84ec4057f763f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetJointsSelector</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a3db0df307cb2a7d9aeb8d8b4afc1c138</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Eigen::VectorXd</type>
      <name>eval</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a464299be73754bdde996cac844877175</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Eigen::VectorXd</type>
      <name>speed</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>aee6254ed615e98f3b2d96a76fac08166</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a1cbf0f303b3ece9dc97cfe33cef66045</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a446992512e198c8292d758d5ec6c044b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a8de1586c9761e5f14d1d66c7e6a09fbf</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const mc_rtc::Configuration &amp;config) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>finalize</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a57652be181ca173ac4a7fa8e8fa33509</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a28ff909c35eac08fad9710f9eb03251a</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToLogger</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>ab04252eb80e09da19eb1a0919998d3f1</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeFromLogger</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a349f7130d24ba00e1cf360403c8d507a</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::function&lt; bool(const mc_tasks::MetaTask &amp;task, std::string &amp;)&gt;</type>
      <name>buildCompletionCriteria</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a6b12fa2e9307d9fb9c760d05b1c04133</anchor>
      <arglist>(double dt, const mc_rtc::Configuration &amp;config) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>addToSolver</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a1af5b0e8d37ab0976c14641471493bc5</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const mc_rbdyn::Robots &amp;</type>
      <name>robots</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a77260d6774cb69d24d22e53890e7fa16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>rIndex</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a3c68bc924e1df10c374363d0aaaa15ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; tasks::qp::TransformTask &gt;</type>
      <name>errorT</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a89a472bd695ceec1bbbe1b932ec014fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>refVel_</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a9ceb455c41f015c22deaec76b8bd928e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>refAccel_</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a597121365d28a8e2ff4f8c550a5ac81c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>inSolver_</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>adea0ae231ddadbfdffa3f5355a3c9aab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; tasks::qp::TrajectoryTask &gt;</type>
      <name>trajectoryT_</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a779f644750cc4acd6692681dd255ea06</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TrajectoryTaskGeneric&lt; tasks::qp::VectorOrientationTask &gt;</name>
    <filename>a02457.html</filename>
    <base>mc_tasks::MetaTask</base>
    <member kind="typedef">
      <type>TrajectoryTaskGeneric&lt; tasks::qp::VectorOrientationTask &gt;</type>
      <name>TrajectoryBase</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a477fb8de593f7ccaaea505e9e11229f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrajectoryTaskGeneric</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a3b341ee69d33864500eb7e0f68ffe599</anchor>
      <arglist>(const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, double stiffness, double weight)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrajectoryTaskGeneric</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a723271227584b9a8af649ce887d9c947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a400018484b0f1d1799e02a1af09b8167</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refVel</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a4f8873db735f6c3cbb37761999059cdc</anchor>
      <arglist>(const Eigen::VectorXd &amp;vel)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>refVel</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a2f59cefb29eab9e55ceb6295e105de1b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refAccel</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a161a905db0c9a784de4e11ff07d5b064</anchor>
      <arglist>(const Eigen::VectorXd &amp;accel)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>refAccel</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a834542365fd040ef9b29142329d9b573</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stiffness</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a38374ba4bc699b91a3f49cbc9bcf2f11</anchor>
      <arglist>(double stiffness)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stiffness</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>ae901348ef6b40b04af30f6796714b4ff</anchor>
      <arglist>(const Eigen::VectorXd &amp;stiffness)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stiffness</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>abb15c105235008d7c43b813f581c1c92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>damping</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a82155cafc3a49ae1218ebd02e45c08b2</anchor>
      <arglist>(double damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>damping</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a0c4ccf6b3221b8b5f3de002b2eaf663b</anchor>
      <arglist>(const Eigen::VectorXd &amp;damping)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>damping</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a6c2aaa9a80d595b564c0bf982662ee72</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGains</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a418d47e753fc31eb16454bd4e3d8fd2d</anchor>
      <arglist>(double stiffness, double damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGains</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a67e5b618af03d13ba68512d2e0b9bc0e</anchor>
      <arglist>(const Eigen::VectorXd &amp;stiffness, const Eigen::VectorXd &amp;damping)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>dimStiffness</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a869ba83dfc87a3f4d29625d84231d804</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>dimDamping</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a7d35bbf3041054f4cd69aa772c2f5d9b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>weight</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>ae4bc16bb954fcdc7c75870b594eb2548</anchor>
      <arglist>(double w)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weight</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>addeac3a07caaeef74f6f62c7509767c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dimWeight</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a65007da65141c139006058f34b1f48ef</anchor>
      <arglist>(const Eigen::VectorXd &amp;dimW) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Eigen::VectorXd</type>
      <name>dimWeight</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>ab69cebe473f8c5f8a152726476655e6b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>selectActiveJoints</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a568cbb2dd1a32fa24a3d257dbc7f7ab7</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;activeJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;activeDofs={}, bool checkJoints=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>selectActiveJoints</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a401e0e9e9dc4acade920f05779540078</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const std::vector&lt; std::string &gt; &amp;activeJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;activeDofs={}) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>selectUnactiveJoints</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a17f76beb2ace280540b5687701343fa8</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;unactiveJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;unactiveDofs={}, bool checkJoints=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>selectUnactiveJoints</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>aad2277ab64458789c4b2e278cf7ff6c7</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const std::vector&lt; std::string &gt; &amp;unactiveJointsName, const std::map&lt; std::string, std::vector&lt; std::array&lt; int, 2 &gt;&gt;&gt; &amp;unactiveDofs={}) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetJointsSelector</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a28bd17d1de6e94cc16c84ec4057f763f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetJointsSelector</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a3db0df307cb2a7d9aeb8d8b4afc1c138</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Eigen::VectorXd</type>
      <name>eval</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a464299be73754bdde996cac844877175</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Eigen::VectorXd</type>
      <name>speed</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>aee6254ed615e98f3b2d96a76fac08166</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>normalAcc</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a1cbf0f303b3ece9dc97cfe33cef66045</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jac</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a446992512e198c8292d758d5ec6c044b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a8de1586c9761e5f14d1d66c7e6a09fbf</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver, const mc_rtc::Configuration &amp;config) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>finalize</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a57652be181ca173ac4a7fa8e8fa33509</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a28ff909c35eac08fad9710f9eb03251a</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToLogger</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>ab04252eb80e09da19eb1a0919998d3f1</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeFromLogger</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a349f7130d24ba00e1cf360403c8d507a</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::function&lt; bool(const mc_tasks::MetaTask &amp;task, std::string &amp;)&gt;</type>
      <name>buildCompletionCriteria</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a6b12fa2e9307d9fb9c760d05b1c04133</anchor>
      <arglist>(double dt, const mc_rtc::Configuration &amp;config) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>addToSolver</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a1af5b0e8d37ab0976c14641471493bc5</anchor>
      <arglist>(mc_solver::QPSolver &amp;solver) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const mc_rbdyn::Robots &amp;</type>
      <name>robots</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a77260d6774cb69d24d22e53890e7fa16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>rIndex</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a3c68bc924e1df10c374363d0aaaa15ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; tasks::qp::VectorOrientationTask &gt;</type>
      <name>errorT</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a89a472bd695ceec1bbbe1b932ec014fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>refVel_</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a9ceb455c41f015c22deaec76b8bd928e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>refAccel_</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a597121365d28a8e2ff4f8c550a5ac81c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>inSolver_</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>adea0ae231ddadbfdffa3f5355a3c9aab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; tasks::qp::TrajectoryTask &gt;</type>
      <name>trajectoryT_</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a779f644750cc4acd6692681dd255ea06</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::TransformImpl</name>
    <filename>a02069.html</filename>
    <templarg>GetT</templarg>
    <templarg>SetT</templarg>
    <base>mc_rtc::gui::CommonInputImpl</base>
    <member kind="function">
      <type></type>
      <name>TransformImpl</name>
      <anchorfile>a02069.html</anchorfile>
      <anchor>a1483ccb550b761697c786f561b11e970</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, SetT set_fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02069.html</anchorfile>
      <anchor>aec9c9d90b11609bfa840aa7c3fd1a19c</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TransformImpl</name>
      <anchorfile>a02069.html</anchorfile>
      <anchor>acaf2d26843df186ed2ca354b90586163</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>a02069.html</anchorfile>
      <anchor>a7f8b306036dedba08cb160068ea9b759</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>a02069.html</anchorfile>
      <anchor>aeb03ff7486f988cc5a2f0ef8d96e793b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::TransformROImpl</name>
    <filename>a02065.html</filename>
    <templarg>GetT</templarg>
    <base>mc_rtc::gui::DataElement</base>
    <member kind="function">
      <type></type>
      <name>TransformROImpl</name>
      <anchorfile>a02065.html</anchorfile>
      <anchor>ad88471593f6707749be38dc161ba68d3</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02065.html</anchorfile>
      <anchor>a1fd1a86ab5dcbdae0718bf032aba51d3</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TransformROImpl</name>
      <anchorfile>a02065.html</anchorfile>
      <anchor>addc021aab7f8a9deb4df511d332797df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>a02065.html</anchorfile>
      <anchor>aa2d9aff3c8adfcf000c577c9e15df210</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>a02065.html</anchorfile>
      <anchor>acc345b440558ab6f45437f2db8b23e53</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_control::fsm::Transition</name>
    <filename>a01469.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>ad0d49171493519fb008c73e58696edc1</anchor>
      <arglist></arglist>
      <enumvalue file="a01469.html" anchor="ad0d49171493519fb008c73e58696edc1a68d8c641ebe12c46d077d8ff720c3bbd">StepByStep</enumvalue>
      <enumvalue file="a01469.html" anchor="ad0d49171493519fb008c73e58696edc1a06b9281e396db002010bde1de57262eb">Auto</enumvalue>
      <enumvalue file="a01469.html" anchor="ad0d49171493519fb008c73e58696edc1a2e979835dd62324f5bfe217449ba4974">Strict</enumvalue>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>state</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>a9fc7e260a07a8da86ee5724d47f9664a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Type</type>
      <name>type</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>aeb7c3f9f5d60af38b50cbd0caa1b2b65</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mc_control::fsm::TransitionMap</name>
    <filename>a01473.html</filename>
    <member kind="typedef">
      <type>std::pair&lt; std::string, std::string &gt;</type>
      <name>origin_t</name>
      <anchorfile>a01473.html</anchorfile>
      <anchor>ae92ec157ad130676dc1caff84eebae94</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; bool, Transition &gt;</type>
      <name>transition</name>
      <anchorfile>a01473.html</anchorfile>
      <anchor>ae22a9f786f98b01fe50849d23d690c93</anchor>
      <arglist>(const std::string &amp;state, const std::string &amp;output) const</arglist>
    </member>
    <member kind="function">
      <type>std::unordered_set&lt; std::string &gt;</type>
      <name>transitions</name>
      <anchorfile>a01473.html</anchorfile>
      <anchor>a604c23080c7e278d843ec3d0452ee599</anchor>
      <arglist>(const std::string &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a01473.html</anchorfile>
      <anchor>a961cc6df4c21830bb75f60de6f5904d2</anchor>
      <arglist>(const StateFactory &amp;factory, const mc_rtc::Configuration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>initState</name>
      <anchorfile>a01473.html</anchorfile>
      <anchor>a85cfacc20b7ca6c22181193031a0f922</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a01473.html</anchorfile>
      <anchor>a0e247cf49772c5bade453bd823a75923</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_solver::utils::Update</name>
    <filename>a02309.html</filename>
    <templarg>UpdateNrVars</templarg>
    <base>mc_solver::utils::UpdateTag</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>Update</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ad172325243564a16279d9392bd86efa5</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Update</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a806d3dc017b28e570dfa268a32a55600</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Update</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ab8ad71dd3414ee8bccc766c7bc8b4dc3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>compute</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a8f658eb01d91768ab6a4e9b095a894de</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>A</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>adcc1dc8dc0563b2e14f962f26afbfa5f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateImpl</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ab889dcd5361a420fe976146c40f56533</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;, const tasks::qp::SolverData &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::MatrixXd</type>
      <name>AFull_</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a6ba3138c342b7e4efa2328ac11930706</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Update&lt; UpdateNrVarsLambda &gt;</name>
    <filename>a02309.html</filename>
    <base>mc_solver::utils::UpdateNrVarsLambda</base>
    <base>mc_solver::utils::UpdateTag</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>Update</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ad172325243564a16279d9392bd86efa5</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Update</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a806d3dc017b28e570dfa268a32a55600</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Update</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ab8ad71dd3414ee8bccc766c7bc8b4dc3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>compute</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a8f658eb01d91768ab6a4e9b095a894de</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>A</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>adcc1dc8dc0563b2e14f962f26afbfa5f</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateImpl</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ab889dcd5361a420fe976146c40f56533</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;, const tasks::qp::SolverData &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::MatrixXd</type>
      <name>AFull_</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a6ba3138c342b7e4efa2328ac11930706</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_solver::utils::UpdateForce</name>
    <filename>a02317.html</filename>
    <base>Update&lt; UpdateNrVarsLambda &gt;</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>UpdateForce</name>
      <anchorfile>a02317.html</anchorfile>
      <anchor>ac7cfe8520ea50dc9cbf285f433769d11</anchor>
      <arglist>(const mc_solver::QPSolver &amp;solver, const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateImpl</name>
      <anchorfile>a02317.html</anchorfile>
      <anchor>a147dd26742af4a2879ffdead8b3ab93d</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;, const std::vector&lt; rbd::MultiBodyConfig &gt; &amp;, const tasks::qp::SolverData &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_solver::utils::UpdateNrVarsData</name>
    <filename>a02321.html</filename>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nrVars_</name>
      <anchorfile>a02321.html</anchorfile>
      <anchor>a3c4a15ad329aedecdfd932aaffe4ff76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>ABegin_</name>
      <anchorfile>a02321.html</anchorfile>
      <anchor>ac7940f913dbc5037ed042609f685bfaa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_solver::utils::UpdateNrVarsLambda</name>
    <filename>a02329.html</filename>
    <base>mc_solver::utils::UpdateNrVarsData</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>UpdateNrVarsLambda</name>
      <anchorfile>a02329.html</anchorfile>
      <anchor>a9d6f46e4b6e93b51903495758aecd406</anchor>
      <arglist>(const tasks::qp::ContactId &amp;cid)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNrVarsImpl</name>
      <anchorfile>a02329.html</anchorfile>
      <anchor>a3c7ce960742e1844186550b503af6207</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const tasks::qp::SolverData &amp;data)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>tasks::qp::ContactId</type>
      <name>cid_</name>
      <anchorfile>a02329.html</anchorfile>
      <anchor>a855dd9e41399b5a6271e9b4e02576b23</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_solver::utils::UpdateNrVarsRobot</name>
    <filename>a02325.html</filename>
    <base>mc_solver::utils::UpdateNrVarsData</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>UpdateNrVarsRobot</name>
      <anchorfile>a02325.html</anchorfile>
      <anchor>a31e4270c070674e663da7513abcec55d</anchor>
      <arglist>(unsigned int rIndex)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNrVarsImpl</name>
      <anchorfile>a02325.html</anchorfile>
      <anchor>a7039825cc623155d75ab86f48a33e48e</anchor>
      <arglist>(const std::vector&lt; rbd::MultiBody &gt; &amp;mbs, const tasks::qp::SolverData &amp;data)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>rIndex_</name>
      <anchorfile>a02325.html</anchorfile>
      <anchor>a55f510b20375d30a9f432a1d4f5a773d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_solver::utils::UpdateTag</name>
    <filename>a02305.html</filename>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::VectorOrientationTask</name>
    <filename>a02461.html</filename>
    <base>TrajectoryTaskGeneric&lt; tasks::qp::VectorOrientationTask &gt;</base>
    <member kind="function">
      <type></type>
      <name>VectorOrientationTask</name>
      <anchorfile>a02461.html</anchorfile>
      <anchor>ac24b6093fa849811dd07a0ab2ace17c0</anchor>
      <arglist>(const std::string &amp;bodyName, const Eigen::Vector3d &amp;bodyVector, const Eigen::Vector3d &amp;targetVector, const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, double stiffness=2.0, double weight=500)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorOrientationTask</name>
      <anchorfile>a02461.html</anchorfile>
      <anchor>a60f2e467ea49160a0037f8aa2470bdbc</anchor>
      <arglist>(const std::string &amp;bodyName, const Eigen::Vector3d &amp;bodyVector, const mc_rbdyn::Robots &amp;robots, unsigned int robotIndex, double stiffness=2.0, double weight=500)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>a02461.html</anchorfile>
      <anchor>a04b7aba6c4e4d4abd746c19e12c650e6</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bodyVector</name>
      <anchorfile>a02461.html</anchorfile>
      <anchor>ae066b3584e94bfca4abe3f93e2d826c4</anchor>
      <arglist>(const Eigen::Vector3d &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>bodyVector</name>
      <anchorfile>a02461.html</anchorfile>
      <anchor>a92edeb5ec1b0291f9909f98e8522c37e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>targetVector</name>
      <anchorfile>a02461.html</anchorfile>
      <anchor>a8a2c67e86c6867c837129bb81834ccf4</anchor>
      <arglist>(const Eigen::Vector3d &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>targetVector</name>
      <anchorfile>a02461.html</anchorfile>
      <anchor>a9773f23cd1f91fa767b7c3ae49b6cb3d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>actual</name>
      <anchorfile>a02461.html</anchorfile>
      <anchor>a0755b43ee0cbc12ba4fccd7008098ecf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>body</name>
      <anchorfile>a02461.html</anchorfile>
      <anchor>a9531e6144e6dd8823951374d95397d27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>a02461.html</anchorfile>
      <anchor>aef3c3a8b836ba15e7bd062d841399ad4</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;gui) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToLogger</name>
      <anchorfile>a02461.html</anchorfile>
      <anchor>ae2ea06fdeee5903edcbfb8da2bd55af4</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeFromLogger</name>
      <anchorfile>a02461.html</anchorfile>
      <anchor>a077b7176cf69a042e7c31b7dd5a76490</anchor>
      <arglist>(mc_rtc::Logger &amp;logger) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>bodyName</name>
      <anchorfile>a02461.html</anchorfile>
      <anchor>aff910f1c3ed3b698c50408dfb66eb7c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>bIndex</name>
      <anchorfile>a02461.html</anchorfile>
      <anchor>a59e4464e07872bfd5e5cbe19cb6b2948</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::VisualMap</name>
    <filename>a01757.html</filename>
    <member kind="function">
      <type></type>
      <name>VisualMap</name>
      <anchorfile>a01757.html</anchorfile>
      <anchor>abd6e8a7131d62002125d9cdc291719bf</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VisualMap</name>
      <anchorfile>a01757.html</anchorfile>
      <anchor>ac58a4bfb954bb2596131d9dcf1bd54ec</anchor>
      <arglist>(const VisualMap &amp;v)=default</arglist>
    </member>
    <member kind="function">
      <type>VisualMap &amp;</type>
      <name>operator=</name>
      <anchorfile>a01757.html</anchorfile>
      <anchor>a7b4d1a9917b3bc796db270228d699411</anchor>
      <arglist>(const VisualMap &amp;v)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VisualMap</name>
      <anchorfile>a01757.html</anchorfile>
      <anchor>a9ce12bfdd7e0edfaa4afbcce9764279a</anchor>
      <arglist>(VisualMap &amp;&amp;v)=default</arglist>
    </member>
    <member kind="function">
      <type>VisualMap &amp;</type>
      <name>operator=</name>
      <anchorfile>a01757.html</anchorfile>
      <anchor>a12a6994b9750a77e0543846be016a263</anchor>
      <arglist>(VisualMap &amp;&amp;v)=default</arglist>
    </member>
    <member kind="function">
      <type>MC_RTC_DEPRECATED MC_RBDYN_DLLAPI</type>
      <name>VisualMap</name>
      <anchorfile>a01757.html</anchorfile>
      <anchor>a5a7913eda1566657722387ae559127ab</anchor>
      <arglist>(const std::map&lt; std::string, std::vector&lt; mc_rbdyn_urdf::Visual &gt;&gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>MC_RTC_DEPRECATED MC_RBDYN_DLLAPI VisualMap &amp;</type>
      <name>operator=</name>
      <anchorfile>a01757.html</anchorfile>
      <anchor>aace9203b0cf03c1813dbb51060a1681d</anchor>
      <arglist>(const std::map&lt; std::string, std::vector&lt; mc_rbdyn_urdf::Visual &gt;&gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::VoidCallbackElement</name>
    <filename>a01929.html</filename>
    <templarg>ElementT</templarg>
    <templarg>Callback</templarg>
    <base>mc_rtc::gui::CallbackElement</base>
    <member kind="function">
      <type>bool</type>
      <name>handleRequest</name>
      <anchorfile>a01929.html</anchorfile>
      <anchor>ab8cda0e74e03f5e56ae5bd42bb7b9b41</anchor>
      <arglist>(const mc_rtc::Configuration &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VoidCallbackElement</name>
      <anchorfile>a01929.html</anchorfile>
      <anchor>a9d063c0de86c3ba0f038908d146ca298</anchor>
      <arglist>(const std::string &amp;name, Callback cb, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VoidCallbackElement</name>
      <anchorfile>a01929.html</anchorfile>
      <anchor>a350d19023027682fb550a84099cd96da</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VoidCallbackElement&lt; DataElement&lt; GetT &gt;, Callback &gt;</name>
    <filename>a01929.html</filename>
    <base>CallbackElement&lt; DataElement&lt; GetT &gt;, Callback &gt;</base>
    <member kind="function">
      <type>bool</type>
      <name>handleRequest</name>
      <anchorfile>a01929.html</anchorfile>
      <anchor>ab8cda0e74e03f5e56ae5bd42bb7b9b41</anchor>
      <arglist>(const mc_rtc::Configuration &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VoidCallbackElement</name>
      <anchorfile>a01929.html</anchorfile>
      <anchor>a9d063c0de86c3ba0f038908d146ca298</anchor>
      <arglist>(const std::string &amp;name, Callback cb, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VoidCallbackElement</name>
      <anchorfile>a01929.html</anchorfile>
      <anchor>a350d19023027682fb550a84099cd96da</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VoidCallbackElement&lt; Element, Callback &gt;</name>
    <filename>a01929.html</filename>
    <base>CallbackElement&lt; Element, Callback &gt;</base>
    <member kind="function">
      <type>bool</type>
      <name>handleRequest</name>
      <anchorfile>a01929.html</anchorfile>
      <anchor>ab8cda0e74e03f5e56ae5bd42bb7b9b41</anchor>
      <arglist>(const mc_rtc::Configuration &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VoidCallbackElement</name>
      <anchorfile>a01929.html</anchorfile>
      <anchor>a9d063c0de86c3ba0f038908d146ca298</anchor>
      <arglist>(const std::string &amp;name, Callback cb, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VoidCallbackElement</name>
      <anchorfile>a01929.html</anchorfile>
      <anchor>a350d19023027682fb550a84099cd96da</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::XYThetaImpl</name>
    <filename>a02097.html</filename>
    <templarg>GetT</templarg>
    <templarg>SetT</templarg>
    <base>mc_rtc::gui::CommonInputImpl</base>
    <member kind="function">
      <type></type>
      <name>XYThetaImpl</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a6de2e9a332b75b696ddbd1167dc31d1b</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, SetT set_fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a247757b0f4f2f7537cd966304f6395fc</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XYThetaImpl</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>ad69684bdac6275e7cd47e84f786cac2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>ada9a5e8aafdff45f17263ae02a574970</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a3db5a65e4c481b435a71e15ac8715c26</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rtc::gui::XYThetaROImpl</name>
    <filename>a02093.html</filename>
    <templarg>GetT</templarg>
    <base>mc_rtc::gui::DataElement</base>
    <member kind="function">
      <type></type>
      <name>XYThetaROImpl</name>
      <anchorfile>a02093.html</anchorfile>
      <anchor>ac0153847ff6a36d76c47cae5292be192</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XYThetaROImpl</name>
      <anchorfile>a02093.html</anchorfile>
      <anchor>a17aa4be99cbd7e12a198638912b80726</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02093.html</anchorfile>
      <anchor>a2a9635b525b47f997fffcf697ae4b2f5</anchor>
      <arglist>(mc_rtc::MessagePackBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>write_size</name>
      <anchorfile>a02093.html</anchorfile>
      <anchor>a10d9c0c5738157dac5fdb0e5dec24c21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>a02093.html</anchorfile>
      <anchor>aff70a2c515c79366813abd70e1d09996</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_solver::ZMP</name>
    <filename>a02289.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>x</name>
      <anchorfile>a02289.html</anchorfile>
      <anchor>aa979cfc7765a146ead01123e495c5975</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>y</name>
      <anchorfile>a02289.html</anchorfile>
      <anchor>a8ebbc2b867780670fbc08d80f4aea2cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>z</name>
      <anchorfile>a02289.html</anchorfile>
      <anchor>a0eedbcf95ebb3248a39c8c66e92d7b77</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_tasks::lipm_stabilizer::ZMPCC</name>
    <filename>a02401.html</filename>
    <member kind="typedef">
      <type>mc_rbdyn::lipm_stabilizer::ZMPCCConfiguration</type>
      <name>ZMPCCConfiguration</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>a1949eb437a14ae9ceb04a1ed238fa998</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>a337c9b157af0808f644a5ca5a212540b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enabled</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>acdb0bbf4b891e1b1f980b49094d65f3d</anchor>
      <arglist>(bool state)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>enabled</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>a93c9cac97f5aed86b1188a82e9e250dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configure</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>a63c6fb35d5efd1595a1ead7be388c0df</anchor>
      <arglist>(ZMPCCConfiguration &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>const ZMPCCConfiguration &amp;</type>
      <name>config</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>a281bb3e9109c0c16fdbaf7911ed98ec5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>a616fc85f14d61c0e6294489bad2e8e0a</anchor>
      <arglist>(const Eigen::Vector3d &amp;distribZMP, const Eigen::Vector3d &amp;measuredZMP, const sva::PTransformd &amp;zmpFrame, double dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>aada037584c879e69d66e658653912815</anchor>
      <arglist>(Eigen::Vector3d &amp;com, Eigen::Vector3d &amp;comd, Eigen::Vector3d &amp;comdd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToGUI</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>aa6a76ddd8651adac9e8772a9ef2ca396</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;gui, const std::vector&lt; std::string &gt; &amp;category)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromGUI</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>adf1a26be8c1a383107550957a6d40b13</anchor>
      <arglist>(mc_rtc::gui::StateBuilder &amp;gui, const std::vector&lt; std::string &gt; &amp;category)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToLogger</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>a35c033fbff0a99c72d70751d62f2a0b0</anchor>
      <arglist>(mc_rtc::Logger &amp;logger, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromLogger</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>a9d4e0e9eaf138dfaa82dfea9c08495e4</anchor>
      <arglist>(mc_rtc::Logger &amp;logger, const std::string &amp;name)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ZMPCCConfiguration</type>
      <name>config_</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>a22b7b347161460c0ac0ac763fea70afe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>comAccel_</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>a9860625ea9c4d86a42378e66afc72699</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>comOffset_</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>a2da2e9aad02100150a009ff6b411b765</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>comVel_</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>a2395abc9208874ea125454fce9e6981b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>error_</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>af7d8d84e9eabf8762d42feae2ce8457d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mc_filter::LeakyIntegrator&lt; Eigen::Vector3d &gt;</type>
      <name>integrator_</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>aeb470a80e8c6b811cbe485350f83d15b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>enabled_</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>a29b2c8d74fda4601ddc13b86b6466b7f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mc_rbdyn::lipm_stabilizer::ZMPCCConfiguration</name>
    <filename>a01701.html</filename>
    <member kind="variable">
      <type>EIGEN_MAKE_ALIGNED_OPERATOR_NEW Eigen::Vector2d</type>
      <name>comAdmittance</name>
      <anchorfile>a01701.html</anchorfile>
      <anchor>ad6b1427db5969e53c93eda40b82c29c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>integratorLeakRate</name>
      <anchorfile>a01701.html</anchorfile>
      <anchor>a3c05d238cf8b0b2803e502985898c9ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>maxCoMOffset</name>
      <anchorfile>a01701.html</anchorfile>
      <anchor>a1d42904ddf94ae3ac2660f01dd5e8ed9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>maxCoMAdmitance</name>
      <anchorfile>a01701.html</anchorfile>
      <anchor>ab4355cd8a898d9fb511b6820b4573902</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>fmt</name>
    <filename>a00782.html</filename>
    <class kind="struct">fmt::formatter&lt; mc_rtc::Configuration &gt;</class>
  </compound>
  <compound kind="namespace">
    <name>geos</name>
    <filename>a00776.html</filename>
    <namespace>geos::geom</namespace>
  </compound>
  <compound kind="namespace">
    <name>geos::geom</name>
    <filename>a00777.html</filename>
  </compound>
  <compound kind="namespace">
    <name>mc_control</name>
    <filename>a00761.html</filename>
    <namespace>mc_control::fsm</namespace>
    <class kind="struct">mc_control::CompletionCriteria</class>
    <class kind="struct">mc_control::ControllerClient</class>
    <class kind="class">mc_control::ControllerResetData</class>
    <class kind="struct">mc_control::ControllerServer</class>
    <class kind="struct">mc_control::ElementId</class>
    <class kind="struct">mc_control::GlobalPlugin</class>
    <class kind="struct">mc_control::Gripper</class>
    <class kind="class">mc_control::MCController</class>
    <class kind="struct">mc_control::MCGlobalController</class>
    <class kind="struct">mc_control::MCPythonController</class>
    <class kind="struct">mc_control::PythonRWCallback</class>
    <class kind="struct">mc_control::SimulationContactPair</class>
    <member kind="typedef">
      <type>mc_rtc::Configuration</type>
      <name>Configuration</name>
      <anchorfile>a00761.html</anchorfile>
      <anchor>a6e724381ca619d4c38da5fd7cdbfe9c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Gripper &gt;</type>
      <name>GripperPtr</name>
      <anchorfile>a00761.html</anchorfile>
      <anchor>a67d3b51822d3e7d0c56d9af675f9eaa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reference_wrapper&lt; Gripper &gt;</type>
      <name>GripperRef</name>
      <anchorfile>a00761.html</anchorfile>
      <anchor>a39b3dee4f4017bab0f389d9bfd7877dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; GlobalPlugin, mc_rtc::ObjectLoader&lt; GlobalPlugin &gt;::ObjectDeleter &gt;</type>
      <name>GlobalPluginPtr</name>
      <anchorfile>a00761.html</anchorfile>
      <anchor>a077624dc5665df1a3e145d0283e10c78</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>mc_control::fsm</name>
    <filename>a00762.html</filename>
    <class kind="struct">mc_control::fsm::AddRemoveContactState</class>
    <class kind="class">mc_control::fsm::Contact</class>
    <class kind="class">mc_control::fsm::Controller</class>
    <class kind="class">mc_control::fsm::Executor</class>
    <class kind="struct">mc_control::fsm::Grippers</class>
    <class kind="struct">mc_control::fsm::HalfSittingState</class>
    <class kind="struct">mc_control::fsm::MessageState</class>
    <class kind="struct">mc_control::fsm::MetaState</class>
    <class kind="struct">mc_control::fsm::MetaTasksState</class>
    <class kind="struct">mc_control::fsm::ParallelState</class>
    <class kind="struct">mc_control::fsm::PauseState</class>
    <class kind="struct">mc_control::fsm::PythonState</class>
    <class kind="struct">mc_control::fsm::SlidingFootContactState</class>
    <class kind="struct">mc_control::fsm::StabilizerStandingState</class>
    <class kind="class">mc_control::fsm::State</class>
    <class kind="class">mc_control::fsm::StateFactory</class>
    <class kind="class">mc_control::fsm::Transition</class>
    <class kind="class">mc_control::fsm::TransitionMap</class>
    <member kind="typedef">
      <type>std::unordered_set&lt; Contact, std::hash&lt; Contact &gt;, std::equal_to&lt; Contact &gt;, Eigen::aligned_allocator&lt; Contact &gt; &gt;</type>
      <name>ContactSet</name>
      <anchorfile>a00762.html</anchorfile>
      <anchor>ad410c6443a64d561960fe4bd490154d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; State &gt;</type>
      <name>StatePtr</name>
      <anchorfile>a00762.html</anchorfile>
      <anchor>a4c42d903de4c4a1e5ad50c37bc2d547a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct MC_CONTROL_FSM_DLLAPI</type>
      <name>Controller</name>
      <anchorfile>a00762.html</anchorfile>
      <anchor>a3d06e24faff23eaa588f3820e74042b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct MC_CONTROL_FSM_STATE_DLLAPI</type>
      <name>AddRemoveContactStateImpl</name>
      <anchorfile>a00762.html</anchorfile>
      <anchor>a2deb94750a61f8f86801bd02f4149d5e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>mc_filter</name>
    <filename>a00767.html</filename>
    <namespace>mc_filter::utils</namespace>
    <class kind="struct">mc_filter::ExponentialMovingAverage</class>
    <class kind="struct">mc_filter::LeakyIntegrator</class>
    <class kind="struct">mc_filter::LowPass</class>
    <class kind="struct">mc_filter::LowPassFiniteDifferences</class>
    <class kind="struct">mc_filter::StationaryOffset</class>
  </compound>
  <compound kind="namespace">
    <name>mc_filter::utils</name>
    <filename>a00768.html</filename>
    <member kind="function">
      <type>double</type>
      <name>clamp</name>
      <anchorfile>a00768.html</anchorfile>
      <anchor>adfd3c18de5d65e94ce24d479f30dab1b</anchor>
      <arglist>(double value, double lower, double upper)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clampInPlace</name>
      <anchorfile>a00768.html</anchorfile>
      <anchor>ab8d9ca10808c933f3408d9b3f0fd72ab</anchor>
      <arglist>(double &amp;value, double lower, double upper)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>clampAndWarn</name>
      <anchorfile>a00768.html</anchorfile>
      <anchor>ae558cb782558a6fe59c9975f5e9dc2b4</anchor>
      <arglist>(double value, double lower, double upper, const std::string &amp;label)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clampInPlaceAndWarn</name>
      <anchorfile>a00768.html</anchorfile>
      <anchor>ac413b7125d296374adc252995e63570d</anchor>
      <arglist>(double &amp;value, double lower, double upper, const std::string &amp;label)</arglist>
    </member>
    <member kind="function">
      <type>VectorT</type>
      <name>clamp</name>
      <anchorfile>a00768.html</anchorfile>
      <anchor>a644eea0a16a707328be39ddd79f967f5</anchor>
      <arglist>(const VectorT &amp;v, double lower, double upper)</arglist>
    </member>
    <member kind="function">
      <type>VectorT</type>
      <name>clamp</name>
      <anchorfile>a00768.html</anchorfile>
      <anchor>a27751a2cc46af2d62717f6f52c518382</anchor>
      <arglist>(const VectorT &amp;v, const VectorT &amp;lower, const VectorT &amp;upper)</arglist>
    </member>
    <member kind="function">
      <type>VectorT</type>
      <name>clampAndWarn</name>
      <anchorfile>a00768.html</anchorfile>
      <anchor>aab0443f3755eb02422bb0ed23308f220</anchor>
      <arglist>(const VectorT &amp;v, const VectorT &amp;lower, const VectorT &amp;upper, const std::string &amp;label)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clampInPlace</name>
      <anchorfile>a00768.html</anchorfile>
      <anchor>a7ee9282ad316cf4eef418c7060fcfcf9</anchor>
      <arglist>(VectorT &amp;v, const VectorT &amp;lower, const VectorT &amp;upper)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clampInPlace</name>
      <anchorfile>a00768.html</anchorfile>
      <anchor>a4de43cd1afd6571c2b390ac00c3ed252</anchor>
      <arglist>(VectorT &amp;v, double lower, double upper)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clampInPlaceAndWarn</name>
      <anchorfile>a00768.html</anchorfile>
      <anchor>aae7592fcc8c4adee0d0108bc9ffba659</anchor>
      <arglist>(VectorT &amp;vector, const VectorT &amp;lower, const VectorT &amp;upper, const std::string &amp;label)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>mc_observers</name>
    <filename>a00769.html</filename>
    <class kind="struct">mc_observers::BodySensorObserver</class>
    <class kind="struct">mc_observers::EncoderObserver</class>
    <class kind="struct">mc_observers::KinematicInertialObserver</class>
    <class kind="struct">mc_observers::KinematicInertialPoseObserver</class>
    <class kind="struct">mc_observers::Observer</class>
    <class kind="class">mc_observers::ObserverLoader</class>
    <member kind="typedef">
      <type>std::shared_ptr&lt; mc_observers::Observer &gt;</type>
      <name>ObserverPtr</name>
      <anchorfile>a00769.html</anchorfile>
      <anchor>a45c5f50ee1e5bcc4959faef24b334643</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>mc_planning</name>
    <filename>a00770.html</filename>
    <namespace>mc_planning::linear_control_system</namespace>
    <namespace>mc_planning::motion_interpolator</namespace>
    <class kind="struct">mc_planning::generator</class>
    <class kind="struct">mc_planning::LookupTable</class>
    <class kind="struct">mc_planning::Pendulum</class>
    <class kind="class">mc_planning::StateP</class>
    <class kind="class">mc_planning::StatePV</class>
    <class kind="class">mc_planning::StatePVA</class>
    <member kind="function">
      <type>T</type>
      <name>Max</name>
      <anchorfile>a00770.html</anchorfile>
      <anchor>a77e75e0c5ab73614fdabf02cfe5383f2</anchor>
      <arglist>(const T &amp;a, const T &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>Min</name>
      <anchorfile>a00770.html</anchorfile>
      <anchor>aeba1312fcec6bc5dd3a699abe286dc7f</anchor>
      <arglist>(const T &amp;a, const T &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Sign</name>
      <anchorfile>a00770.html</anchorfile>
      <anchor>a54ed53a0c1179e5cbe3137d3f1bffdc1</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>Pow2</name>
      <anchorfile>a00770.html</anchorfile>
      <anchor>a3b1da3986483c48daa2f55dd19dcde12</anchor>
      <arglist>(const T &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>polynomial3</name>
      <anchorfile>a00770.html</anchorfile>
      <anchor>a7d44e247083bbf988790f1152b81e28d</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dpolynomial3</name>
      <anchorfile>a00770.html</anchorfile>
      <anchor>a0f774a7281f3bd1ae5b84e52eba5ff0f</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ddpolynomial3</name>
      <anchorfile>a00770.html</anchorfile>
      <anchor>ae074c7900007cbf543dc142b241af635</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>polynomial5</name>
      <anchorfile>a00770.html</anchorfile>
      <anchor>a0be840217b178b89f9c1066b686e1a33</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dpolynomial5</name>
      <anchorfile>a00770.html</anchorfile>
      <anchor>a4f69ccba3da0a430e76341f21b61faac</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>ddpolynomial5</name>
      <anchorfile>a00770.html</anchorfile>
      <anchor>a48f20559330be5b61eee1c7f07f15439</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix3d __ATTRIBUTE_ALWAYS_INLINE__</type>
      <name>rotFromRoll</name>
      <anchorfile>a00770.html</anchorfile>
      <anchor>a6e32988e21d696ca35f2ef1107cc5335</anchor>
      <arglist>(const double &amp;roll)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix3d __ATTRIBUTE_ALWAYS_INLINE__</type>
      <name>rotFromPitch</name>
      <anchorfile>a00770.html</anchorfile>
      <anchor>a8923a621478e1390a0991289746448c4</anchor>
      <arglist>(const double &amp;pitch)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix3d __ATTRIBUTE_ALWAYS_INLINE__</type>
      <name>rotFromYaw</name>
      <anchorfile>a00770.html</anchorfile>
      <anchor>aca9d30cbef9ce8be81c7cf69bf0f4310</anchor>
      <arglist>(const double &amp;yaw)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix3d __ATTRIBUTE_ALWAYS_INLINE__</type>
      <name>rotFromYrp</name>
      <anchorfile>a00770.html</anchorfile>
      <anchor>a0eb1869f9a9e5b724ec1566abec4889b</anchor>
      <arglist>(const double &amp;y, const double &amp;r, const double &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix3d __ATTRIBUTE_ALWAYS_INLINE__</type>
      <name>rotFromAngleAxis</name>
      <anchorfile>a00770.html</anchorfile>
      <anchor>a29b3ca0902b5824679da6ac8ceaf6f95</anchor>
      <arglist>(const double &amp;angles, const Eigen::Vector3d &amp;axis)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix3d __ATTRIBUTE_ALWAYS_INLINE__</type>
      <name>rotFromAngleAxis</name>
      <anchorfile>a00770.html</anchorfile>
      <anchor>a3c188db48f271a25f929711aca37830c</anchor>
      <arglist>(const Eigen::Vector3d &amp;omega, const double eps=1.0e-6)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix3d __ATTRIBUTE_ALWAYS_INLINE__</type>
      <name>rotFromAngleAxis</name>
      <anchorfile>a00770.html</anchorfile>
      <anchor>a3cb20dd931fb31b10d21c717e42ed981</anchor>
      <arglist>(double e1, double e2, double e3, const double eps=1.0e-6)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>yrpFromRot</name>
      <anchorfile>a00770.html</anchorfile>
      <anchor>a27200086b55d4f6db3cca5f3e8cfad77</anchor>
      <arglist>(const Eigen::Matrix3d &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yawFromRot</name>
      <anchorfile>a00770.html</anchorfile>
      <anchor>a3e716e801c02ba99aac1a8f00957d432</anchor>
      <arglist>(const Eigen::Matrix3d &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>omegaFromRotApproximation</name>
      <anchorfile>a00770.html</anchorfile>
      <anchor>a63de295b37b4909c8990e59b7956aae7</anchor>
      <arglist>(const Eigen::Matrix3d &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix3d</type>
      <name>mergeTiltWithYaw</name>
      <anchorfile>a00770.html</anchorfile>
      <anchor>a1f6a2eef9cc13af4bf24c95e6c573afc</anchor>
      <arglist>(const Eigen::Vector3d &amp;Rtez, const Eigen::Matrix3d &amp;R2)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix3d</type>
      <name>mergeRoll1Pitch1WithYaw2</name>
      <anchorfile>a00770.html</anchorfile>
      <anchor>a6f7af0610c03e0c615fc78013ba9b15b</anchor>
      <arglist>(const Eigen::Matrix3d &amp;R1, const Eigen::Matrix3d &amp;R2)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Saturation</name>
      <anchorfile>a00770.html</anchorfile>
      <anchor>a0d04194ade47bf352564bae818c9a8b2</anchor>
      <arglist>(const double &amp;data, const double ulimit, const double llimit)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Threshold</name>
      <anchorfile>a00770.html</anchorfile>
      <anchor>a6f09230db504405705692a48e593fb02</anchor>
      <arglist>(const double &amp;data, const double ulimit, const double llimit)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>NormalizedTrapezoidCurve</name>
      <anchorfile>a00770.html</anchorfile>
      <anchor>aa990bf0ad77ef576f2794e983dfb706b</anchor>
      <arglist>(int n_now, int n_ini, int n_acc, int n_dec, int n_end)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>LowPassFilter</name>
      <anchorfile>a00770.html</anchorfile>
      <anchor>a9617673ee411056e60fade786cc447b8</anchor>
      <arglist>(const T &amp;data, T &amp;data_lpf, const double gain)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>HighPassFilter</name>
      <anchorfile>a00770.html</anchorfile>
      <anchor>aeed0bbf5c7d1d20c584e2373510da248</anchor>
      <arglist>(const T &amp;data, T &amp;data_hpf, const double gain)</arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>epsilonAngle</name>
      <anchorfile>a00770.html</anchorfile>
      <anchor>aa31dafa3127b8c839cb563956f5cdabc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>mc_planning::linear_control_system</name>
    <filename>a00772.html</filename>
    <class kind="struct">mc_planning::linear_control_system::LinearControl3</class>
    <class kind="struct">mc_planning::linear_control_system::LinearTimeVariantInvertedPendulum</class>
    <class kind="class">mc_planning::linear_control_system::LIPMControlByPoleAssign</class>
    <class kind="class">mc_planning::linear_control_system::LIPMControlByPoleAssignWithExternalForce</class>
  </compound>
  <compound kind="namespace">
    <name>mc_planning::motion_interpolator</name>
    <filename>a00771.html</filename>
    <class kind="class">mc_planning::motion_interpolator::ClampedCubicSpline</class>
    <class kind="class">mc_planning::motion_interpolator::CubicSplineBase</class>
    <class kind="class">mc_planning::motion_interpolator::InterpolatorBase</class>
    <class kind="class">mc_planning::motion_interpolator::InterpolatorDataType</class>
    <member kind="enumeration">
      <type></type>
      <name>interpolator_type</name>
      <anchorfile>a00771.html</anchorfile>
      <anchor>a7ea0c29c7e1dd0f17827e74bc06e12cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_SELECTED</name>
      <anchorfile>a00771.html</anchorfile>
      <anchor>a7ea0c29c7e1dd0f17827e74bc06e12cda4187d8ccd4ca751d4bdb993070c5dc60</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CLAMPED_CUBIC_SPLINE</name>
      <anchorfile>a00771.html</anchorfile>
      <anchor>a7ea0c29c7e1dd0f17827e74bc06e12cda36a380d3e85fe7f8b6cb9afabf8cb187</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>mc_rbdyn</name>
    <filename>a00766.html</filename>
    <namespace>mc_rbdyn::detail</namespace>
    <namespace>mc_rbdyn::details</namespace>
    <namespace>mc_rbdyn::lipm_stabilizer</namespace>
    <class kind="struct">mc_rbdyn::Base</class>
    <class kind="struct">mc_rbdyn::BodySensor</class>
    <class kind="struct">mc_rbdyn::Collision</class>
    <class kind="struct">mc_rbdyn::CompoundJointConstraintDescription</class>
    <class kind="struct">mc_rbdyn::Contact</class>
    <class kind="struct">mc_rbdyn::CylindricalSurface</class>
    <class kind="struct">mc_rbdyn::Device</class>
    <class kind="struct">mc_rbdyn::DevicePtrVector</class>
    <class kind="struct">mc_rbdyn::Flexibility</class>
    <class kind="struct">mc_rbdyn::ForceSensor</class>
    <class kind="struct">mc_rbdyn::GripperSurface</class>
    <class kind="struct">mc_rbdyn::Mimic</class>
    <class kind="struct">mc_rbdyn::PlanarSurface</class>
    <class kind="struct">mc_rbdyn::Plane</class>
    <class kind="struct">mc_rbdyn::PolygonInterpolator</class>
    <class kind="struct">mc_rbdyn::QuadraticGenerator</class>
    <class kind="struct">mc_rbdyn::Robot</class>
    <class kind="class">mc_rbdyn::RobotLoader</class>
    <class kind="struct">mc_rbdyn::RobotModule</class>
    <class kind="struct">mc_rbdyn::Robots</class>
    <class kind="struct">mc_rbdyn::Springs</class>
    <class kind="struct">mc_rbdyn::Surface</class>
    <class kind="struct">mc_rbdyn::VisualMap</class>
    <member kind="typedef">
      <type>std::vector&lt; BodySensor, Eigen::aligned_allocator&lt; BodySensor &gt; &gt;</type>
      <name>BodySensorVector</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>a728d731db2806e7673f67b958970e558</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; CompoundJointConstraintDescription, Eigen::aligned_allocator&lt; CompoundJointConstraintDescription &gt; &gt;</type>
      <name>CompoundJointConstraintDescriptionVector</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>a96a35f8f44c0b0eb301fabc4af2bd978</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Device &gt;</type>
      <name>DevicePtr</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>a356f67585abd89ae94368d4644d6e865</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Device</type>
      <name>Sensor</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>a243aca157f29f1aebb2c1210ac166a83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DevicePtr</type>
      <name>SensorPtr</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>aa1e86054c466a23bfdcb3470f71c8aad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; RobotModule &gt;</type>
      <name>RobotModulePtr</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>af67e459a90b9a864418fca7d55d959a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; RobotModule, Eigen::aligned_allocator&lt; RobotModule &gt; &gt;</type>
      <name>RobotModuleVector</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>a95605f5cb57b7c5b39027072bedbbc04</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Surface &gt;</type>
      <name>SurfacePtr</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>a848cf0b2e8f6ca6f18ceba1769d9a426</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>aca0a2bc620d221c02c834716d875c1e0</anchor>
      <arglist>(std::ostream &amp;os, const Collision &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI std::vector&lt; sva::PTransformd &gt;</type>
      <name>computePoints</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>a736c36f68b3eff9f08124c8b1a58cba3</anchor>
      <arglist>(const mc_rbdyn::Surface &amp;robotSurface, const mc_rbdyn::Surface &amp;envSurface, const sva::PTransformd &amp;X_es_rs)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI sva::PTransformd</type>
      <name>planar</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>aca49bff3651cf81d0b834813b80fcdf6</anchor>
      <arglist>(const double &amp;T, const double &amp;B, const double &amp;N_rot)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI sva::PTransformd</type>
      <name>cylindrical</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>a44fdec158ad0a6005388d1f2296b154f</anchor>
      <arglist>(const double &amp;T, const double &amp;T_rot)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI void</type>
      <name>planarParam</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>ad2a0e2d6fd6cdece777a838b76a7c1da</anchor>
      <arglist>(const sva::PTransformd &amp;X_es_rs, double &amp;T, double &amp;B, double &amp;N_rot)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI void</type>
      <name>cylindricalParam</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>a611ca01f8c4f76581c96c8df0202f195</anchor>
      <arglist>(const sva::PTransformd &amp;X_es_rs, double &amp;T, double &amp;T_rot)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI std::vector&lt; double &gt;</type>
      <name>jointParam</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>ac6670e00a7e663e03a4709533a706e89</anchor>
      <arglist>(const Surface &amp;r1Surface, const Surface &amp;r2Surface, const sva::PTransformd &amp;X_es_rs)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI std::vector&lt; Plane &gt;</type>
      <name>planes_from_polygon</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>a3313c1739e7847d2155cd1e8eb248c1e</anchor>
      <arglist>(const std::shared_ptr&lt; geos::geom::Geometry &gt; &amp;geometry)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI std::vector&lt; Eigen::Vector3d &gt;</type>
      <name>points_from_polygon</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>a8b64034329a5f248185cf1904c0732a0</anchor>
      <arglist>(std::shared_ptr&lt; geos::geom::Geometry &gt; geometry)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI const mc_rbdyn::Robot &amp;</type>
      <name>robotFromConfig</name>
      <anchorfile>a00759.html</anchorfile>
      <anchor>ga70b316b2f0c0caf547e160e74c2a029d</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config, const mc_rbdyn::Robots &amp;robots, const std::string &amp;prefix, bool required=false, const std::string &amp;robotIndexKey=&quot;robotIndex&quot;, const std::string &amp;robotNameKey=&quot;robot&quot;, const std::string &amp;defaultRobotName=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>std::string MC_RBDYN_DLLAPI</type>
      <name>robotNameFromConfig</name>
      <anchorfile>a00759.html</anchorfile>
      <anchor>ga40325ac769295d23f270976eead26245</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config, const mc_rbdyn::Robots &amp;robots, const std::string &amp;prefix=&quot;&quot;, bool required=false, const std::string &amp;robotIndexKey=&quot;robotIndex&quot;, const std::string &amp;robotNameKey=&quot;robot&quot;, const std::string &amp;defaultRobotName=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int MC_RBDYN_DLLAPI</type>
      <name>robotIndexFromConfig</name>
      <anchorfile>a00759.html</anchorfile>
      <anchor>gaf9b711ec2baa5684b8f422d740464b5f</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config, const mc_rbdyn::Robots &amp;robots, const std::string &amp;prefix=&quot;&quot;, bool required=false, const std::string &amp;robotIndexKey=&quot;robotIndex&quot;, const std::string &amp;robotNameKey=&quot;robot&quot;, const std::string &amp;defaultRobotName=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>RobotModule::bounds_t MC_RBDYN_DLLAPI</type>
      <name>urdf_limits_to_bounds</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>aa4f40fc0642de7f1debd053f9c5d393f</anchor>
      <arglist>(const rbd::parsers::Limits &amp;limits)</arglist>
    </member>
    <member kind="function">
      <type>RobotModule::bounds_t MC_RTC_DEPRECATED MC_RBDYN_DLLAPI</type>
      <name>urdf_limits_to_bounds</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>a44d55a51f42d585c340944099985fa8e</anchor>
      <arglist>(const mc_rbdyn_urdf::Limits &amp;limits)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI std::shared_ptr&lt; Robots &gt;</type>
      <name>loadRobot</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>acaac690d2e96da3b8254fecefe1cccf9</anchor>
      <arglist>(const RobotModule &amp;module, sva::PTransformd *base=nullptr, const std::string &amp;baseName=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI MC_RTC_DEPRECATED std::shared_ptr&lt; Robots &gt;</type>
      <name>loadRobot</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>a7f3fbf6971706876454da1142aadb193</anchor>
      <arglist>(const RobotModule &amp;module, const std::string &amp;surfaceDir, sva::PTransformd *base=nullptr, const std::string &amp;baseName=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI std::shared_ptr&lt; Robots &gt;</type>
      <name>loadRobots</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>a90beb4c07fba317439956363ae429538</anchor>
      <arglist>(const std::vector&lt; std::shared_ptr&lt; RobotModule &gt;&gt; &amp;modules)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI MC_RTC_DEPRECATED std::shared_ptr&lt; Robots &gt;</type>
      <name>loadRobots</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>a1506cb6d1d95f69cae2f1a6c072fa406</anchor>
      <arglist>(const std::vector&lt; std::shared_ptr&lt; RobotModule &gt;&gt; &amp;modules, const std::vector&lt; std::string &gt; &amp;surfaceDirs)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI std::shared_ptr&lt; Robots &gt;</type>
      <name>loadRobotAndEnv</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>afad00246a5238eb31795027c0acad7a9</anchor>
      <arglist>(const RobotModule &amp;module, const RobotModule &amp;envModule, sva::PTransformd *base=nullptr, const std::string &amp;baseName=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI MC_RTC_DEPRECATED std::shared_ptr&lt; Robots &gt;</type>
      <name>loadRobotAndEnv</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>a21e283b3c61bc0db909f2a950bf4384a</anchor>
      <arglist>(const RobotModule &amp;module, const std::string &amp;surfaceDir, const RobotModule &amp;envModule, const std::string &amp;envSurfaceDir, sva::PTransformd *base=nullptr, const std::string &amp;baseName=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI std::shared_ptr&lt; Robots &gt;</type>
      <name>loadRobotFromUrdf</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>a8e415d422767b48828fbf2e282b66041</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;urdf, bool withVirtualLinks=true, const std::vector&lt; std::string &gt; &amp;filteredLinks={}, bool fixed=false, sva::PTransformd *base=nullptr, const std::string &amp;baseName=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix3d</type>
      <name>rpyToMat</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>a5f178afee4c03533ae15c4dc04c143e2</anchor>
      <arglist>(const double &amp;r, const double &amp;p, const double &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix3d</type>
      <name>rpyToMat</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>a04f15be86a9827b0d076764f344406ab</anchor>
      <arglist>(const Eigen::Vector3d &amp;rpy)</arglist>
    </member>
    <member kind="function">
      <type>sva::PTransformd</type>
      <name>rpyToPT</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>afa2b9eed96e67a1bdb6abf90bb597063</anchor>
      <arglist>(const Eigen::Vector3d &amp;rpy)</arglist>
    </member>
    <member kind="function">
      <type>sva::PTransformd</type>
      <name>rpyToPT</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>a4626f965b6c407b0bd14e10f98ec42b9</anchor>
      <arglist>(const double &amp;r, const double &amp;p, const double &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>rpyFromMat</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>a0948fb6dc9382e116f65c76261d26ea0</anchor>
      <arglist>(const Eigen::Matrix3d &amp;E)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>rpyFromQuat</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>a058cd1f189f02e2c4986b6aacffa8195</anchor>
      <arglist>(const Eigen::Quaterniond &amp;quat)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI sch::S_Object *</type>
      <name>surface_to_sch</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>adf1399b68c68126e373f564e95bc7531</anchor>
      <arglist>(const mc_rbdyn::Surface &amp;surface, const double &amp;depth=0.01, const unsigned int &amp;slice=8)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI sch::S_Object *</type>
      <name>sch_polyhedron</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>a3db1776d4f8f36e1eb2a8c51bc157867</anchor>
      <arglist>(const std::vector&lt; sva::PTransformd &gt; &amp;points)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI sch::S_Object *</type>
      <name>planar_hull</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>a96cab2abc78656a41b2b56987c5fbbfa</anchor>
      <arglist>(const mc_rbdyn::PlanarSurface &amp;surface, const double &amp;depth)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI sch::S_Object *</type>
      <name>cylindrical_hull</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>adcd59f0c2e8c9cd94a6f9800c164e723</anchor>
      <arglist>(const mc_rbdyn::CylindricalSurface &amp;surface, const unsigned int &amp;slice)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI sch::S_Object *</type>
      <name>gripper_hull</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>a70b7277a0499a32774e608f8def99043</anchor>
      <arglist>(const mc_rbdyn::GripperSurface &amp;surface, const double &amp;depth)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI std::vector&lt; std::shared_ptr&lt; Surface &gt; &gt;</type>
      <name>readRSDFFromDir</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>a01a984b0ca29b3b20b799b01e7239a9b</anchor>
      <arglist>(const std::string &amp;dirname)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d MC_RBDYN_DLLAPI</type>
      <name>zmp</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>a329453006944dae96fa60d86dca66db8</anchor>
      <arglist>(const sva::ForceVecd &amp;netTotalWrench, const Eigen::Vector3d &amp;plane_p, const Eigen::Vector3d &amp;plane_n, double minimalNetNormalForce=1.)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d MC_RBDYN_DLLAPI</type>
      <name>zmp</name>
      <anchorfile>a00766.html</anchorfile>
      <anchor>aa9d4155584b04e51fdb5c24f5739fc24</anchor>
      <arglist>(const sva::ForceVecd &amp;netTotalWrench, const sva::PTransformd &amp;zmpFrame, double minimalNetNormalForce=1.)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>mc_rbdyn::detail</name>
    <filename>a00774.html</filename>
  </compound>
  <compound kind="namespace">
    <name>mc_rbdyn::details</name>
    <filename>a00778.html</filename>
    <class kind="struct">mc_rbdyn::details::are_strings</class>
    <class kind="struct">mc_rbdyn::details::are_strings&lt; T &gt;</class>
    <class kind="struct">mc_rbdyn::details::are_strings&lt; T, Args... &gt;</class>
    <member kind="function">
      <type>std::conditional&lt; std::is_same&lt; std::string, T &gt;::value, const std::string &amp;, std::string &gt;::type</type>
      <name>to_string</name>
      <anchorfile>a00778.html</anchorfile>
      <anchor>a71fcd7fe46e75452f9c6302bb1c40412</anchor>
      <arglist>(const T &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>mc_rbdyn::lipm_stabilizer</name>
    <filename>a00775.html</filename>
    <class kind="struct">mc_rbdyn::lipm_stabilizer::FDQPWeights</class>
    <class kind="struct">mc_rbdyn::lipm_stabilizer::StabilizerConfiguration</class>
    <class kind="struct">mc_rbdyn::lipm_stabilizer::ZMPCCConfiguration</class>
  </compound>
  <compound kind="namespace">
    <name>mc_rtc</name>
    <filename>a00763.html</filename>
    <namespace>mc_rtc::constants</namespace>
    <namespace>mc_rtc::gui</namespace>
    <namespace>mc_rtc::internal</namespace>
    <namespace>mc_rtc::io</namespace>
    <namespace>mc_rtc::log</namespace>
    <class kind="struct">mc_rtc::Configuration</class>
    <class kind="struct">mc_rtc::ConfigurationArrayIterator</class>
    <class kind="struct">mc_rtc::ConfigurationLoader</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; mc_control::fsm::Contact &gt;</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; mc_rbdyn::CompoundJointConstraintDescription &gt;</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; mc_rbdyn::Contact &gt;</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; mc_rbdyn::lipm_stabilizer::FDQPWeights &gt;</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; mc_rbdyn::lipm_stabilizer::StabilizerConfiguration &gt;</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; mc_rbdyn::lipm_stabilizer::ZMPCCConfiguration &gt;</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; mc_rbdyn::RobotModule &gt;</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; mc_rbdyn::RobotModulePtr &gt;</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; mc_tasks::lipm_stabilizer::ContactState &gt;</class>
    <class kind="struct">mc_rtc::ConfigurationLoader&lt; void &gt;</class>
    <class kind="struct">mc_rtc::DataStore</class>
    <class kind="class">mc_rtc::Loader</class>
    <class kind="class">mc_rtc::LoaderException</class>
    <class kind="struct">mc_rtc::LoaderSandboxData</class>
    <class kind="struct">mc_rtc::Logger</class>
    <class kind="class">mc_rtc::LTDLHandle</class>
    <class kind="struct">mc_rtc::measure</class>
    <class kind="struct">mc_rtc::MessagePackBuilder</class>
    <class kind="class">mc_rtc::ObjectLoader</class>
    <member kind="typedef">
      <type>std::shared_ptr&lt; LTDLHandle &gt;</type>
      <name>LTDLHandlePtr</name>
      <anchorfile>a00763.html</anchorfile>
      <anchor>a04f4430d990b320f494b3a21112c7e3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>measure&lt; std::chrono::duration&lt; double &gt; &gt;</type>
      <name>measure_s</name>
      <anchorfile>a00763.html</anchorfile>
      <anchor>a2553c85ef1b4ffa76b14a245d200b453</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>measure&lt; std::chrono::duration&lt; double, std::milli &gt; &gt;</type>
      <name>measure_ms</name>
      <anchorfile>a00763.html</anchorfile>
      <anchor>a852f3a96e5f08ba4981cc528501f1e8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>measure&lt; std::chrono::duration&lt; double, std::nano &gt; &gt;</type>
      <name>measure_ns</name>
      <anchorfile>a00763.html</anchorfile>
      <anchor>acec9c84f7ea66cc456dfa85636344fb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; T &gt;</type>
      <name>fromVectorOrElement</name>
      <anchorfile>a00763.html</anchorfile>
      <anchor>ac1107b5d5bcf197a41add86ce445c866</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config, const std::string &amp;key, const std::vector&lt; T &gt; &amp;defaultVec)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; T &gt;</type>
      <name>fromVectorOrElement</name>
      <anchorfile>a00763.html</anchorfile>
      <anchor>a9c308b4400fb83031251be1f6ab0adb2</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config, const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>no_sandbox_function_call</name>
      <anchorfile>a00763.html</anchorfile>
      <anchor>a299e6b1f00e482f61b89988dc5b395fb</anchor>
      <arglist>(FunT create_fn, const Args &amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>sandbox_function_call</name>
      <anchorfile>a00763.html</anchorfile>
      <anchor>a810352dfb9fa4299b85fa19ac258a308</anchor>
      <arglist>(FunT create_fn, const Args &amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>type_name</name>
      <anchorfile>a00763.html</anchorfile>
      <anchor>a8fb61bc6391bc9cd0ef2aa0efff2d641</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>struct MC_RTC_UTILS_DLLAPI</type>
      <name>ConfigurationArrayIterator</name>
      <anchorfile>a00763.html</anchorfile>
      <anchor>a781ea11d3b3f97742187d5910b74edfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct MC_RTC_UTILS_DLLAPI</type>
      <name>Configuration</name>
      <anchorfile>a00763.html</anchorfile>
      <anchor>a9b620c9005d103e65363b518ba6dca23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>OUT_NONE</name>
      <anchorfile>a00763.html</anchorfile>
      <anchor>ab85e3cb123f11bf1f9290abe17a7d49e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>OUT_BLUE</name>
      <anchorfile>a00763.html</anchorfile>
      <anchor>a15b005678017d9608ff8f599e34e41de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>OUT_GREEN</name>
      <anchorfile>a00763.html</anchorfile>
      <anchor>a7ab584d4904b2b1695ae2cb04ca984ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>OUT_PURPLE</name>
      <anchorfile>a00763.html</anchorfile>
      <anchor>aeb1d99e566cb5c454074579fcfa712f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>OUT_RED</name>
      <anchorfile>a00763.html</anchorfile>
      <anchor>a9003469324d75c8934d51654d98ef862</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>mc_rtc::constants</name>
    <filename>a00783.html</filename>
    <member kind="function">
      <type>constexpr double</type>
      <name>toDeg</name>
      <anchorfile>a00783.html</anchorfile>
      <anchor>a357fd1ef503f568cf436fbda923472cf</anchor>
      <arglist>(const double degrees)</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>toRad</name>
      <anchorfile>a00783.html</anchorfile>
      <anchor>a2ca6e1fbd563bfd79d6484a3295d08bd</anchor>
      <arglist>(const double rad)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr double</type>
      <name>GRAVITY</name>
      <anchorfile>a00783.html</anchorfile>
      <anchor>a04b344c34834432afcfcc1ac86bff22c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Eigen::Vector3d</type>
      <name>gravity</name>
      <anchorfile>a00783.html</anchorfile>
      <anchor>acf271123cee2ac958b9ae0f9220ea422</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Eigen::Vector3d</type>
      <name>vertical</name>
      <anchorfile>a00783.html</anchorfile>
      <anchor>aaaeaab7136aa7d17fa172fde905c2cc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr double</type>
      <name>PI</name>
      <anchorfile>a00783.html</anchorfile>
      <anchor>a8cb2b2837ea283890b185cfef0631602</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>mc_rtc::gui</name>
    <filename>a00785.html</filename>
    <namespace>mc_rtc::gui::details</namespace>
    <namespace>mc_rtc::gui::plot</namespace>
    <class kind="struct">mc_rtc::gui::ArrayInputImpl</class>
    <class kind="struct">mc_rtc::gui::ArrayLabelImpl</class>
    <class kind="struct">mc_rtc::gui::ArrowConfig</class>
    <class kind="struct">mc_rtc::gui::ArrowImpl</class>
    <class kind="struct">mc_rtc::gui::ArrowROImpl</class>
    <class kind="struct">mc_rtc::gui::ButtonImpl</class>
    <class kind="struct">mc_rtc::gui::CallbackElement</class>
    <class kind="struct">mc_rtc::gui::CheckboxImpl</class>
    <class kind="struct">mc_rtc::gui::Color</class>
    <class kind="struct">mc_rtc::gui::ComboInputImpl</class>
    <class kind="struct">mc_rtc::gui::CommonInputImpl</class>
    <class kind="struct">mc_rtc::gui::DataComboInputImpl</class>
    <class kind="struct">mc_rtc::gui::DataElement</class>
    <class kind="struct">mc_rtc::gui::Element</class>
    <class kind="struct">mc_rtc::gui::ForceConfig</class>
    <class kind="struct">mc_rtc::gui::ForceImpl</class>
    <class kind="struct">mc_rtc::gui::ForceROImpl</class>
    <class kind="struct">mc_rtc::gui::FormArrayInput</class>
    <class kind="struct">mc_rtc::gui::FormComboInput</class>
    <class kind="struct">mc_rtc::gui::FormDataComboInput</class>
    <class kind="struct">mc_rtc::gui::FormDataInput</class>
    <class kind="struct">mc_rtc::gui::FormElement</class>
    <class kind="struct">mc_rtc::gui::FormImpl</class>
    <class kind="struct">mc_rtc::gui::IntegerInputImpl</class>
    <class kind="struct">mc_rtc::gui::LabelImpl</class>
    <class kind="struct">mc_rtc::gui::LineConfig</class>
    <class kind="struct">mc_rtc::gui::NumberInputImpl</class>
    <class kind="struct">mc_rtc::gui::NumberSliderImpl</class>
    <class kind="struct">mc_rtc::gui::Point3DImpl</class>
    <class kind="struct">mc_rtc::gui::Point3DROImpl</class>
    <class kind="struct">mc_rtc::gui::PointConfig</class>
    <class kind="struct">mc_rtc::gui::PolygonImpl</class>
    <class kind="struct">mc_rtc::gui::RotationImpl</class>
    <class kind="struct">mc_rtc::gui::RotationROImpl</class>
    <class kind="struct">mc_rtc::gui::SchemaImpl</class>
    <class kind="struct">mc_rtc::gui::StateBuilder</class>
    <class kind="struct">mc_rtc::gui::StringInputImpl</class>
    <class kind="struct">mc_rtc::gui::TrajectoryImpl</class>
    <class kind="struct">mc_rtc::gui::TransformImpl</class>
    <class kind="struct">mc_rtc::gui::TransformROImpl</class>
    <class kind="struct">mc_rtc::gui::VoidCallbackElement</class>
    <class kind="struct">mc_rtc::gui::XYThetaImpl</class>
    <class kind="struct">mc_rtc::gui::XYThetaROImpl</class>
    <member kind="typedef">
      <type>FormDataInput&lt; bool, Elements::Checkbox &gt;</type>
      <name>FormCheckbox</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>a2683c87b0180a62bc5231a60c18aca7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FormDataInput&lt; int, Elements::IntegerInput &gt;</type>
      <name>FormIntegerInput</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>ae145da8274a4c06981900ea890979eb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FormDataInput&lt; double, Elements::NumberInput &gt;</type>
      <name>FormNumberInput</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>afc4205d5b7c28257703d3c3c515c9741</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FormDataInput&lt; std::string, Elements::StringInput &gt;</type>
      <name>FormStringInput</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>ad9c26bdeef8d098c11f4edb0f105fef9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Elements</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>a32d283e5c35e7fd7dcddbc0199bfdc06</anchor>
      <arglist></arglist>
      <enumvalue file="a00785.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06ab021df6aac4654c454f46c77646e745f">Label</enumvalue>
      <enumvalue file="a00785.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a93bead7e77b18cbfc7d0c892eb65a69f">ArrayLabel</enumvalue>
      <enumvalue file="a00785.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a87b7760f14fbff78d8819291f36ab9a0">Button</enumvalue>
      <enumvalue file="a00785.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a4f8222964f9a317cef99dddc23a121bd">Checkbox</enumvalue>
      <enumvalue file="a00785.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a6e2d1c6d37623990d2d3e0919ee03ff1">StringInput</enumvalue>
      <enumvalue file="a00785.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06ad9da16a5098cfbf3002491c43df151af">IntegerInput</enumvalue>
      <enumvalue file="a00785.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a7be1677ccab64a74bebea1ab86131da8">NumberInput</enumvalue>
      <enumvalue file="a00785.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a2e9c5f285f5ff6be9348942eac1cc6ad">NumberSlider</enumvalue>
      <enumvalue file="a00785.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a2ed2cbbe9de17e308d54422d43f3deaf">ArrayInput</enumvalue>
      <enumvalue file="a00785.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06ad7e38bc04789bd7093fa285ba7a91f4d">ComboInput</enumvalue>
      <enumvalue file="a00785.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06aa8aea7afab217ab8095ef9c7404aa6c9">DataComboInput</enumvalue>
      <enumvalue file="a00785.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a1685c4cb9754df6a8c65c8564d8d0d74">Point3D</enumvalue>
      <enumvalue file="a00785.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a2c1f43c429c5e00feaef7ba3327375dc">Trajectory</enumvalue>
      <enumvalue file="a00785.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06af1a42bd417390fc63b030a519624607a">Rotation</enumvalue>
      <enumvalue file="a00785.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a2ff4148554480a37f85efd299df04850">Transform</enumvalue>
      <enumvalue file="a00785.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a7146a60667b422e69fd050fe1df6859a">Schema</enumvalue>
      <enumvalue file="a00785.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06ad359c6df99b25183d81f7d728b71de0e">Form</enumvalue>
      <enumvalue file="a00785.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a4c0a11247d92f73fb84baa51e37a3263">Polygon</enumvalue>
      <enumvalue file="a00785.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a9eb6b78a99cdb6ffd3d40d18621d9f80">Force</enumvalue>
      <enumvalue file="a00785.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a0f4e1aaabd074689b7d3ead824d1ee8e">Arrow</enumvalue>
      <enumvalue file="a00785.html" anchor="a32d283e5c35e7fd7dcddbc0199bfdc06a93b34e4f6ff555f9cc248bae9cd00386">XYTheta</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ElementsStacking</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>a649ddcaedb769dede3922fa845e71ca4</anchor>
      <arglist></arglist>
      <enumvalue file="a00785.html" anchor="a649ddcaedb769dede3922fa845e71ca4a06ce2a25e5d12c166a36f654dbea6012">Vertical</enumvalue>
      <enumvalue file="a00785.html" anchor="a649ddcaedb769dede3922fa845e71ca4ac1b5fa03ecdb95d4a45dd1c40b02527f">Horizontal</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>LineStyle</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>a23166295a3983f35cb0fa510b4c156c9</anchor>
      <arglist></arglist>
      <enumvalue file="a00785.html" anchor="a23166295a3983f35cb0fa510b4c156c9ae41480b6bbfbf7407974a88d3d34f4fa">Solid</enumvalue>
      <enumvalue file="a00785.html" anchor="a23166295a3983f35cb0fa510b4c156c9a90c09393a4c0970bc9a6703ad527781c">Dotted</enumvalue>
    </member>
    <member kind="function">
      <type>ArrayInputImpl&lt; GetT, SetT &gt;</type>
      <name>ArrayInput</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>ad70775c90f4b00f10abc4c5a5721e557</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, SetT set_fn)</arglist>
    </member>
    <member kind="function">
      <type>ArrayInputImpl&lt; GetT, SetT &gt;</type>
      <name>ArrayInput</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>a7f24f6599b905f3caf6ad3ec29def6bf</anchor>
      <arglist>(const std::string &amp;name, const std::vector&lt; std::string &gt; &amp;labels, GetT get_fn, SetT set_fn)</arglist>
    </member>
    <member kind="function">
      <type>ArrayLabelImpl&lt; GetT &gt;</type>
      <name>ArrayLabel</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>a308b0967f9f6dc43f0f27bcc7d1c2b69</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>ArrayLabelImpl&lt; GetT &gt;</type>
      <name>ArrayLabel</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>ab51ab91bf57f9e53c1b5c69ab3d8bc61</anchor>
      <arglist>(const std::string &amp;name, const std::vector&lt; std::string &gt; &amp;labels, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>ArrowROImpl&lt; GetStart, GetEnd &gt;</type>
      <name>Arrow</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>aae7d8d2d90a01712f0f57ba5f5ec0faf</anchor>
      <arglist>(const std::string &amp;name, GetStart get_start_fn, GetEnd get_end_fn)</arglist>
    </member>
    <member kind="function">
      <type>ArrowROImpl&lt; GetStart, GetEnd &gt;</type>
      <name>Arrow</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>ab5cef94f254edfaaa52e300ef9d9287b</anchor>
      <arglist>(const std::string &amp;name, const ArrowConfig &amp;config, GetStart get_start_fn, GetEnd get_end_fn)</arglist>
    </member>
    <member kind="function">
      <type>ArrowImpl&lt; GetStart, SetStart, GetEnd, SetEnd &gt;</type>
      <name>Arrow</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>a910fc94e100370b4eaa72737398268aa</anchor>
      <arglist>(const std::string &amp;name, GetStart get_start_fn, SetStart set_start_fn, GetEnd get_end_fn, SetEnd set_end_fn)</arglist>
    </member>
    <member kind="function">
      <type>ArrowImpl&lt; GetStart, SetStart, GetEnd, SetEnd &gt;</type>
      <name>Arrow</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>a35479664be1d4b8d4c55baf5e76e16ae</anchor>
      <arglist>(const std::string &amp;name, const ArrowConfig &amp;config, GetStart get_start_fn, SetStart set_start_fn, GetEnd get_end_fn, SetEnd set_end_fn)</arglist>
    </member>
    <member kind="function">
      <type>ButtonImpl&lt; Callback &gt;</type>
      <name>Button</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>a7d2e7edd5eaf913a973c519cdd6affa2</anchor>
      <arglist>(const std::string &amp;name, Callback cb)</arglist>
    </member>
    <member kind="function">
      <type>CheckboxImpl&lt; GetT, Callback &gt;</type>
      <name>Checkbox</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>afc7e12ae3accc04250d14da90634986b</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, Callback cb)</arglist>
    </member>
    <member kind="function">
      <type>ComboInputImpl&lt; GetT, SetT &gt;</type>
      <name>ComboInput</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>aea7948a0427bfd1acd2a28803e5559e1</anchor>
      <arglist>(const std::string &amp;name, const std::vector&lt; std::string &gt; &amp;values, GetT get_fn, SetT set_fn)</arglist>
    </member>
    <member kind="function">
      <type>DataComboInputImpl&lt; GetT, SetT &gt;</type>
      <name>DataComboInput</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>a5baa34dd8ac370b60f3ffbf0b2fd9dda</anchor>
      <arglist>(const std::string &amp;name, const std::vector&lt; std::string &gt; &amp;values, GetT get_fn, SetT set_fn)</arglist>
    </member>
    <member kind="function">
      <type>ForceROImpl&lt; GetForce, GetSurface &gt;</type>
      <name>Force</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>a1dfaa55db99fac62693744326d7f1cb9</anchor>
      <arglist>(const std::string &amp;name, GetForce get_force_fn, GetSurface get_surface_fn)</arglist>
    </member>
    <member kind="function">
      <type>ForceROImpl&lt; GetForce, GetSurface &gt;</type>
      <name>Force</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>ae5e645b29b00acb907a3080e35a66697</anchor>
      <arglist>(const std::string &amp;name, const ForceConfig &amp;config, GetForce get_force_fn, GetSurface get_surface_fn)</arglist>
    </member>
    <member kind="function">
      <type>ForceImpl&lt; GetForce, GetSurface, SetForce &gt;</type>
      <name>Force</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>aed7593a02cc0bcc3b045e2c85a3a2284</anchor>
      <arglist>(const std::string &amp;name, GetForce get_force_fn, SetForce set_force_fn, GetSurface get_surface_fn)</arglist>
    </member>
    <member kind="function">
      <type>ForceImpl&lt; GetForce, GetSurface, SetForce &gt;</type>
      <name>Force</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>af532dce0703aff08a435a2c53182de1b</anchor>
      <arglist>(const std::string &amp;name, const ForceConfig &amp;config, GetForce get_force_fn, SetForce set_force_fn, GetSurface get_surface_fn)</arglist>
    </member>
    <member kind="function">
      <type>FormImpl&lt; Callback &gt;</type>
      <name>Form</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>a94d2215e324dad2adb958327c16bf167</anchor>
      <arglist>(const std::string &amp;name, Callback cb, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>IntegerInputImpl&lt; GetT, SetT &gt;</type>
      <name>IntegerInput</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>ac4f13804b0853d4e3ee9d53afed5b06c</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, SetT set_fn)</arglist>
    </member>
    <member kind="function">
      <type>LabelImpl&lt; GetT &gt;</type>
      <name>Label</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>a4b4617f09036971e7ccbf6917ee37c19</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>NumberInputImpl&lt; GetT, SetT &gt;</type>
      <name>NumberInput</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>a42ba0a1ea0c4890a7941cf76892e1268</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, SetT set_fn)</arglist>
    </member>
    <member kind="function">
      <type>NumberSliderImpl&lt; GetT, SetT &gt;</type>
      <name>NumberSlider</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>a5c6714af47a8cb199c7345ed1c2e8ffe</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, SetT set_fn, double min, double max)</arglist>
    </member>
    <member kind="function">
      <type>Point3DROImpl&lt; GetT &gt;</type>
      <name>Point3D</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>ac40c7c59cc19e0fe7be9d8a5a8564f74</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>Point3DImpl&lt; GetT, SetT &gt;</type>
      <name>Point3D</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>a0c1802e2d8623ee22fffc408e69eaf56</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, SetT set_fn)</arglist>
    </member>
    <member kind="function">
      <type>Point3DROImpl&lt; GetT &gt;</type>
      <name>Point3D</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>ad2db10f53541f7b6a925d724023de7ee</anchor>
      <arglist>(const std::string &amp;name, const PointConfig &amp;config, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>Point3DImpl&lt; GetT, SetT &gt;</type>
      <name>Point3D</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>a6a9e684830b60a463c848a290d2b910b</anchor>
      <arglist>(const std::string &amp;name, const PointConfig &amp;config, GetT get_fn, SetT set_fn)</arglist>
    </member>
    <member kind="function">
      <type>PolygonImpl&lt; GetT &gt;</type>
      <name>Polygon</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>ac7c7c596bdb09e8c01e26e8fb53ce360</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>PolygonImpl&lt; GetT &gt;</type>
      <name>Polygon</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>a2b137bae8372a9a84cdb28508e7de1dd</anchor>
      <arglist>(const std::string &amp;name, const Color &amp;color, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>RotationROImpl&lt; GetT &gt;</type>
      <name>Rotation</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>a9dc809d7e99978fe3f5e2439d1a20771</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>RotationImpl&lt; GetT, SetT &gt;</type>
      <name>Rotation</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>a6440392ea4b48778f6d4012e0400ee5b</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, SetT set_fn)</arglist>
    </member>
    <member kind="function">
      <type>SchemaImpl&lt; Callback &gt;</type>
      <name>Schema</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>a0c892f6b2ba9e06d4bda32a16b76b75b</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;schema, Callback cb)</arglist>
    </member>
    <member kind="function">
      <type>StringInputImpl&lt; GetT, SetT &gt;</type>
      <name>StringInput</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>a4f8c1eb018c71e856f48cee90d7ea65d</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, SetT set_fn)</arglist>
    </member>
    <member kind="function">
      <type>TrajectoryImpl&lt; GetT &gt;</type>
      <name>Trajectory</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>a062a5442d4cabf7a31d7f83008751a6a</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>TrajectoryImpl&lt; GetT &gt;</type>
      <name>Trajectory</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>aa175899f8868d419050975dc9f79ed97</anchor>
      <arglist>(const std::string &amp;name, const LineConfig &amp;config, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>TransformROImpl&lt; GetT &gt;</type>
      <name>Transform</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>aa5342b74063b005e6a03efd66adef74e</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>TransformImpl&lt; GetT, SetT &gt;</type>
      <name>Transform</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>a96cb90761dce6d6e3441d779e7184847</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, SetT set_fn)</arglist>
    </member>
    <member kind="function">
      <type>XYThetaROImpl&lt; GetT &gt;</type>
      <name>XYTheta</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>aaaa2ebe2ecb490f266fe541318646561</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>XYThetaImpl&lt; GetT, SetT &gt;</type>
      <name>XYTheta</name>
      <anchorfile>a00785.html</anchorfile>
      <anchor>a98fa40132858d1d9c0091acb36ce9f32</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, SetT set_fn)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>mc_rtc::gui::details</name>
    <filename>a00786.html</filename>
    <class kind="struct">mc_rtc::gui::details::CheckReturnType</class>
    <class kind="struct">mc_rtc::gui::details::CheckReturnType&lt; GetT, T &gt;</class>
    <class kind="struct">mc_rtc::gui::details::CheckReturnType&lt; GetT, T, Args... &gt;</class>
    <class kind="struct">mc_rtc::gui::details::ReturnType</class>
    <member kind="typedef">
      <type>typename ReturnType&lt; GetT &gt;::type</type>
      <name>ReturnTypeT</name>
      <anchorfile>a00786.html</anchorfile>
      <anchor>a62d70a1c5467de8404eceee15a80da68</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>mc_rtc::gui::plot</name>
    <filename>a00787.html</filename>
    <namespace>mc_rtc::gui::plot::impl</namespace>
    <class kind="struct">mc_rtc::gui::plot::AxisConfiguration</class>
    <class kind="struct">mc_rtc::gui::plot::PolygonDescription</class>
    <class kind="struct">mc_rtc::gui::plot::Range</class>
    <member kind="enumeration">
      <type></type>
      <name>Plot</name>
      <anchorfile>a00787.html</anchorfile>
      <anchor>ae8d436e1212bee55dfdb14d50b0d6be9</anchor>
      <arglist></arglist>
      <enumvalue file="a00787.html" anchor="ae8d436e1212bee55dfdb14d50b0d6be9aeb6d8ae6f20283755b339c0dc273988b">Standard</enumvalue>
      <enumvalue file="a00787.html" anchor="ae8d436e1212bee55dfdb14d50b0d6be9a74c53bcd3dcb2bb79993b2fec37d362a">XY</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>a00787.html</anchorfile>
      <anchor>a6e2b70125fa1d433838b9a8f2bf28c4d</anchor>
      <arglist></arglist>
      <enumvalue file="a00787.html" anchor="a6e2b70125fa1d433838b9a8f2bf28c4dac9812e629ac3822b86f7c19704983d0e">Abscissa</enumvalue>
      <enumvalue file="a00787.html" anchor="a6e2b70125fa1d433838b9a8f2bf28c4da5d32a72e2819aaf62362fcc862b37c5e">Ordinate</enumvalue>
      <enumvalue file="a00787.html" anchor="a6e2b70125fa1d433838b9a8f2bf28c4da4c0a11247d92f73fb84baa51e37a3263">Polygon</enumvalue>
      <enumvalue file="a00787.html" anchor="a6e2b70125fa1d433838b9a8f2bf28c4daa7a7e14b2a005870ba134e6c92bb7b51">Polygons</enumvalue>
      <enumvalue file="a00787.html" anchor="a6e2b70125fa1d433838b9a8f2bf28c4dab83f39f54c4bd7f3a02f9a45fd996031">AbscissaOrdinate</enumvalue>
    </member>
    <member kind="function">
      <type>impl::Abscissa&lt; GetT &gt;</type>
      <name>X</name>
      <anchorfile>a00787.html</anchorfile>
      <anchor>a13155e82e2012b946c5c973369b1db56</anchor>
      <arglist>(AxisConfiguration config, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>impl::Abscissa&lt; GetT &gt;</type>
      <name>X</name>
      <anchorfile>a00787.html</anchorfile>
      <anchor>ac22eeca55379fb5c66be97b783a8bd32</anchor>
      <arglist>(const std::string &amp;legend, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>impl::Abscissa&lt; GetT &gt;</type>
      <name>X</name>
      <anchorfile>a00787.html</anchorfile>
      <anchor>ac2f689ceed9f080a4ccc49a6a70aeb4c</anchor>
      <arglist>(const char *legend, GetT get_fn)</arglist>
    </member>
    <member kind="function">
      <type>impl::AbscissaOrdinate&lt; GetXT, GetYT &gt;</type>
      <name>XY</name>
      <anchorfile>a00787.html</anchorfile>
      <anchor>aff7557ff1a45292b67d02328c81bdde6</anchor>
      <arglist>(const std::string &amp;name, GetXT get_x_fn, GetYT get_y_fn, Color color, Style style=Style::Solid, Side side=Side::Left)</arglist>
    </member>
    <member kind="function">
      <type>impl::AbscissaOrdinateWithColor&lt; GetXT, GetYT, GetColor &gt;</type>
      <name>XY</name>
      <anchorfile>a00787.html</anchorfile>
      <anchor>a93ee6aaded7dfd640df87a78e649062d</anchor>
      <arglist>(const std::string &amp;name, GetXT get_x_fn, GetYT get_y_fn, GetColor get_color_fn, Style style=Style::Solid, Side side=Side::Left)</arglist>
    </member>
    <member kind="function">
      <type>impl::Ordinate&lt; GetT &gt;</type>
      <name>Y</name>
      <anchorfile>a00787.html</anchorfile>
      <anchor>aa288bbda415eb4c0d8c5d6fd8fd00f12</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, Color color, Style style=Style::Solid, Side side=Side::Left)</arglist>
    </member>
    <member kind="function">
      <type>impl::OrdinateWithColor&lt; GetT, GetColor &gt;</type>
      <name>Y</name>
      <anchorfile>a00787.html</anchorfile>
      <anchor>a5957f379abaa61742baef9909ae18990</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, GetColor get_color, Style style=Style::Solid, Side side=Side::Left)</arglist>
    </member>
    <member kind="function">
      <type>impl::Polygon&lt; GetT &gt;</type>
      <name>Polygon</name>
      <anchorfile>a00787.html</anchorfile>
      <anchor>a455aeb83363d1c76669333ae6827f638</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, Side side=Side::Left)</arglist>
    </member>
    <member kind="function">
      <type>impl::Polygons&lt; GetT &gt;</type>
      <name>Polygons</name>
      <anchorfile>a00787.html</anchorfile>
      <anchor>a2bfb0562e6093e2274530cb22f523030</anchor>
      <arglist>(const std::string &amp;name, GetT get_fn, Side side=Side::Left)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_Abscissa</name>
      <anchorfile>a00787.html</anchorfile>
      <anchor>a73e5c8e2228efe9d85770fa3233df148</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_Abscissa</name>
      <anchorfile>a00787.html</anchorfile>
      <anchor>ad9dd006fddf621ad45bc2ed39819cb7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_not_Abscissa</name>
      <anchorfile>a00787.html</anchorfile>
      <anchor>a4b35e42f9bdc831051bad630befc19d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_2d</name>
      <anchorfile>a00787.html</anchorfile>
      <anchor>a4670673e25f4957cc8b1d6933601fbb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_2d</name>
      <anchorfile>a00787.html</anchorfile>
      <anchor>a37afa0ee1be4dc35f8b370b58cd05c8d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>mc_rtc::gui::plot::impl</name>
    <filename>a00788.html</filename>
    <class kind="struct">mc_rtc::gui::plot::impl::Abscissa</class>
    <class kind="struct">mc_rtc::gui::plot::impl::AbscissaOrdinate</class>
    <class kind="struct">mc_rtc::gui::plot::impl::AbscissaOrdinateWithColor</class>
    <class kind="struct">mc_rtc::gui::plot::impl::Ordinate</class>
    <class kind="struct">mc_rtc::gui::plot::impl::OrdinateWithColor</class>
    <class kind="struct">mc_rtc::gui::plot::impl::Polygon</class>
    <class kind="struct">mc_rtc::gui::plot::impl::Polygons</class>
  </compound>
  <compound kind="namespace">
    <name>mc_rtc::internal</name>
    <filename>a00781.html</filename>
    <namespace>mc_rtc::internal::is_eigen_matrix_detail</namespace>
    <class kind="struct">mc_rtc::internal::_has_configuration_load_object</class>
    <class kind="struct">mc_rtc::internal::_has_configuration_save_object</class>
    <class kind="struct">mc_rtc::internal::Allocator</class>
    <class kind="struct">mc_rtc::internal::Allocator&lt; T, typename T::eigen_aligned_operator_new_marker_type &gt;</class>
    <class kind="struct">mc_rtc::internal::args_t</class>
    <class kind="struct">mc_rtc::internal::has_configuration_load_object</class>
    <class kind="struct">mc_rtc::internal::has_configuration_save_object</class>
    <class kind="struct">mc_rtc::internal::is_eigen_matrix</class>
    <class kind="struct">mc_rtc::internal::lambda_traits</class>
    <class kind="struct">mc_rtc::internal::lambda_traits&lt; RetT(C::*)(Args...) const &gt;</class>
    <class kind="struct">mc_rtc::internal::lambda_traits&lt; RetT(C::*)(Args...)&gt;</class>
    <member kind="function">
      <type>bool</type>
      <name>is_valid_hash</name>
      <anchorfile>a00781.html</anchorfile>
      <anchor>a759676405e1815363e6d9094dd1919b1</anchor>
      <arglist>(std::size_t h)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_valid_hash</name>
      <anchorfile>a00781.html</anchorfile>
      <anchor>a0f0cc0f5914bc62d93b19fda0ed53e75</anchor>
      <arglist>(std::size_t h)</arglist>
    </member>
    <member kind="function">
      <type>MC_RTC_UTILS_DLLAPI std::string</type>
      <name>demangle</name>
      <anchorfile>a00781.html</anchorfile>
      <anchor>af017e274f3cf4699850fdbf753d07fa2</anchor>
      <arglist>(const char *name)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>mc_rtc::internal::is_eigen_matrix_detail</name>
    <filename>a00784.html</filename>
    <member kind="function">
      <type>std::true_type</type>
      <name>test</name>
      <anchorfile>a00784.html</anchorfile>
      <anchor>af906a58079257e11f4652a22f067a822</anchor>
      <arglist>(const Eigen::MatrixBase&lt; T &gt; *)</arglist>
    </member>
    <member kind="function">
      <type>std::false_type</type>
      <name>test</name>
      <anchorfile>a00784.html</anchorfile>
      <anchor>a6ba1ae61e3ffbdc9d1f72aa5363cb608</anchor>
      <arglist>(...)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>mc_rtc::io</name>
    <filename>a00789.html</filename>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>a00789.html</anchorfile>
      <anchor>af24adad562092ccd4f760a38c86fcf95</anchor>
      <arglist>(const Container &amp;c, const std::string &amp;delimiter=&quot;, &quot;)</arglist>
      <docanchor file="a00789">to_string</docanchor>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>a00789.html</anchorfile>
      <anchor>a38fc0c2f37aa3befdc6ab09b25c11f1f</anchor>
      <arglist>(const Container &amp;c, const std::string &amp;delimiter=&quot;, &quot;, const unsigned precision=std::numeric_limits&lt; typename Container::value_type &gt;::digits10)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>a00789.html</anchorfile>
      <anchor>a288c60b8869f856d23c8a94ac085438e</anchor>
      <arglist>(const Container &amp;c, Callback &amp;&amp;get_value, const std::string &amp;delimiter=&quot;, &quot;)</arglist>
      <docanchor file="a00789">to_string_transform</docanchor>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>a00789.html</anchorfile>
      <anchor>aa93b38ed5db2f9676bed820a09ec11ee</anchor>
      <arglist>(const Container &amp;c, Callback &amp;&amp;get_value, const std::string &amp;delimiter=&quot;, &quot;, const Eigen::IOFormat &amp;fmt=Eigen::IOFormat(Eigen::StreamPrecision, Eigen::DontAlignCols, &quot;\))</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>a00789.html</anchorfile>
      <anchor>a9a95c3673b2d730ddd4b75dd4cadcb2e</anchor>
      <arglist>(const Container &amp;c, const std::string &amp;delimiter=&quot;, &quot;, const Eigen::IOFormat &amp;fmt=Eigen::IOFormat(Eigen::StreamPrecision, Eigen::DontAlignCols, &quot;\, &quot; &quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;))</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>a00789.html</anchorfile>
      <anchor>aa93b38ed5db2f9676bed820a09ec11ee</anchor>
      <arglist>(const Container &amp;c, Callback &amp;&amp;get_value, const std::string &amp;delimiter=&quot;, &quot;, const Eigen::IOFormat &amp;fmt=Eigen::IOFormat(Eigen::StreamPrecision, Eigen::DontAlignCols, &quot;\))</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>a00789.html</anchorfile>
      <anchor>a9a95c3673b2d730ddd4b75dd4cadcb2e</anchor>
      <arglist>(const Container &amp;c, const std::string &amp;delimiter=&quot;, &quot;, const Eigen::IOFormat &amp;fmt=Eigen::IOFormat(Eigen::StreamPrecision, Eigen::DontAlignCols, &quot;\, &quot; &quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;))</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>mc_rtc::log</name>
    <filename>a00790.html</filename>
    <namespace>mc_rtc::log::details</namespace>
    <class kind="struct">mc_rtc::log::callback_is_serializable</class>
    <class kind="struct">mc_rtc::log::FlatLog</class>
    <class kind="struct">mc_rtc::log::GetLogType</class>
    <class kind="struct">mc_rtc::log::GetLogType&lt; std::vector&lt; double, A &gt; &gt;</class>
    <class kind="struct">mc_rtc::log::is_serializable</class>
    <class kind="struct">mc_rtc::log::LogWriter</class>
    <member kind="typedef">
      <type>std::function&lt; bool(const std::vector&lt; std::string &gt; &amp;, std::vector&lt; FlatLog::record &gt; &amp;, double)&gt;</type>
      <name>binary_log_callback</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>a2e5bbb4664bc287ec78732a63a7cd646</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(mc_rtc::MessagePackBuilder &amp;, const std::vector&lt; std::string &gt; &amp;)&gt;</type>
      <name>copy_callback</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>a9c09aed839e3ee87a5be3e286a3e8903</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; bool(const std::vector&lt; std::string &gt; &amp;, std::vector&lt; FlatLog::record &gt; &amp;, double, const copy_callback &amp;, const char *, uint64_t)&gt;</type>
      <name>binary_log_copy_callback</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>a1c86e8f30b914960080029679897a749</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>LogType</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>ae623e7dc6e6722fd48752713664b3549</anchor>
      <arglist></arglist>
      <enumvalue file="a00790.html" anchor="ae623e7dc6e6722fd48752713664b3549a6adf97f83acf6453d4a6a4b1070f3754">None</enumvalue>
      <enumvalue file="a00790.html" anchor="ae623e7dc6e6722fd48752713664b3549ac26f15e86e3de4c398a8273272aba034">Bool</enumvalue>
      <enumvalue file="a00790.html" anchor="ae623e7dc6e6722fd48752713664b3549a310554dc6901f24b84131602f5aa7728">Int8_t</enumvalue>
      <enumvalue file="a00790.html" anchor="ae623e7dc6e6722fd48752713664b3549a52b8419558c2745bb3f452f5dba89c0e">Int16_t</enumvalue>
      <enumvalue file="a00790.html" anchor="ae623e7dc6e6722fd48752713664b3549a31da5bff69db770ab36fc4197417eb6e">Int32_t</enumvalue>
      <enumvalue file="a00790.html" anchor="ae623e7dc6e6722fd48752713664b3549a6ee9244c64454706197c23f12163b3e4">Int64_t</enumvalue>
      <enumvalue file="a00790.html" anchor="ae623e7dc6e6722fd48752713664b3549aaa8a6d419e8de319fc0fb8151154a3c8">Uint8_t</enumvalue>
      <enumvalue file="a00790.html" anchor="ae623e7dc6e6722fd48752713664b3549a2cf01fdc4d5b4b49bd5531cea84517ae">Uint16_t</enumvalue>
      <enumvalue file="a00790.html" anchor="ae623e7dc6e6722fd48752713664b3549a114753c09137e486b349fb7ded3a738e">Uint32_t</enumvalue>
      <enumvalue file="a00790.html" anchor="ae623e7dc6e6722fd48752713664b3549a752da4dabeb6a21c46c62388107f2b53">Uint64_t</enumvalue>
      <enumvalue file="a00790.html" anchor="ae623e7dc6e6722fd48752713664b3549a22ae0e2b89e5e3d477f988cc36d3272b">Float</enumvalue>
      <enumvalue file="a00790.html" anchor="ae623e7dc6e6722fd48752713664b3549ad909d38d705ce75386dd86e611a82f5b">Double</enumvalue>
      <enumvalue file="a00790.html" anchor="ae623e7dc6e6722fd48752713664b3549a27118326006d3829667a400ad23d5d98">String</enumvalue>
      <enumvalue file="a00790.html" anchor="ae623e7dc6e6722fd48752713664b3549ae9b0a766c9aba1f88f69157593dcade3">Vector2d</enumvalue>
      <enumvalue file="a00790.html" anchor="ae623e7dc6e6722fd48752713664b3549abd18c4378a1b42df9061eb5bd43755c9">Vector3d</enumvalue>
      <enumvalue file="a00790.html" anchor="ae623e7dc6e6722fd48752713664b3549ada57d50e3cb02d10e15d0dab71fb846f">Vector6d</enumvalue>
      <enumvalue file="a00790.html" anchor="ae623e7dc6e6722fd48752713664b3549ab2e07f7f9214839944e939b29de2252b">VectorXd</enumvalue>
      <enumvalue file="a00790.html" anchor="ae623e7dc6e6722fd48752713664b3549a9dea906d4e9243ea050120f8f4a1f1c9">Quaterniond</enumvalue>
      <enumvalue file="a00790.html" anchor="ae623e7dc6e6722fd48752713664b3549a2ec69636c565a422c59d7fc675bcd836">PTransformd</enumvalue>
      <enumvalue file="a00790.html" anchor="ae623e7dc6e6722fd48752713664b3549a9fd99a0871090c0c75a35ac57944e044">ForceVecd</enumvalue>
      <enumvalue file="a00790.html" anchor="ae623e7dc6e6722fd48752713664b3549a08efd42d00b69280268271026472b237">MotionVecd</enumvalue>
      <enumvalue file="a00790.html" anchor="ae623e7dc6e6722fd48752713664b3549a18f1829c8dab599745c7d5bc84585aa2">VectorDouble</enumvalue>
    </member>
    <member kind="function">
      <type>bool MC_RTC_UTILS_DLLAPI</type>
      <name>iterate_binary_log</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>ae939074ac3cce1fde0bb5e0ea7e90c86</anchor>
      <arglist>(const std::string &amp;fpath, const binary_log_copy_callback &amp;callback, bool extract, const std::string &amp;time=&quot;t&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool MC_RTC_UTILS_DLLAPI</type>
      <name>iterate_binary_log</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>a51b18863af2ea7f3e981b32be6b2174f</anchor>
      <arglist>(const std::string &amp;fpath, const binary_log_callback &amp;callback, bool extract, const std::string &amp;time=&quot;t&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const char **</type>
      <name>LogTypeNames</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>a9979086ae04c2369f6ea39d42ec2fcb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>LogTypeName</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>a6351f9d1bb2bb7f8f3508cc9f0e36e5e</anchor>
      <arglist>(LogType t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>a9aa92bc1668b9218bf395ae4fc92e795</anchor>
      <arglist>(bool, Bool)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>a4a530e246a423018eb4757de9a38fe0a</anchor>
      <arglist>(int8_t, Int8_t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>a701b7606804a3db8de4c0e7a52d928c0</anchor>
      <arglist>(int16_t, Int16_t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>a2bf6ab72f6469b3269f31e5bba5a2e53</anchor>
      <arglist>(int32_t, Int32_t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>a8bfaf29781e441da25c30cbeba3acf09</anchor>
      <arglist>(int64_t, Int64_t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>a9e592f5c13ba9f39d5b1a71a53bdfd8e</anchor>
      <arglist>(uint8_t, Uint8_t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>a70fc3b45c7d5e2602b6c0967efa4b4f0</anchor>
      <arglist>(uint16_t, Uint16_t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>a5725243119abb09aa142128b7fc9f40f</anchor>
      <arglist>(uint32_t, Uint32_t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>ad6b297b2129cec68c11ffa52c448d8ae</anchor>
      <arglist>(uint64_t, Uint64_t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>a7349ebfd4a26447bfa3c1d087924b8ed</anchor>
      <arglist>(float, Float)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>a254cbef473857a8f7300c4893e025070</anchor>
      <arglist>(double, Double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>a209c2c06d48dddd58e98eb20b6537fbf</anchor>
      <arglist>(std::string, String)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>a3832207f7dfe9bb0a76bd55c40141aa0</anchor>
      <arglist>(Eigen::Vector2d, Vector2d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>a8a95695038f7381e9ff63fb77021fe22</anchor>
      <arglist>(Eigen::Vector3d, Vector3d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>abde1c442a27ca22960f0a2c42c12e1e5</anchor>
      <arglist>(Eigen::Vector6d, Vector6d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>a40e42a14f68a8cacf3f5c14bdc235422</anchor>
      <arglist>(Eigen::VectorXd, VectorXd)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>a77ff7d3e9889df9292a6575c95b473a8</anchor>
      <arglist>(Eigen::Quaterniond, Quaterniond)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>a85a6ea306358c1ae94b79e65b22cb252</anchor>
      <arglist>(sva::PTransformd, PTransformd)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>a42e9d70a432b1bc02a1f5dcff729bfb5</anchor>
      <arglist>(sva::ForceVecd, ForceVecd)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMPL_MAPPING</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>a70d34eabb941deeb9f0dea2280ae1201</anchor>
      <arglist>(sva::MotionVecd, MotionVecd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>error_and_throw</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>a2bad497e8a4c7a7f29f7ab908c83274e</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>error</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>aa189b2ec856ad8f96d632d635efc05ce</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>warning</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>a9e944001fd155fd1621157e450cf3d06</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>info</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>a0d3a4bb8b582e5c1795b8ae9cd5f3ec9</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>success</name>
      <anchorfile>a00790.html</anchorfile>
      <anchor>a4493319384c54d938a70d54193ed2dbc</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>mc_rtc::log::details</name>
    <filename>a00791.html</filename>
    <member kind="function">
      <type>MC_RTC_UTILS_DLLAPI spdlog::logger &amp;</type>
      <name>success</name>
      <anchorfile>a00791.html</anchorfile>
      <anchor>a4be6522543b254e76db5d80f58a4e290</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MC_RTC_UTILS_DLLAPI spdlog::logger &amp;</type>
      <name>info</name>
      <anchorfile>a00791.html</anchorfile>
      <anchor>a2e57684e4d69b10eb5c9f41cf59c11ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MC_RTC_UTILS_DLLAPI spdlog::logger &amp;</type>
      <name>cerr</name>
      <anchorfile>a00791.html</anchorfile>
      <anchor>aa8cc2cc8dc25d49fa533f32a67f73c33</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>mc_solver</name>
    <filename>a00773.html</filename>
    <namespace>mc_solver::details</namespace>
    <namespace>mc_solver::utils</namespace>
    <class kind="class">mc_solver::BoundedSpeedConstr</class>
    <class kind="class">mc_solver::CollisionsConstraint</class>
    <class kind="class">mc_solver::CoMIncPlaneConstr</class>
    <class kind="struct">mc_solver::CompoundJointConstraint</class>
    <class kind="class">mc_solver::ConstraintSet</class>
    <class kind="struct">mc_solver::ConstraintSetLoader</class>
    <class kind="class">mc_solver::ContactConstraint</class>
    <class kind="struct">mc_solver::ContactMsg</class>
    <class kind="class">mc_solver::DynamicsConstraint</class>
    <class kind="class">mc_solver::EqualityConstraintForce</class>
    <class kind="class">mc_solver::EqualityConstraintLambda</class>
    <class kind="class">mc_solver::EqualityConstraintRobot</class>
    <class kind="struct">mc_solver::GenericLoader</class>
    <class kind="class">mc_solver::GenInequalityConstraintForce</class>
    <class kind="class">mc_solver::GenInequalityConstraintLambda</class>
    <class kind="class">mc_solver::GenInequalityConstraintRobot</class>
    <class kind="class">mc_solver::InequalityConstraintForce</class>
    <class kind="class">mc_solver::InequalityConstraintLambda</class>
    <class kind="class">mc_solver::InequalityConstraintRobot</class>
    <class kind="class">mc_solver::KinematicsConstraint</class>
    <class kind="struct">mc_solver::QPContactPtr</class>
    <class kind="struct">mc_solver::QPContactPtrWPoints</class>
    <class kind="struct">mc_solver::QPResultMsg</class>
    <class kind="class">mc_solver::QPSolver</class>
    <class kind="class">mc_solver::RobotEnvCollisionsConstraint</class>
    <class kind="struct">mc_solver::RobotMsg</class>
    <class kind="struct">mc_solver::ZMP</class>
    <member kind="typedef">
      <type>mc_rbdyn::CompoundJointConstraintDescription</type>
      <name>CompoundJointConstraintDescription</name>
      <anchorfile>a00773.html</anchorfile>
      <anchor>afa4d95156100f691a3f35392f403217f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>mc_rbdyn::CompoundJointConstraintDescriptionVector</type>
      <name>CompoundJointConstraintDescriptionVector</name>
      <anchorfile>a00773.html</anchorfile>
      <anchor>a2503fc4f7d91a2f6c53349f2a12effd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ConstraintSet &gt;</type>
      <name>ConstraintSetPtr</name>
      <anchorfile>a00773.html</anchorfile>
      <anchor>a9bce96d8d352ebedfffce2e42e0300ab</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>mc_solver::details</name>
    <filename>a00793.html</filename>
    <class kind="struct">mc_solver::details::CompoundJointConstraint</class>
  </compound>
  <compound kind="namespace">
    <name>mc_solver::utils</name>
    <filename>a00794.html</filename>
    <class kind="class">mc_solver::utils::Constraint</class>
    <class kind="struct">mc_solver::utils::ContactWrenchMatrixToLambdaMatrix</class>
    <class kind="class">mc_solver::utils::EqualityConstraint</class>
    <class kind="class">mc_solver::utils::GenInequalityConstraint</class>
    <class kind="class">mc_solver::utils::InequalityConstraint</class>
    <class kind="struct">mc_solver::utils::IsUpdate</class>
    <class kind="struct">mc_solver::utils::Update</class>
    <class kind="struct">mc_solver::utils::UpdateForce</class>
    <class kind="struct">mc_solver::utils::UpdateNrVarsData</class>
    <class kind="struct">mc_solver::utils::UpdateNrVarsLambda</class>
    <class kind="struct">mc_solver::utils::UpdateNrVarsRobot</class>
    <class kind="struct">mc_solver::utils::UpdateTag</class>
    <member kind="typedef">
      <type>Update&lt; UpdateNrVarsRobot &gt;</type>
      <name>UpdateRobot</name>
      <anchorfile>a00794.html</anchorfile>
      <anchor>a3fef857fcf6a819b7f8061f33248d0b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Update&lt; UpdateNrVarsLambda &gt;</type>
      <name>UpdateLambda</name>
      <anchorfile>a00794.html</anchorfile>
      <anchor>a51609ca39a4099935af3983ff08a0c50</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>mc_tasks</name>
    <filename>a00764.html</filename>
    <namespace>mc_tasks::force</namespace>
    <namespace>mc_tasks::lipm_stabilizer</namespace>
    <class kind="struct">mc_tasks::AddContactTask</class>
    <class kind="struct">mc_tasks::AddRemoveContactTask</class>
    <class kind="struct">mc_tasks::BSplineTrajectoryTask</class>
    <class kind="struct">mc_tasks::CoMTask</class>
    <class kind="struct">mc_tasks::EndEffectorTask</class>
    <class kind="struct">mc_tasks::ExactCubicTrajectoryTask</class>
    <class kind="struct">mc_tasks::GazeTask</class>
    <class kind="struct">mc_tasks::LookAtSurfaceTask</class>
    <class kind="struct">mc_tasks::LookAtTask</class>
    <class kind="struct">mc_tasks::MetaTask</class>
    <class kind="struct">mc_tasks::MetaTaskLoader</class>
    <class kind="struct">mc_tasks::MomentumTask</class>
    <class kind="struct">mc_tasks::OrientationTask</class>
    <class kind="struct">mc_tasks::PositionBasedVisServoTask</class>
    <class kind="struct">mc_tasks::PositionTask</class>
    <class kind="struct">mc_tasks::PostureTask</class>
    <class kind="struct">mc_tasks::RelativeEndEffectorTask</class>
    <class kind="struct">mc_tasks::RemoveContactTask</class>
    <class kind="struct">mc_tasks::SmoothTask</class>
    <class kind="struct">mc_tasks::SplineTrajectoryTask</class>
    <class kind="struct">mc_tasks::SurfaceTransformTask</class>
    <class kind="struct">mc_tasks::TrajectoryTaskGeneric</class>
    <class kind="struct">mc_tasks::VectorOrientationTask</class>
    <member kind="typedef">
      <type>std::shared_ptr&lt; MetaTask &gt;</type>
      <name>MetaTaskPtr</name>
      <anchorfile>a00764.html</anchorfile>
      <anchor>a3ce36af538f25151dc006eb3d50e8b3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>MC_SOLVER_DLLAPI double</type>
      <name>extraStiffness</name>
      <anchorfile>a00764.html</anchorfile>
      <anchor>aa673a5574c449b983c740d35cddf6669</anchor>
      <arglist>(double error, double extraStiffness)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>mc_tasks::force</name>
    <filename>a00795.html</filename>
    <class kind="struct">mc_tasks::force::AdmittanceTask</class>
    <class kind="struct">mc_tasks::force::ComplianceTask</class>
    <class kind="struct">mc_tasks::force::CoPTask</class>
    <class kind="struct">mc_tasks::force::DampingTask</class>
  </compound>
  <compound kind="namespace">
    <name>mc_tasks::lipm_stabilizer</name>
    <filename>a00765.html</filename>
    <namespace>mc_tasks::lipm_stabilizer::internal</namespace>
    <class kind="struct">mc_tasks::lipm_stabilizer::ContactDescription</class>
    <class kind="struct">mc_tasks::lipm_stabilizer::StabilizerTask</class>
    <class kind="struct">mc_tasks::lipm_stabilizer::ZMPCC</class>
    <member kind="typedef">
      <type>std::pair&lt; Eigen::MatrixXd, Eigen::VectorXd &gt;</type>
      <name>HrepXd</name>
      <anchorfile>a00765.html</anchorfile>
      <anchor>af644950088ef46324f20a7214021a824</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; ContactDescription, Eigen::aligned_allocator&lt; ContactDescription &gt; &gt;</type>
      <name>ContactDescriptionVector</name>
      <anchorfile>a00765.html</anchorfile>
      <anchor>a4ca092c9a2df0b34b399ff21a8bc938f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>mc_tasks::lipm_stabilizer::internal</name>
    <filename>a00797.html</filename>
    <class kind="struct">mc_tasks::lipm_stabilizer::internal::Contact</class>
  </compound>
  <compound kind="namespace">
    <name>mc_trajectory</name>
    <filename>a00798.html</filename>
    <class kind="struct">mc_trajectory::BSpline</class>
    <class kind="struct">mc_trajectory::ExactCubic</class>
    <class kind="struct">mc_trajectory::InterpolatedRotation</class>
    <class kind="struct">mc_trajectory::Spline</class>
    <member kind="function">
      <type>MC_TRAJECTORY_DLLAPI Eigen::MatrixXd</type>
      <name>generateInterpolatedWaypoints</name>
      <anchorfile>a00798.html</anchorfile>
      <anchor>a9fbcf4dd49d2e09b5d33208fae44f11b</anchor>
      <arglist>(const Eigen::Vector3d &amp;start, const Eigen::Vector3d &amp;stop, unsigned int nrWP)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>sch</name>
    <filename>a00779.html</filename>
    <namespace>sch::mc_rbdyn</namespace>
  </compound>
  <compound kind="namespace">
    <name>sch::mc_rbdyn</name>
    <filename>a00780.html</filename>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI void</type>
      <name>transform</name>
      <anchorfile>a00780.html</anchorfile>
      <anchor>a3c0ffcdf6b05980ab8ca56474c431bc7</anchor>
      <arglist>(S_Object &amp;obj, const sva::PTransformd &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI STP_BV *</type>
      <name>STPBV</name>
      <anchorfile>a00780.html</anchorfile>
      <anchor>a30354c6b845b9f2c2bf59342c84f9e0d</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI S_Polyhedron *</type>
      <name>Polyhedron</name>
      <anchorfile>a00780.html</anchorfile>
      <anchor>a1d8bc5539da072c12d1f76bc317f8af3</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI double</type>
      <name>distance</name>
      <anchorfile>a00780.html</anchorfile>
      <anchor>a8e193a456c2d3dab3ad5f12ed049e3b1</anchor>
      <arglist>(CD_Pair &amp;pair, Eigen::Vector3d &amp;p1, Eigen::Vector3d &amp;p2)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>robotFromConfig</name>
    <title>Helpers to obtain robot index/name from configuration</title>
    <filename>a00759.html</filename>
    <member kind="function">
      <type>MC_RBDYN_DLLAPI const mc_rbdyn::Robot &amp;</type>
      <name>robotFromConfig</name>
      <anchorfile>a00759.html</anchorfile>
      <anchor>ga70b316b2f0c0caf547e160e74c2a029d</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config, const mc_rbdyn::Robots &amp;robots, const std::string &amp;prefix, bool required=false, const std::string &amp;robotIndexKey=&quot;robotIndex&quot;, const std::string &amp;robotNameKey=&quot;robot&quot;, const std::string &amp;defaultRobotName=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>std::string MC_RBDYN_DLLAPI</type>
      <name>robotNameFromConfig</name>
      <anchorfile>a00759.html</anchorfile>
      <anchor>ga40325ac769295d23f270976eead26245</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config, const mc_rbdyn::Robots &amp;robots, const std::string &amp;prefix=&quot;&quot;, bool required=false, const std::string &amp;robotIndexKey=&quot;robotIndex&quot;, const std::string &amp;robotNameKey=&quot;robot&quot;, const std::string &amp;defaultRobotName=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int MC_RBDYN_DLLAPI</type>
      <name>robotIndexFromConfig</name>
      <anchorfile>a00759.html</anchorfile>
      <anchor>gaf9b711ec2baa5684b8f422d740464b5f</anchor>
      <arglist>(const mc_rtc::Configuration &amp;config, const mc_rbdyn::Robots &amp;robots, const std::string &amp;prefix=&quot;&quot;, bool required=false, const std::string &amp;robotIndexKey=&quot;robotIndex&quot;, const std::string &amp;robotNameKey=&quot;robot&quot;, const std::string &amp;defaultRobotName=&quot;&quot;)</arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>mc_rtc</title>
    <filename>index</filename>
  </compound>
</tagfile>
